{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/dist/build.css","path":"dist/build.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/dist/build.js","path":"dist/build.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/dist/custom.css","path":"dist/custom.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/dist/custom.js","path":"dist/custom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/app.js","path":"javascripts/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/class-module.js","path":"javascripts/class-module.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/custom.js","path":"javascripts/custom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/disqusjs.js","path":"javascripts/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/gitalk.js","path":"javascripts/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/valine.js","path":"javascripts/valine.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/algoliasearch-lite.umd.js","path":"modules/algoliasearch-lite.umd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/highlight.min.js","path":"modules/highlight.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/lazyload.min.js","path":"modules/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/md5.min.js","path":"modules/md5.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/nprogress.js","path":"modules/nprogress.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/perfect-scrollbar.min.js","path":"modules/perfect-scrollbar.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/plyr.js","path":"modules/plyr.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/swiper-bundle.min.js","path":"modules/swiper-bundle.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/tocbot.min.js","path":"modules/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/modules/typed.min.js","path":"modules/typed.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/base.scss","path":"stylesheets/base.scss","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/github.css","path":"stylesheets/github.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/media-fixed.scss","path":"stylesheets/media-fixed.scss","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/normalize.css","path":"stylesheets/normalize.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/nprogress.css","path":"stylesheets/nprogress.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/page.scss","path":"stylesheets/page.scss","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/perfect-scrollbar.css","path":"stylesheets/perfect-scrollbar.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/plyr.css","path":"stylesheets/plyr.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/post.css","path":"stylesheets/post.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/remark42.css","path":"stylesheets/remark42.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/spectre-exp.min.css","path":"stylesheets/spectre-exp.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/spectre-icons.min.css","path":"stylesheets/spectre-icons.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/spectre.min.css","path":"stylesheets/spectre.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/style.scss","path":"stylesheets/style.scss","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/swiper-bundle.min.css","path":"stylesheets/swiper-bundle.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/tocbot.css","path":"stylesheets/tocbot.css","modified":0,"renderable":1},{"_id":"source/images/IMG_3406.jpeg","path":"images/IMG_3406.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3409.jpeg","path":"images/IMG_3409.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3480.jpeg","path":"images/IMG_3480.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3519.jpeg","path":"images/IMG_3519.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3458.jpeg","path":"images/IMG_3458.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3575.jpeg","path":"images/IMG_3575.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3677.jpeg","path":"images/IMG_3677.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3967.jpeg","path":"images/IMG_3967.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3975.jpeg","path":"images/IMG_3975.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_4042.jpeg","path":"images/IMG_4042.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_4316.jpeg","path":"images/IMG_4316.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_3918.jpeg","path":"images/IMG_3918.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"88960b3c80cfb8b161add45fcdece4553ed3bc46","modified":1663238234761},{"_id":"source/_posts/Hello-Hexo.md","hash":"b190d52ed09b2bf2ee702f1fcb239695a925dda9","modified":1663235263492},{"_id":"themes/frame/LICENSE","hash":"9a96e496379e53825a7715336da012bc67be1e43","modified":1663235464593},{"_id":"themes/frame/README-CN.md","hash":"cb778700a34b7d54fb3f6f6c8c7d48a2b05f2f7a","modified":1663235464593},{"_id":"themes/frame/README.md","hash":"3de4250f6380b0c163f0b77f62ebf19935bc5f20","modified":1663235464593},{"_id":"themes/frame/_config.yml","hash":"66b8ab4aee1f08939a56255f463ac3fa6e219890","modified":1663235464593},{"_id":"themes/frame/layout/archive.ejs","hash":"583f07a6cac1bab548d622323f3fe3333361bb87","modified":1663235464594},{"_id":"themes/frame/layout/category.ejs","hash":"c785bbb6ead7dd22456207dac63ca8abedfeb45c","modified":1663235464594},{"_id":"themes/frame/layout/layout.ejs","hash":"c9c2539904c1fa03a3e052a10c662caef81c0518","modified":1663235464594},{"_id":"themes/frame/layout/index.ejs","hash":"f61ed1f06bedf00e1a6b5727ed4ee776ec89a7c0","modified":1663235464594},{"_id":"themes/frame/layout/post.ejs","hash":"d783d0f15318f32893aac15701c9ea36bb5e8015","modified":1663235464595},{"_id":"themes/frame/layout/tag.ejs","hash":"4c987f24b27780269dbd5bd9cb1827d3c7eb2430","modified":1663235464595},{"_id":"themes/frame/source/logo.png","hash":"84f54561927cd58e94d6e93ec66389351fcdd7d8","modified":1663235464605},{"_id":"themes/frame/layout/pages/profile.ejs","hash":"46fb09093986341a3f5a2bebf5b934ca41d046de","modified":1663235464594},{"_id":"themes/frame/layout/pages/page_head.ejs","hash":"6e3320fad147616852ae6de9bcce2eb5b6d43940","modified":1663235464594},{"_id":"themes/frame/source/favicon.ico","hash":"72fd56e0296011c23791e467195e63583f04a96d","modified":1663235464599},{"_id":"themes/frame/layout/partials/footer.ejs","hash":"db0aef246cb04d34ed940bfa3aa9432fbf05c41c","modified":1663235464594},{"_id":"themes/frame/layout/partials/head.ejs","hash":"3f7369c177af1cc947944742f83d04b927ee9cfe","modified":1663235464594},{"_id":"themes/frame/layout/partials/header.ejs","hash":"d8bb8325eed4a3116bcf6cb7afa04bd50ca39d48","modified":1663235464594},{"_id":"themes/frame/layout/partials/post_gallery.ejs","hash":"8483873bd33dd2a5bec6d64f2d590a8ec0c97e8b","modified":1663235464594},{"_id":"themes/frame/layout/post/post_comment.ejs","hash":"eeb9e2fa4129757494fd3f0fd9e94c60af9a47c4","modified":1663235464595},{"_id":"themes/frame/layout/partials/tag_cloud.ejs","hash":"37cb55a51fa95561927d6123929342010a20fa35","modified":1663235464594},{"_id":"themes/frame/layout/partials/paginator.ejs","hash":"f6062c90eec850ce1343af34b60c05d83e4cb2c7","modified":1663235464594},{"_id":"themes/frame/layout/post/post_footer.ejs","hash":"7bda52c6138376c61838099794b8ac423ae0e3f3","modified":1663235464595},{"_id":"themes/frame/layout/partials/search.ejs","hash":"26de89900de6af8957efd7c111fe454364809c8a","modified":1663235464594},{"_id":"themes/frame/source/css/base.styl","hash":"8c98de8fdba4b5e07c7f0285d38797e4fb44951a","modified":1663235464595},{"_id":"themes/frame/layout/post/post_content.ejs","hash":"4d66cc210e8863037876786ddf25ed358104040a","modified":1663235464595},{"_id":"themes/frame/source/css/color.styl","hash":"08a1550fa1c21640031380c5c74861a6ef7fc7d9","modified":1663235464595},{"_id":"themes/frame/source/css/font.styl","hash":"b0495eec2367892408ef07f1351360431e1ee40a","modified":1663235464596},{"_id":"themes/frame/source/css/layout.styl","hash":"6fa1fdaa4a8609ef9219d3bf316d2bbe45abb1b2","modified":1663235464597},{"_id":"themes/frame/source/css/media.styl","hash":"1e820047600aa767b85bba51528c4a5ddd18f1bd","modified":1663235464597},{"_id":"themes/frame/source/css/motion.styl","hash":"12e337e0d5d28dcf17072b78fe23daad86dfb34a","modified":1663235464597},{"_id":"themes/frame/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1663235464597},{"_id":"themes/frame/source/css/style.styl","hash":"3961c5b4b70185ed1a23fb0e8d88c1ac2baeb8d7","modified":1663235464599},{"_id":"themes/frame/source/css/variable.styl","hash":"99e7c60921830b63986112ed394d3b0988302a68","modified":1663235464599},{"_id":"themes/frame/source/icon/arrow-left.svg","hash":"3e38bcddb00b70250dcc344d178523423069a531","modified":1663235464604},{"_id":"themes/frame/source/icon/arrow-right.svg","hash":"f46700691e6b2b69464f741f72e0326f22e23a9f","modified":1663235464605},{"_id":"themes/frame/source/icon/arrow-up.svg","hash":"7a1952a615fdfc34f46d5f56178a3d01defc549c","modified":1663235464605},{"_id":"themes/frame/layout/partials/post_list.ejs","hash":"ed23100a6ab8403a2d2618c5079a717f9ebeff09","modified":1663235464594},{"_id":"themes/frame/layout/post/post_head.ejs","hash":"3ea7c588497c99d04a909fe6de93b17c31fc312b","modified":1663235464595},{"_id":"themes/frame/source/icon/checkbox-checked.svg","hash":"20c621febd93be17d83b836b02f32f8fc6fdf421","modified":1663235464605},{"_id":"themes/frame/source/icon/checkbox-default.svg","hash":"a6359bfa84c47466200c4031a905769e6f4d6b8a","modified":1663235464605},{"_id":"themes/frame/source/icon/close-btn.svg","hash":"9796bc554ff5837c48fa9659f7a67e78502c52b8","modified":1663235464605},{"_id":"themes/frame/source/icon/marker.svg","hash":"a10697bb8e9dfc958df41210641e2b6c848b3f5c","modified":1663235464605},{"_id":"themes/frame/source/js/search.js","hash":"048e368f1d8d1f2fd3e3ca0666a34951ad0579b6","modified":1663235464605},{"_id":"themes/frame/source/js/menu.js","hash":"0e25246e2b815e2d712d2276628b949078d58e00","modified":1663235464605},{"_id":"themes/frame/source/js/format.js","hash":"4b223fd9d437555ae8fd834801c140a659633178","modified":1663235464605},{"_id":"themes/frame/source/css/color_mode/classic.styl","hash":"49f3e8e439bdec80e7e9e6f1dd28629a579a3e5d","modified":1663235464595},{"_id":"themes/frame/source/css/color_mode/dark.styl","hash":"e83baf1182820f16414a5b284f2f11ad2f4be1bf","modified":1663235464596},{"_id":"themes/frame/source/css/color_mode/default.styl","hash":"af70778668c424c7515ab890aeca75f68c3e87c7","modified":1663235464596},{"_id":"themes/frame/source/css/component/icon.styl","hash":"87e9158ca8f81e482c2119d9164afd4a2e05f592","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1663235464596},{"_id":"themes/frame/source/css/component/component.styl","hash":"8f3df00b2059bf7b54e6b935d4eaeef8729760f8","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1663235464596},{"_id":"themes/frame/source/css/highlight/solarized-light.styl","hash":"fc80869f1eb7ebb29c570d70ec9adbec061acf8d","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1663235464597},{"_id":"themes/frame/source/css/highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1663235464597},{"_id":"themes/frame/source/css/partials/header.styl","hash":"41ae499f7b84ba8bd50f500633a64626cb0579af","modified":1663235464598},{"_id":"themes/frame/source/css/partials/paginator.styl","hash":"5327d02e03a374519c68c346f0eda9135d70e463","modified":1663235464598},{"_id":"themes/frame/source/css/partials/post_list.styl","hash":"7805f6b924a1048b62990ce511b7eddfe073fe8a","modified":1663235464598},{"_id":"themes/frame/source/css/partials/post_gallery.styl","hash":"94a366e946db99f57b1512a1b5f724e9b69e9660","modified":1663235464598},{"_id":"themes/frame/source/css/highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1663235464597},{"_id":"themes/frame/source/css/partials/footer.styl","hash":"dd5f5b70254d279e85170a3493fda34454567261","modified":1663235464598},{"_id":"themes/frame/source/css/partials/search.styl","hash":"2cb2c12b178c57f2ad8f0beeee38bc352c4864b5","modified":1663235464598},{"_id":"themes/frame/source/css/post/code.styl","hash":"8f5f10563062fd4503907f7a49a12dff4f387a3b","modified":1663235464598},{"_id":"themes/frame/source/css/post/media.styl","hash":"1c78bdf466ea4fc71ead183035816474465ce155","modified":1663235464598},{"_id":"themes/frame/source/css/post/post_footer.styl","hash":"4cb3d7bfd6f56af13c22631981eaaec23d8740ee","modified":1663235464598},{"_id":"themes/frame/source/css/post/post_comment.styl","hash":"802fa34c45d206f8ded99e1a6f3f6d6d8a173e69","modified":1663235464598},{"_id":"themes/frame/source/css/post/post_head.styl","hash":"7632881952919e814cc27260fd6662dc7adb527c","modified":1663235464598},{"_id":"themes/frame/source/css/post/post_content.styl","hash":"7e67044b35ec4ae80b5c963c4c6f6b4041f79f19","modified":1663235464598},{"_id":"themes/frame/source/css/post/tag_plugin.styl","hash":"8ed0be2ad2ac96103fc95cd4cbea3ba9e0bde000","modified":1663235464599},{"_id":"themes/frame/source/css/partials/profile.styl","hash":"dcf7af4839e8f849053b089b55eb3e3d52de6e88","modified":1663235464598},{"_id":"themes/frame/source/css/post/task_list.styl","hash":"0f176ec8a9987f1a5fe41005b5ee56206d656fd2","modified":1663235464599},{"_id":"themes/frame/source/css/post/table.styl","hash":"e30078835d3495a99566594e5946c50d44e73092","modified":1663235464599},{"_id":"themes/frame/source/fonts/roboto_mono/RobotoMono-Regular.ttf","hash":"8b91c38b4beb70b8b39a1f7cb601fc1f426a9af8","modified":1663235464604},{"_id":"themes/frame/source/fonts/roboto_mono/RobotoMono-VariableFont_wght.ttf","hash":"2094dc3e76a8e206c081e5ad494226caa4eaa81f","modified":1663235464604},{"_id":"themes/frame/source/fonts/inter/Inter.ttf","hash":"62349d6842fa9aa327596276c9f94c2439dd41f5","modified":1663235464603},{"_id":"themes/frame/source/profile_cover.png","hash":"345e538205dc1072d2f1acac72b8846bc63e5eb1","modified":1663235464609},{"_id":"public/2022/09/15/Hello-Hexo/index.html","hash":"19783c38056c590980db86ed20b7183749242f7d","modified":1663243235669},{"_id":"public/2022/09/15/hello-world/index.html","hash":"2ea4b7d87b21fb23682c91932aabaa6f6d572c76","modified":1663243235669},{"_id":"public/index.html","hash":"f7993d0cbb4b84a557ca5b1be6d4b8e47d014dd3","modified":1663243196228},{"_id":"public/archives/index.html","hash":"c3201becaf15fbbcfbcbc8c6259f248fb2630601","modified":1663243196228},{"_id":"public/archives/2022/09/index.html","hash":"b02cd61e2e82e2e7221912e202fded87d85f3794","modified":1663243196228},{"_id":"public/archives/2022/index.html","hash":"6aaf579cdc3291664214f54f627cc2338c440287","modified":1663243196228},{"_id":"public/favicon.ico","hash":"72fd56e0296011c23791e467195e63583f04a96d","modified":1663235542007},{"_id":"public/logo.png","hash":"84f54561927cd58e94d6e93ec66389351fcdd7d8","modified":1663235542007},{"_id":"public/icon/arrow-left.svg","hash":"3e38bcddb00b70250dcc344d178523423069a531","modified":1663235542007},{"_id":"public/icon/arrow-right.svg","hash":"f46700691e6b2b69464f741f72e0326f22e23a9f","modified":1663235542007},{"_id":"public/icon/arrow-up.svg","hash":"7a1952a615fdfc34f46d5f56178a3d01defc549c","modified":1663235542007},{"_id":"public/icon/checkbox-checked.svg","hash":"20c621febd93be17d83b836b02f32f8fc6fdf421","modified":1663235542007},{"_id":"public/icon/close-btn.svg","hash":"9796bc554ff5837c48fa9659f7a67e78502c52b8","modified":1663235542007},{"_id":"public/icon/marker.svg","hash":"a10697bb8e9dfc958df41210641e2b6c848b3f5c","modified":1663235542007},{"_id":"public/icon/checkbox-default.svg","hash":"a6359bfa84c47466200c4031a905769e6f4d6b8a","modified":1663235542007},{"_id":"public/fonts/roboto_mono/RobotoMono-Regular.ttf","hash":"8b91c38b4beb70b8b39a1f7cb601fc1f426a9af8","modified":1663235542007},{"_id":"public/css/base.css","hash":"11e2e849d3e5bd99b41a7c9bcf3fd7a216904696","modified":1663235542007},{"_id":"public/css/color.css","hash":"e991cf9b111c3bf538573ebb02a98eab498f26ce","modified":1663235542007},{"_id":"public/css/font.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663235542007},{"_id":"public/css/media.css","hash":"3144eb379cbe4d1f6666df8104b7f18c1ef06b38","modified":1663235542007},{"_id":"public/css/layout.css","hash":"822ffcfa7513ccf8a2f3fb5164bc2c37a350ec93","modified":1663235542007},{"_id":"public/css/motion.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663235542007},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1663235542007},{"_id":"public/css/variable.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663235542007},{"_id":"public/js/format.js","hash":"4b223fd9d437555ae8fd834801c140a659633178","modified":1663235542007},{"_id":"public/js/menu.js","hash":"0e25246e2b815e2d712d2276628b949078d58e00","modified":1663235542007},{"_id":"public/js/search.js","hash":"048e368f1d8d1f2fd3e3ca0666a34951ad0579b6","modified":1663235542007},{"_id":"public/css/color_mode/dark.css","hash":"d51b861524bd38d2344cfe7ffccf205987326410","modified":1663235542007},{"_id":"public/css/color_mode/classic.css","hash":"e991cf9b111c3bf538573ebb02a98eab498f26ce","modified":1663235542007},{"_id":"public/css/color_mode/default.css","hash":"e991cf9b111c3bf538573ebb02a98eab498f26ce","modified":1663235542007},{"_id":"public/css/component/component.css","hash":"6c51e644f79c4cb472ac59d68095ffa5cf0b226a","modified":1663235542007},{"_id":"public/css/component/icon.css","hash":"3e4ad65bc92742176c0e44e6ee9f0e9ea73af634","modified":1663235542007},{"_id":"public/css/highlight/ascetic.css","hash":"a06999984d511a2a1394a1c98e8d9361eb1ae65c","modified":1663235542007},{"_id":"public/css/highlight/brown-paper.css","hash":"4967ca23f5465a40972eff5b853809a12706f71d","modified":1663235542007},{"_id":"public/css/highlight/dark.css","hash":"aa5ea7d787478548136b3bbfca571f408e3b83de","modified":1663235542007},{"_id":"public/css/highlight/foundation.css","hash":"d922414db28c12f9e8d8156676883c250b7538f0","modified":1663235542007},{"_id":"public/css/highlight/github-gist.css","hash":"f8714f28f71206ebe8dd1a61d178bc1052f9246c","modified":1663235542007},{"_id":"public/css/highlight/darkula.css","hash":"d9ec2b3c225cf97a3106fef780a013da5863351d","modified":1663235542007},{"_id":"public/css/highlight/github.css","hash":"20ad0faf49fa0f989b09abd7b51785c6341051b0","modified":1663235542007},{"_id":"public/css/highlight/googlecode.css","hash":"b2baebd4ffb36110c716531e94be914180fc9caf","modified":1663235542007},{"_id":"public/css/highlight/rainbow.css","hash":"4ec8bede7a0b77958c95536d76d2084f15031d79","modified":1663235542007},{"_id":"public/css/highlight/idea.css","hash":"27647e73ac75f98d1519825011fe19d63ab19f1a","modified":1663235542007},{"_id":"public/css/highlight/school-book.css","hash":"886980d440f173c96d257817257591c084b049c5","modified":1663235542007},{"_id":"public/css/highlight/solarized-dark.css","hash":"9864f120d9e4c17d332974063cd6b158204cd8e1","modified":1663235542007},{"_id":"public/css/highlight/solarized-light.css","hash":"a52da02d0b3610e068bb21aee6a55b8288f7b83a","modified":1663235542007},{"_id":"public/css/highlight/tomorrow.css","hash":"914507e95eefdc343445066c2084df60b04cfb1e","modified":1663235542007},{"_id":"public/css/highlight/vs.css","hash":"4bc7118cbf33a476208489caef118abbb40c9020","modified":1663235542007},{"_id":"public/css/highlight/xcode.css","hash":"4cc639d46ca5e7d8ca7860e1319b50b47a59ff23","modified":1663235542007},{"_id":"public/css/highlight/zenburn.css","hash":"d0be7e39f26b55e4012144f8724c34985ff3212d","modified":1663235542007},{"_id":"public/css/partials/footer.css","hash":"d1dfd7bd071085af8d4e80f70648b83112c287d1","modified":1663235542007},{"_id":"public/css/partials/header.css","hash":"9418e2e0ce38edc4172a3df4f5cd2291693231d8","modified":1663235542007},{"_id":"public/css/partials/paginator.css","hash":"a240b9e4fc2b46f2cf4465c21805e594eadadd18","modified":1663235542007},{"_id":"public/css/partials/post_gallery.css","hash":"68e15fcd0dee015577207ca4d3c5976e10ce704b","modified":1663235542007},{"_id":"public/css/partials/post_list.css","hash":"da9c93a05e009188815e7c394e1fcff4e9b10722","modified":1663235542007},{"_id":"public/css/partials/profile.css","hash":"f1d000f5cb5d63ba6ecce3c6125f9bb759e35c00","modified":1663235542007},{"_id":"public/css/partials/search.css","hash":"1c02e947bee7ffc25d10d5cd11de972f268c4e03","modified":1663235542007},{"_id":"public/css/post/code.css","hash":"d6c0ca745b227758cc866d8abbae4e8bb1dd62a6","modified":1663235542007},{"_id":"public/css/post/media.css","hash":"60cfd57533bf5105853bd7adb91866385d1eca43","modified":1663235542007},{"_id":"public/css/post/post_content.css","hash":"067b56302dabd1453fc83f5557986e333e7c1d8c","modified":1663235542007},{"_id":"public/css/post/post_footer.css","hash":"d0758b9a0940a796324b37dd8a4f1bef55dd8e91","modified":1663235542007},{"_id":"public/css/post/post_head.css","hash":"bec000cd9916923a8d9796e3035fbba00f841c62","modified":1663235542007},{"_id":"public/css/post/tag_plugin.css","hash":"d970523561929959648ccd6cb79dc3af1161fbd1","modified":1663235542007},{"_id":"public/css/post/table.css","hash":"85cf601b8e4edffee02f6a4d33be417a366ff0f8","modified":1663235542007},{"_id":"public/css/post/post_comment.css","hash":"9310f53d17d2c369f03d0cab980688847aed0078","modified":1663235542007},{"_id":"public/css/post/task_list.css","hash":"e2763e10a606771345ed27e208f41a972c5d591f","modified":1663235542007},{"_id":"public/css/style.css","hash":"f1b669a54c928168d56b4974aee651af82907e7f","modified":1663237769025},{"_id":"public/fonts/roboto_mono/RobotoMono-VariableFont_wght.ttf","hash":"2094dc3e76a8e206c081e5ad494226caa4eaa81f","modified":1663235542007},{"_id":"public/fonts/inter/Inter.ttf","hash":"62349d6842fa9aa327596276c9f94c2439dd41f5","modified":1663235542007},{"_id":"public/profile_cover.png","hash":"345e538205dc1072d2f1acac72b8846bc63e5eb1","modified":1663235542007},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"fa7a686d73770b5269578d97f6c75903bef5b0a3","modified":1663237417145},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/CHANGELOG.md","hash":"45e3f28e7a4085134630a77b499670a8bcac6df1","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/.babelrc","hash":"98714b5432f56c788e08a5194f2f33148da6ca63","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/.eslintignore","hash":"0d8193103ddb9947903ebb5204cf1e188902f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/.prettierrc","hash":"8f8d09c16c9623c6e0a5d8f22b64292ee98a5a4c","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/LICENSE","hash":"df86e662005fc659cb72166664f8360223c10864","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/package.json","hash":"694d645c6702d16d45607ab2f0ed65f165c968f6","modified":1663241739385},{"_id":"node_modules/hexo-theme-aomori/gulpfile.js","hash":"029ff69b9df64bf205ba5b2880e40f09fa1d2177","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/_config.yml","hash":"7b06be8d7fdf7f3849c29d2b9904e57095069ba4","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/stylelint.config.js","hash":"35805e8a64447c3e9fec8cb7ca619783b4ffa4af","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/languages/cn.yml","hash":"041cda235156e1a078c27b969cadc4e29d017475","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/.github/dependabot.yml","hash":"7e68a5fac86d2eb86706b9ec9e99bd0ce00c15b0","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/languages/ja.yml","hash":"90a615a4f6e9af92ec7695022c475ff4ce3b8081","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/README.md","hash":"9284588f3d73b808fef81ae9eb1544658ee036e0","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/index.ejs","hash":"ca9a6b1e5d2d952757671637156c5d72e6a0cb13","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/.eslintrc.js","hash":"7d4dd8cabb411820feb1bfebb14992255fe2b714","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/page.ejs","hash":"5e77fecc752e7baa7ce5ac57162980202160811d","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/layout.ejs","hash":"c5dd66db0cea3796abda36146ab38f061c91f39e","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/post.ejs","hash":"f80a3073ea72631a26292ba16906b6d692a6e67c","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/archive-post.ejs","hash":"74371ea0ece20630f686459a3df334b760c6bc55","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/.github/workflows/action.yml","hash":"da59ad2d1d153ec97069cd74b920ea2e44d8ce3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/archive.ejs","hash":"f15750967beb06d91491aade0b4b00cb76a37dc9","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/article-index.ejs","hash":"a436624e8aeb8c94113566cb1756e5c031cf5d8d","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/languages/it.yml","hash":"64a5acadfdcd365474ba1161041f8c5938f59683","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/article-tweet.ejs","hash":"67045e6d5d4bf141ad3e8a2bf34624ca5938e626","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/article.ejs","hash":"64fd49d64394a8a91030a56012a0131ee113d0a8","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/footer.ejs","hash":"f3366e3e0363de14099c6bf97727e844abe1f04b","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/search.ejs","hash":"1569fd207c3be44ad37b644fb1399416a54779d3","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/head.ejs","hash":"b4fe8c26c41ecb03e666ef9fa45aae43c420bd38","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/meta.ejs","hash":"c8c71be685e412afbd8e9b25262e22f483f5e729","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/sidebar.ejs","hash":"0f049afead13cf54b5e2f3174379d7a79eac0efe","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/social.ejs","hash":"3ab80663dee0f4e3ae33ec4f42874530c7e926ec","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_widget/category.ejs","hash":"70bba3e81f42135ffeb2d129834fd5df8aea4c10","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_widget/recent_posts.ejs","hash":"d45e8c7b9c7fec1b8fdeabaa5026f27da0a04304","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_widget/archive.ejs","hash":"4d00993c9f80ddbce6d4b8317d4c29a4fb1fb139","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/header.ejs","hash":"29618017302e56fcb0bcc3a6487bacf6cb668086","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_widget/tag.ejs","hash":"e45f32b6c1b3a23c361d2c7dc70207d93c0f71b1","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_widget/toc.ejs","hash":"05a8cea96817332d13bf3ede759e6f72ed0f7973","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/dist/custom.css","hash":"225a8abab79b67565badb8d8e9dd73f56537ba28","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/app.js","hash":"6bf67a2221f0dce645467ec0e83f30a242730f39","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/custom.js","hash":"b186b1ae8921a3bf4d8746ac5f39acc10269ff96","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/class-module.js","hash":"a771801e8e5528130a947958f605f9fc4c6d913d","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/valine.js","hash":"64a97abf6fb7291bccda74f108b5661a9694ebef","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/gitalk.js","hash":"b2b847d6a4b8866f1a21896ab34b94adc607c6b4","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/javascripts/disqusjs.js","hash":"1152117cee4e335306b79983573721aeb6418d39","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/lazyload.min.js","hash":"e7efa869cd842c2becc8337dd9cc445cd0fa5000","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/algoliasearch-lite.umd.js","hash":"bcd46b678c70779298df8ffad570ab14e434d292","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/nprogress.js","hash":"14757ab1fcf209a4f17c9da3d6abb196fa65cba2","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/perfect-scrollbar.min.js","hash":"cd1784e029249ebf5d57de1f677a4a61019706ae","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/tocbot.min.js","hash":"76cd7f7ae727d3883d69a04a4402a46684e4d4d0","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/typed.min.js","hash":"ad8a75bd4743122b5dbf517221506607588ec50b","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/base.scss","hash":"a26efbbdcf15e8d6e3c044e733294fc6e8bedc77","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/nprogress.css","hash":"af66636e02bccfe2fdf7c1ad7de1face9bf5ae2d","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/media-fixed.scss","hash":"4b0ff31517a8a3106cf227d85ec305b346cfa69b","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/page.scss","hash":"57c6874a0520cb31f2295e5d75c8dabde066b478","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/perfect-scrollbar.css","hash":"a94e730430930b2e048352996ff44bf28647669d","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/post.css","hash":"3f06ce944c9f721cdb5ea26c96fa11f9c2f6ec2f","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/remark42.css","hash":"b12749bacee85f203fcd10afd9212838ffef06f3","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/plyr.css","hash":"89c8e024bad75eec921898cae702785d77272dda","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/spectre-exp.min.css","hash":"9ca686024f1e3c742a488156e8fcf4f7f5518425","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/spectre-icons.min.css","hash":"0f624fe521e0eb6c1f775f13eb0fb93ab6cf802c","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/spectre.min.css","hash":"419c87aed0f592239f2adcbb6396731c6a7711cc","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/style.scss","hash":"613fdeba6d7c7a2746e572ede464cd4db42ac570","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/tocbot.css","hash":"635010b494dae3d91d3be1b079b72b26ab2cc5b8","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/swiper-bundle.min.css","hash":"a1fd2a708504af70216469cbd582cf698db8e461","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/page/default.ejs","hash":"23e0039aeba6413b99319fad4cea4e225aab38a1","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/page/friends.ejs","hash":"514e137c0e19e06dd3e930a98e5569cf83446b0a","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/page/photography.ejs","hash":"6a71806820a4d92082d307a0e4dc67976d4038c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/page/photography-item.ejs","hash":"a6c1097d3428110825ca106c1379f2cd8034057f","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/copyright.ejs","hash":"4f1f566351a2ddff3f44f854a58f65ba6b28072c","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/ad.ejs","hash":"0a8130bcec7879f830976858b8d0dfe0ba036c01","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/date.ejs","hash":"c610dc1283e5d6ae582b9544ee6836e9fcea1b7c","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/gallery.ejs","hash":"4502ca02780f3054cfaa517c9946d8c0479966cb","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/nav.ejs","hash":"d86028403ef9a098747712dc3103ed69c5089daa","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/refer.ejs","hash":"cc1e673e1054b62da356fc066e048b084a03559a","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/comments.ejs","hash":"1502b23d5520b5db6c31c8036187f5373b4eb794","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/reprint.ejs","hash":"75e9c766d19cb0907214e5628e00868b2adb6dcb","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/stylesheets/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/highlight.min.js","hash":"5c25af3caf3f02695741a4b989fedcca6cc1e88d","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/plyr.js","hash":"6bce9267aa6e64f77973f7079cea430d88befca1","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/docs/cover.png","hash":"f52354acc7e9e52efcafc2c33e41a4907c541055","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/dist/build.css","hash":"d08b3ac3ce76582649bf4445c62c99011e3d5583","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/modules/swiper-bundle.min.js","hash":"72bd612182b6c475aa3d896231341a87da680ecb","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/dist/custom.js","hash":"d7679202f697b6547c456c08bab4edc9b76faaf4","modified":499162500000},{"_id":"node_modules/hexo-theme-aomori/source/dist/build.js","hash":"f359132db8fdf12f4d9220cd42ce718c466d0d04","modified":499162500000},{"_id":"public/stylesheets/base.scss","hash":"a26efbbdcf15e8d6e3c044e733294fc6e8bedc77","modified":1663237769025},{"_id":"public/stylesheets/page.scss","hash":"57c6874a0520cb31f2295e5d75c8dabde066b478","modified":1663237769025},{"_id":"public/stylesheets/media-fixed.scss","hash":"4b0ff31517a8a3106cf227d85ec305b346cfa69b","modified":1663237769025},{"_id":"public/stylesheets/style.scss","hash":"613fdeba6d7c7a2746e572ede464cd4db42ac570","modified":1663237769025},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1663237769025},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1663237769025},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1663237769025},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1663237769025},{"_id":"public/javascripts/gitalk.js","hash":"b2b847d6a4b8866f1a21896ab34b94adc607c6b4","modified":1663237769025},{"_id":"public/javascripts/disqusjs.js","hash":"1152117cee4e335306b79983573721aeb6418d39","modified":1663237769025},{"_id":"public/javascripts/valine.js","hash":"64a97abf6fb7291bccda74f108b5661a9694ebef","modified":1663237769025},{"_id":"public/javascripts/app.js","hash":"6bf67a2221f0dce645467ec0e83f30a242730f39","modified":1663237769025},{"_id":"public/javascripts/custom.js","hash":"b186b1ae8921a3bf4d8746ac5f39acc10269ff96","modified":1663237769025},{"_id":"public/javascripts/class-module.js","hash":"a771801e8e5528130a947958f605f9fc4c6d913d","modified":1663237769025},{"_id":"public/modules/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1663237769025},{"_id":"public/modules/algoliasearch-lite.umd.js","hash":"bcd46b678c70779298df8ffad570ab14e434d292","modified":1663237769025},{"_id":"public/modules/lazyload.min.js","hash":"a9b706094ef95a2f4ce0ec6eef0181951c5a7208","modified":1663237769025},{"_id":"public/modules/typed.min.js","hash":"ad8a75bd4743122b5dbf517221506607588ec50b","modified":1663237769025},{"_id":"public/modules/tocbot.min.js","hash":"76cd7f7ae727d3883d69a04a4402a46684e4d4d0","modified":1663237769025},{"_id":"public/stylesheets/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1663237769025},{"_id":"public/stylesheets/nprogress.css","hash":"af66636e02bccfe2fdf7c1ad7de1face9bf5ae2d","modified":1663237769025},{"_id":"public/stylesheets/perfect-scrollbar.css","hash":"a94e730430930b2e048352996ff44bf28647669d","modified":1663237769025},{"_id":"public/stylesheets/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1663237769025},{"_id":"public/stylesheets/post.css","hash":"3f06ce944c9f721cdb5ea26c96fa11f9c2f6ec2f","modified":1663237769025},{"_id":"public/stylesheets/remark42.css","hash":"b12749bacee85f203fcd10afd9212838ffef06f3","modified":1663237769025},{"_id":"public/stylesheets/spectre-icons.min.css","hash":"0f624fe521e0eb6c1f775f13eb0fb93ab6cf802c","modified":1663237769025},{"_id":"public/stylesheets/swiper-bundle.min.css","hash":"a1fd2a708504af70216469cbd582cf698db8e461","modified":1663237769025},{"_id":"public/stylesheets/tocbot.css","hash":"635010b494dae3d91d3be1b079b72b26ab2cc5b8","modified":1663237769025},{"_id":"public/modules/nprogress.js","hash":"14757ab1fcf209a4f17c9da3d6abb196fa65cba2","modified":1663237769025},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1663237769025},{"_id":"public/dist/custom.css","hash":"225a8abab79b67565badb8d8e9dd73f56537ba28","modified":1663237769025},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1663237769025},{"_id":"public/dist/build.js","hash":"a36f7dc0df1c252b2f407ceed1bb2bd6f31ba2ce","modified":1663237769025},{"_id":"public/dist/custom.js","hash":"d7679202f697b6547c456c08bab4edc9b76faaf4","modified":1663237769025},{"_id":"public/dist/build.css","hash":"d08b3ac3ce76582649bf4445c62c99011e3d5583","modified":1663237769025},{"_id":"public/modules/highlight.min.js","hash":"5c25af3caf3f02695741a4b989fedcca6cc1e88d","modified":1663237769025},{"_id":"public/modules/perfect-scrollbar.min.js","hash":"cd1784e029249ebf5d57de1f677a4a61019706ae","modified":1663237769025},{"_id":"public/modules/plyr.js","hash":"6bce9267aa6e64f77973f7079cea430d88befca1","modified":1663237769025},{"_id":"public/modules/swiper-bundle.min.js","hash":"72bd612182b6c475aa3d896231341a87da680ecb","modified":1663237769025},{"_id":"public/stylesheets/spectre-exp.min.css","hash":"9ca686024f1e3c742a488156e8fcf4f7f5518425","modified":1663237769025},{"_id":"public/stylesheets/plyr.css","hash":"89c8e024bad75eec921898cae702785d77272dda","modified":1663237769025},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1663237769025},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1663237769025},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1663237769025},{"_id":"public/stylesheets/spectre.min.css","hash":"419c87aed0f592239f2adcbb6396731c6a7711cc","modified":1663237769025},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1663237769025},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1663237769025},{"_id":"source/_posts/learn-javascript.md","hash":"373cdd791b4f39cdb30fdb505645da4079a81f61","modified":1663242802474},{"_id":"source/_posts/static/IMG_3406.jpeg","hash":"e49e2ff421eedb634a577adb0851398a1aeb08de","modified":1663242977025},{"_id":"source/_posts/static/IMG_3409.jpeg","hash":"899159a48c871ac5ab8cc74dff12f884945ee4fc","modified":1663242977029},{"_id":"source/_posts/static/IMG_3519.jpeg","hash":"476faefde8da347716db36a1ef37cbc86ee896b5","modified":1663242977047},{"_id":"source/_posts/static/IMG_3575.jpeg","hash":"13d491e7fa262b4f143c7092bd5e011810cd88b5","modified":1663242977052},{"_id":"source/_posts/static/IMG_3480.jpeg","hash":"574ceeaf65158aaf432815d6904bb2a5b37edf20","modified":1663242977042},{"_id":"source/_posts/static/IMG_3458.jpeg","hash":"1cc2b54fcd86be810786dc4cbd21c51bf8b9bbeb","modified":1663242977035},{"_id":"source/_posts/chongqing.md","hash":"ef22abf68793721d0a613741537420ac482a9dbe","modified":1663243430825},{"_id":"source/_posts/static/IMG_3975.jpeg","hash":"2df6d31a635a76647dcd6b59a7ba354734649508","modified":1663242977072},{"_id":"source/_posts/static/IMG_3918.jpeg","hash":"9919a3ffd9f1730128dc432230da78ad6c5b2582","modified":1663242977064},{"_id":"source/_posts/static/IMG_4042.jpeg","hash":"add87c9df7c215d88c425603369241488e7f0c2f","modified":1663242977075},{"_id":"source/_posts/static/IMG_3967.jpeg","hash":"615dae4b257cb3eddef30af82f0c028dc127aea6","modified":1663242977067},{"_id":"source/_posts/static/IMG_4316.jpeg","hash":"da8918ba9f14126baf297ac26fc25bc46ad8e65a","modified":1663242977081},{"_id":"source/_posts/static/IMG_3677.jpeg","hash":"cd344b446c354e507b568b550ff5f89ac0a2f00e","modified":1663242977059},{"_id":"source/_posts/chongqing/IMG_3975.jpeg","hash":"2df6d31a635a76647dcd6b59a7ba354734649508","modified":1663242977072},{"_id":"source/_posts/chongqing/IMG_3406.jpeg","hash":"e49e2ff421eedb634a577adb0851398a1aeb08de","modified":1663242977025},{"_id":"source/_posts/chongqing/IMG_4042.jpeg","hash":"add87c9df7c215d88c425603369241488e7f0c2f","modified":1663242977075},{"_id":"source/_posts/chongqing/IMG_3918.jpeg","hash":"9919a3ffd9f1730128dc432230da78ad6c5b2582","modified":1663242977064},{"_id":"source/_posts/chongqing/IMG_3967.jpeg","hash":"615dae4b257cb3eddef30af82f0c028dc127aea6","modified":1663242977067},{"_id":"source/_posts/chongqing/IMG_3409.jpeg","hash":"899159a48c871ac5ab8cc74dff12f884945ee4fc","modified":1663242977029},{"_id":"source/_posts/chongqing/IMG_3519.jpeg","hash":"476faefde8da347716db36a1ef37cbc86ee896b5","modified":1663242977047},{"_id":"source/_posts/chongqing/IMG_4316.jpeg","hash":"da8918ba9f14126baf297ac26fc25bc46ad8e65a","modified":1663242977081},{"_id":"source/_posts/chongqing/IMG_3575.jpeg","hash":"13d491e7fa262b4f143c7092bd5e011810cd88b5","modified":1663242977052},{"_id":"source/_posts/chongqing/IMG_3480.jpeg","hash":"574ceeaf65158aaf432815d6904bb2a5b37edf20","modified":1663242977042},{"_id":"source/_posts/chongqing/IMG_3458.jpeg","hash":"1cc2b54fcd86be810786dc4cbd21c51bf8b9bbeb","modified":1663242977035},{"_id":"source/_posts/chongqing/IMG_3677.jpeg","hash":"cd344b446c354e507b568b550ff5f89ac0a2f00e","modified":1663242977059},{"_id":"public/2022/09/15/chongqing/index.html","hash":"2d9a7bc64ff0e51ce2993bc04a42efc118dda3b8","modified":1663243235669},{"_id":"public/2022/09/15/learn-javascript/index.html","hash":"e3f7c65d73e828810ec5b1ecac121ba181a4ddf2","modified":1663243235669},{"_id":"public/2022/09/15/chongqing/IMG_3975.jpeg","hash":"2df6d31a635a76647dcd6b59a7ba354734649508","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3406.jpeg","hash":"e49e2ff421eedb634a577adb0851398a1aeb08de","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3967.jpeg","hash":"615dae4b257cb3eddef30af82f0c028dc127aea6","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_4042.jpeg","hash":"add87c9df7c215d88c425603369241488e7f0c2f","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3918.jpeg","hash":"9919a3ffd9f1730128dc432230da78ad6c5b2582","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3409.jpeg","hash":"899159a48c871ac5ab8cc74dff12f884945ee4fc","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3519.jpeg","hash":"476faefde8da347716db36a1ef37cbc86ee896b5","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_4316.jpeg","hash":"da8918ba9f14126baf297ac26fc25bc46ad8e65a","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3575.jpeg","hash":"13d491e7fa262b4f143c7092bd5e011810cd88b5","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3480.jpeg","hash":"574ceeaf65158aaf432815d6904bb2a5b37edf20","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3458.jpeg","hash":"1cc2b54fcd86be810786dc4cbd21c51bf8b9bbeb","modified":1663243196228},{"_id":"public/2022/09/15/chongqing/IMG_3677.jpeg","hash":"cd344b446c354e507b568b550ff5f89ac0a2f00e","modified":1663243196228},{"_id":"source/images/IMG_3975.jpeg","hash":"2df6d31a635a76647dcd6b59a7ba354734649508","modified":1663242977072},{"_id":"source/images/IMG_3406.jpeg","hash":"e49e2ff421eedb634a577adb0851398a1aeb08de","modified":1663242977025},{"_id":"source/images/IMG_4042.jpeg","hash":"add87c9df7c215d88c425603369241488e7f0c2f","modified":1663242977075},{"_id":"source/images/IMG_3967.jpeg","hash":"615dae4b257cb3eddef30af82f0c028dc127aea6","modified":1663242977067},{"_id":"source/images/IMG_3918.jpeg","hash":"9919a3ffd9f1730128dc432230da78ad6c5b2582","modified":1663242977064},{"_id":"source/images/IMG_3409.jpeg","hash":"899159a48c871ac5ab8cc74dff12f884945ee4fc","modified":1663242977029},{"_id":"source/images/IMG_3519.jpeg","hash":"476faefde8da347716db36a1ef37cbc86ee896b5","modified":1663242977047},{"_id":"source/images/IMG_4316.jpeg","hash":"da8918ba9f14126baf297ac26fc25bc46ad8e65a","modified":1663242977081},{"_id":"source/images/IMG_3575.jpeg","hash":"13d491e7fa262b4f143c7092bd5e011810cd88b5","modified":1663242977052},{"_id":"source/images/IMG_3480.jpeg","hash":"574ceeaf65158aaf432815d6904bb2a5b37edf20","modified":1663242977042},{"_id":"source/images/IMG_3458.jpeg","hash":"1cc2b54fcd86be810786dc4cbd21c51bf8b9bbeb","modified":1663242977035},{"_id":"source/images/IMG_3677.jpeg","hash":"cd344b446c354e507b568b550ff5f89ac0a2f00e","modified":1663242977059}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello Hexo","date":"2022-09-15T09:47:43.000Z","_content":"","source":"_posts/Hello-Hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2022-09-15 17:47:43\ntags:\n---\n","slug":"Hello-Hexo","published":1,"updated":"2022-09-15T10:31:05.939Z","_id":"cl82vhxus0000v09oauuqcne6","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-09-15T11:51:26.909Z","updated":"2022-09-15T11:53:38.810Z","_id":"cl82vhxv10001v09oga8bgp2q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"重学 Javascript","_content":"\n# 重学 Javascript\n\n> Javascript 高级程序设计 + Modern JavaScript Tutorial + MDN\n\n[现代 JavaScript 教程](https://zh.javascript.info/)\n\n[MDN Web Docs](https://developer.mozilla.org/zh-CN/)\n\n## 第一章 什么是 JavaScript\n\n### javascript 的实现\n\n- 核心 (ECMAScript)\n- 文档对象模型 (DOM)\n- 浏览器对象模型 (BOM)\n\n### 组织分工\n\nTC39 → ECMAScript\n\nW3C → DOM\n\n浏览器厂商 → BOM\n\n### 规范和手册\n\n规范：ECMA-262\n\n[ECMAScript® 2023 Language Specification](https://tc39.es/ecma262/)\n\n手册：MDN（Mozilla）JavaScript\n\n[JavaScript reference - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)\n\n### 小结\n\nJavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。\n\n- ECMAScript:由 ECMA-262 定义并提供核心功能。\n- 文档对象模型(DOM):提供与网页内容交互的方法和接口。\n- 浏览器对象模型(BOM):提供与浏览器交互的方法和接口。\n\nJavaScript 的这三个部分得到了五大 Web 浏览器(IE、Firefox、Chrome、Safari 和 Opera)不同程度的支持。所有浏览器基本上对 ES5(ECMAScript 5)提供了完善的支持，而对 ES6(ECMAScript 6) 和 ES7(ECMAScript 7) 的支持度也在不断提升。这些浏览器对 DOM 的支持各不相同，但对 Level 3 的支 持日益趋于规范。HTML5 中收录的 BOM 会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性。\n\n## 第二章 HTML 中的 JavaScript\n\n### `<script>`标签\n\n使用了 src 属性的 `<script>` 元素不应该再在 `<script>` 和 `</script>` 标签中再包含其他 JavaScript 代码。如果两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。\n\n### nomodule\n\n这个布尔属性被设置来标明这个脚本在支持  [ES2015 modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)的浏览器中不执行。  实际上，这可用于在不支持模块化 JavaScript 的旧浏览器中提供回退脚本。\n\n### `<noscript>`启用条件\n\n- 浏览器不支持脚本\n- 浏览器对脚本的支持被关闭\n\n### 小结\n\nJavaScript 是通过 **`<script>`** 元素插入到 HTML 页面中的。这个元素可用于把 JavaScript 代码嵌入到 HTML 页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的 JavaScript。本章的重点可以总结如下。\n\n- 要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。\n- 所有`<script>` 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在`<script>` 元素中的代码必须严格按次序解释。\n- 对不推迟执行的脚本，浏览器必须解释完位于`<script>` 元素中的代码，然后才能继续渲染页面 的剩余部分。为此，**通常应该把`<script>` 元素放到页面末尾，介于主内容之后及`<script>` 标签之前**。\n- 可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。\n- 可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异 步脚本不能保证按照它们在页面中出现的次序执行。\n- 通过使用 `**<noscript>**` 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则`<noscript>`元素中的任何内容都不会被渲染。\n\n## 第三章 语言基础\n\n### 标识符\n\n- 所谓标识符，就是变量、函数、属性或参数的名称\n- 按照惯例，ECMAScript 标识符使用驼峰大小写形式，因为这种形式跟 ECMAScript 内置函数和对象的命名方式一致，所以算是最佳实践\n- 关键字、保留字、true、false、null 不能作为标识符\n\n### 语句\n\n- if 之类的控制语句只在执行多条语句时要求必须有代码块。不过最佳实践是始终在控制语句中使用代码块，即使执行的只有一条语句。在控制语句中使用代码块可以让内容更清晰，在需要修改代码时也可以减少出错的可能性。\n\n```jsx\n// 有效，但容易导致错误，应该避免\nif (test) console.log(test);\n\n//推荐\nif (test) {\n  console.log(test);\n}\n```\n\n### 变量\n\n- var → 函数作用域\n- let → 块作用域\n\n### 暂时性死区\n\n```jsx\nconsole.log(age); // ReferenceError: age没有定义\nlet age = 26;\n```\n\n### 小结\n\nJavaScript 的核心语言特性在 **ECMA-262** 中以伪语言 **ECMAScript** 的形式来定义。ECMAScript 包含所有基本语法、操作符、数据类型和对象，能完成基本的计算任务，但没有提供获得输入和产生输出的 机制。理解 ECMAScript 及其复杂的细节是完全理解浏览器中 JavaScript 的关键。下面总结一下 ECMAScript 中的基本元素。\n\n- ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number、String 和 Symbol。\n- 与其他语言不同，ECMAScript 不区分整数和浮点值，只有 Number 一种数值数据类型。\n- Object 是一种复杂数据类型，它是这门语言中所有对象的基类。\n- 严格模式为这门语言中某些容易出错的部分施加了限制。\n- ECMAScript 提供了 C 语言和类 C 语言中常见的很多基本操作符，包括数学操作符、布尔操作符、 关系操作符、相等操作符和赋值操作符等。\n- 这门语言中的流控制语句大多是从其他语言中借鉴而来的，比如 if 语句、for 语句和 switch 语句等。\n\nECMAScript 中的函数与其他语言中的函数不一样。\n\n- 不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。\n- **不指定返回值的函数实际上会返回特殊值 undefined。**\n\n## 第四章 变量、作用域与内存\n\n### 小结\n\nJavaScript 变量可以保存两种类型的值:原始值和引用值。原始值可能是以下 6 种原始数据类型之 一：Undefined、Null、Boolean、Number、String 和 Symbol。原始值和引用值有以下特点。\n\n- 原始值大小固定，因此保存在**栈内存**上。\n- 从一个变量到另一个变量复制原始值会创建该值的第二个副本。\n- 引用值是对象，存储在**堆内存**上。\n- 包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。\n- 从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。\n- **typeof 操作符可以确定值的原始类型，而 instanceof 操作符用于确保值的引用类型。**\n\n> 堆内存是向高地址扩展的数据结构，是不连续的内存区域。 栈内存在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。\n\n任何变量(不管包含的是原始值还是引用值)都存在于某个执行上下文中(也称为作用域)。这个上下文(作用域)决定了变量的生命周期，以及它们可以访问代码的哪些部分。执行上下文可以总结如下。\n\n- 执行上下文分**全局上下文、函数上下文和块级上下文**。\n- 代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。\n- @函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。\n- 全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。\n- 变量的执行上下文用于确定什么时候释放内存。\n\nJavaScript 是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收。JavaScript 的垃圾回收程序可以总结如下。\n\n- **离开作用域**的值会被自动标记为可回收，然后在垃圾回收期间被删除。\n- 主流的垃圾回收算法是**标记清理**，即先给当前不使用的值加上标记，再回来回收它们的内存。\n- **引用计数**是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎**不再**使用这种算法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对象(如 DOM 元素)。\n- 引用计数在代码中存在循环引用时会出现问题。\n- 解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。\n\n## 第五章 基本引用类型\n\n### 小结\n\nJavaScript 中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。\n\n- 引用值与传统面向对象编程语言中的类相似，但实现不同。\n- **Date** 类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。\n- **RegExp** 类型是 ECMAScript 支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。\n\nJavaScript 比较独特的一点是，**函数实际上是 Function 类型的实例，也就是说函数也是对象**。因为函数也是对象，所以函数也有方法，可以用于增强其能力。\n\n由于原始值包装类型的存在，JavaScript 中的原始值可以被当成对象来使用。有 3 种原始值包装类型:**Boolean**、**Number** 和 **String**。它们都具备如下特点。\n\n- 每种包装类型都映射到同名的原始类型。\n- 以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。\n- 涉及原始值的语句执行完毕后，包装对象就会被销毁。\n\n当代码开始执行时，全局上下文中会存在两个内置对象: **Global** 和 **Math** 。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。**不过，浏览器将其实现为 window 对象。**所有全局变量和函 数都是 Global 对象的属性。Math 对象包含辅助完成复杂计算的属性和方法。\n\n## 第六章 集合引用类型\n\n### 小结\n\nJavaScript 中的对象是引用值，可以通过几种内置引用类型创建特定类型的对象。\n\n- 引用类型与传统面向对象编程语言中的类相似，但实现不同。\n- **Object 类型是一个基础类型，所有引用类型都从它继承了基本的行为。**\n- Array 类型表示一组有序的值，并提供了操作和转换值的能力。\n- 定型数组包含一套不同的引用类型，用于管理数值在内存中的类型。\n- Date 类型提供了关于日期和时间的信息，包括当前日期和时间以及计算。\n- RegExp 类型是 ECMAScript 支持的正则表达式的接口，提供了大多数基本正则表达式以及一些 高级正则表达式的能力。\n\n**JavaScript 比较独特的一点是，函数其实是 Function 类型的实例，这意味着函数也是对象。由于函数是对象，因此也就具有能够增强自身行为的方法。**\n\n因为原始值包装类型的存在，所以 JavaScript 中的原始值可以拥有类似对象的行为。有 3 种原始值包装类型:Boolean、Number 和 String。它们都具有如下特点。\n\n- 每种包装类型都映射到同名的原始类型。\n- 在以读模式访问原始值时，后台会实例化一个原始值包装对象，通过这个对象可以操作数据。\n- 涉及原始值的语句只要一执行完毕，包装对象就会立即销毁。 JavaScript 还有两个在一开始执行代码时就存在的内置对象:Global 和 Math。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。不过浏览器将 Global 实现为 window 对象。所有全局 变量和函数都是 Global 对象的属性。Math 对象包含辅助完成复杂数学计算的属性和方法。 ECMAScript 6 新增了一批引用类型:Map、WeakMap、Set 和 WeakSet。这些类型为组织应用程序 数据和简化内存管理提供了新能力。\n\n## 第七章 迭代器与生成器\n\n**可迭代（Iterable）**  对象是数组的泛化。这个概念是说任何对象都可以被定制为可在  `for..of`\n  循环中使用的对象。\n\n数组是可迭代的。但不仅仅是数组。很多其他**内建对象**也都是可迭代的。例如字符串也是可迭代的。\n\n### **Symbol.iterator**\n\n```jsx\nlet range = {\n  from: 1,\n  to: 5,\n};\n```\n\n为了让  `range`  对象可迭代（也就让  `for..of`  可以运行）我们需要为对象添加一个名为  `Symbol.iterator`  的方法（一个专门用于使对象可迭代的内建 symbol）。\n\n1. 当  `for..of`  循环启动时，它会调用这个方法（如果没找到，就会报错）。这个方法必须返回一个  **迭代器（iterator）** —— 一个有  `next`  方法的对象。\n2. 从此开始，`for..of` **仅适用于这个被返回的对象**。\n3. 当  `for..of`  循环希望取得下一个数值，它就调用这个对象的  `next()`  方法。\n4. `next()`  方法返回的结果的格式必须是  `{done: Boolean, value: any}`，当  `done=true`  时，表示循环结束，否则  `value`  是下一个值。\n\n### 完整实现\n\n```jsx\nlet range = {\n  from: 1,\n  to: 5,\n};\n\n// 1. for..of 调用首先会调用这个：\nrange[Symbol.iterator] = function () {\n  // ……它返回迭代器对象（iterator object）：\n  // 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值\n  return {\n    current: this.from,\n    last: this.to,\n\n    // 3. next() 在 for..of 的每一轮循环迭代中被调用\n    next() {\n      // 4. 它将会返回 {done:.., value :...} 格式的对象\n      if (this.current <= this.last) {\n        return { done: false, value: this.current++ };\n      } else {\n        return { done: true };\n      }\n    },\n  };\n};\n\n// 现在它可以运行了！\nfor (let num of range) {\n  alert(num); // 1, 然后是 2, 3, 4, 5\n}\n```\n\n请注意可迭代对象的核心功能：关注点分离。\n\n- `range`  自身没有  `next()`  方法。\n- 相反，是通过调用  `range[Symbol.iterator]()`  创建了另一个对象，即所谓的“迭代器”对象，并且它的  `next`  会为迭代生成值。\n\n因此，迭代器对象和与其进行迭代的对象是分开的。\n\n从技术上说，我们可以将它们合并，并使用  `range`  自身作为迭代器来简化代码。\n\n```jsx\nlet range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.iterator]() {\n    this.current = this.from;\n    return this;\n  },\n\n  next() {\n    if (this.current <= this.to) {\n      return { done: false, value: this.current++ };\n    } else {\n      return { done: true };\n    }\n  },\n};\n\nfor (let num of range) {\n  alert(num); // 1, 然后是 2, 3, 4, 5\n}\n```\n\n### **字符串是可迭代的**\n\n数组和字符串是使用最广泛的内建可迭代对象。\n\n```jsx\nfor (let char of \"test\") {\n  // 触发 4 次，每个字符一次\n  alert(char); // t, then e, then s, then t\n}\n```\n\n### **显式调用迭代器**\n\n我们将会采用与  `for..of`  完全相同的方式遍历字符串，但使用的是直接调用。这段代码创建了一个字符串迭代器，并“手动”从中获取值。这样比  `for..of`  给了我们更多的控制权。\n\n```jsx\nlet str = \"Hello\";\n\n// 和 for..of 做相同的事\n// for (let char of str) alert(char);\n\nlet iterator = str[Symbol.iterator]();\n\nwhile (true) {\n  let result = iterator.next();\n  if (result.done) break;\n  alert(result.value); // 一个接一个地输出字符\n}\n```\n\n### 可迭代（iterable）和类数组（array-like）\n\n- **Iterable**  如上所述，是实现了  `Symbol.iterator`  方法的对象。\n- **Array-like**  是有索引和  `length`  属性的对象，所以它们看起来很像数组。\n\n例如，字符串即是可迭代的（`for..of`  对它们有效），又是类数组的（它们有数值索引和  `length`  属性）。\n\n下面这个对象则是类数组的，但是不可迭代：\n\n```jsx\nlet arrayLike = {\n  // 有索引和 length 属性 => 类数组对象\n  0: \"Hello\",\n  1: \"World\",\n  length: 2,\n};\n\n// Error (no Symbol.iterator)\nfor (let item of arrayLike) {\n}\n```\n\n### Array.from\n\n`Array.from` 可以接受一个**可迭代**或**类数组**的值，并从中获取一个“真正的”数组。\n\n```jsx\nlet arrayLike = {\n  0: \"Hello\",\n  1: \"World\",\n  length: 2,\n};\n\nlet arr = Array.from(arrayLike); // (*)\nalert(arr.pop()); // World（pop 方法有效）\n```\n\n### 小结\n\n迭代是一种所有编程语言中都可以看到的模式。ECMAScript 6 正式支持**迭代模式**并引入了两个新的 语言特性：**迭代器和生成器。**\n\n可以应用  `for..of`  的对象被称为  **可迭代的**。\n\n- 技术上来说，可迭代对象必须实现  `Symbol.iterator`  方法。\n  - `obj[Symbol.iterator]()`  的结果被称为  **迭代器（iterator）**。由它处理进一步的迭代过程。\n  - 一个迭代器必须有  `next()`  方法，它返回一个  `{done: Boolean, value: any}`  对象，这里  `done:true`  表明迭代结束，否则  `value`  就是下一个值。\n- `Symbol.iterator`  方法会被  `for..of`  自动调用，但我们也可以直接调用它。\n- 内建的可迭代对象例如字符串和数组，都实现了  `Symbol.iterator`。\n- 字符串迭代器能够识别代理对（surrogate pair）。（译注：代理对也就是 UTF-16 扩展字符。）\n\n有索引属性和  `length`  属性的对象被称为  **类数组对象**。这种对象可能还具有其他属性和方法，但是没有数组的内建方法。\n\n如果我们仔细研究一下规范 —— 就会发现大多数内建方法都假设它们需要处理的是可迭代对象或者类数组对象，而不是“真正的”数组，因为这样抽象度更高。\n\n`Array.from(obj[, mapFn, thisArg])`  将可迭代对象或类数组对象  `obj`  转化为真正的数组  `Array`，然后我们就可以对它应用数组的方法。可选参数  `mapFn`  和  `thisArg`  允许我们将函数应用到每个元素。\n\n**生成器**是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了 Iterable 接口， 因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持 yield 关键字，这个关键字能够 暂停执行生成器函数。使用 yield 关键字还可以通过 next()方法接收输入和产生输出。在加上星号之 后，yield 关键字可以将跟在它后面的可迭代对象序列化为一连串值。\n\n## 第八章 对象、类与面向对象编程\n\n### 对象\n\n### 面相对象编程\n\n当我们在代码中用对象表示实体时，就是所谓的  [面向对象编程](https://en.wikipedia.org/wiki/Object-oriented_programming)，简称为 “OOP”。\n\n### “in” 操作符和“for…in” 循环\n\n相比于其他语言，JavaScript 的对象有一个需要注意的特性：能够被访问任何属性。即使属性不存在也不会报错！读取不存在的属性只会得到  `undefined`。\n\n这里还有一个特别的，检查属性是否存在的操作符  `in`。\n\n```jsx\nlet user = { name: \"John\", age: 30 };\n\nalert(\"age\" in user); // true，user.age 存在\nalert(\"blabla\" in user); // false，user.blabla 不存在。\n```\n\n为何会有  `in`  运算符呢？与  `undefined`  进行比较来判断还不够吗？大部分情况下与  `undefined`  进行比较来判断就可以了。但有一个例外情况那就是属性存在，但存储的值是  `undefined`  的时候。\n\n这种情况很少发生，因为通常情况下不应该给对象赋值  `undefined`。我们通常会用  `null`\n  来表示未知的或者空的值。因此，`in`  运算符是代码中的特殊来宾。\n\n**“for…in” 循环**\n\n为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环：`for..in`。这跟我们在前面学到的  `for(;;)`  循环是完全不一样的东西。\n\n```jsx\nlet user = {\n  name: \"John\",\n  age: 30,\n  isAdmin: true,\n};\n\nfor (let key in user) {\n  // keys\n  alert(key); // name, age, isAdmin\n  // 属性键的值\n  alert(user[key]); // John, 30, true\n}\n```\n\n<aside>\n💡 如果我们遍历一个对象，其顺序是：**整数属性会被进行排序，其他属性则按照创建的顺序显示。**\n\n</aside>\n\n### 对象方法，\\***\\*\"this\"\\*\\***\n\n```jsx\nlet user = {\n  name: \"John\",\n  age: 30,\n  sayHi() {\n    // \"this\" 指的是“当前的对象”\n    alert(this.name);\n  },\n};\nuser.sayHi(); // John\n```\n\n在 JavaScript 中，`this`  关键字与其他大多数编程语言中的不同。JavaScript 中的  `this`  可以用于任何函数，即使它不是对象的方法。\n\n```jsx\n//下面这样的代码没有语法错误：\nfunction sayHi() {\n  alert(this.name);\n}\n```\n\n`this`  的值是在代码运行时计算出来的，它取决于代码上下文。\n\n```jsx\nlet user = { name: \"John\" };\nfunction sayHi() {\n  alert(this.name);\n}\nuser.f = sayHi;\nuser.f(); // John（this == user）\n```\n\n**在没有对象的情况下调用：`this == undefined`**\n\n```jsx\nfunction sayHi() {\n  alert(this);\n}\n\nsayHi(); // undefined\n```\n\n在这种情况下，严格模式下的  `this`  值为  `undefined`。如果我们尝试访问  `this.name`，将会报错。\n\n在非严格模式的情况下，`this`  将会是  **全局对象**（浏览器中的  `window`）。这是一个历史行为，`\"use strict\"`  已经将其修复了。\n\n通常这种调用是程序出错了。如果在一个函数内部有  `this`，那么通常意味着它是在对象上下文环境中被调用的。\n\n**箭头函数没有自己的 “this”**\n\n箭头函数有些特别：它们没有自己的  `this`。如果我们在这样的函数中引用  `this`，`this`\n  值取决于外部“正常的”函数。\n\n```jsx\nlet user = {\n  firstName: \"Ilya\",\n  sayHi() {\n    let arrow = () => alert(this.firstName);\n    arrow();\n  },\n};\n\nuser.sayHi(); // Ilya\n```\n\n### \\***\\*构造器和操作符 “new”\\*\\***\n\n常规的  `{...}`  语法允许创建一个对象。但是我们经常需要创建很多类似的对象，例如多个用户或菜单项等。这可以使用构造函数和  `\"new\"`  操作符来实现。\n\n### 构造函数\n\n构造函数在技术上是常规函数。不过有两个约定：\n\n1. 它们的命名以大写字母开头。\n2. 它们只能由  `\"new\"`  操作符来执行。\n\n```jsx\nfunction User(name) {\n  this.name = name;\n  this.isAdmin = false;\n}\n\nlet user = new User(\"Jack\");\n\nalert(user.name); // Jack\nalert(user.isAdmin); // false\n```\n\n`new User(...)`  做的是类似的事情：\n\n```jsx\nfunction User(name) {\n  // this = {};（隐式创建）\n\n  // 添加属性到 this\n  this.name = name;\n  this.isAdmin = false;\n\n  // return this;（隐式返回）\n}\n```\n\n### 构造器模式测试：new.target\n\n在一个函数内部，我们可以使用  `new.target`  属性来检查它是否被使用  `new`  进行调用了。\n\n对于常规调用，它为 undefined，对于使用  `new`  的调用，则等于该函数：\n\n```jsx\nfunction User() {\n  alert(new.target);\n}\n\n// 不带 \"new\"：\nUser(); // undefined\n\n// 带 \"new\"：\nnew User(); // function User { ... }\n```\n\n### 构造器的 return\n\n带有对象的  `return`返回该对象，在所有其他情况下返回  `this`。\n\n```jsx\nfunction BigUser() {\n  this.name = \"John\";\n  return { name: \"Godzilla\" }; // <-- 返回这个对象\n}\nalert(new BigUser().name); // Godzilla，得到了那个对象\n\nfunction SmallUser() {\n  this.name = \"John\";\n  return; // <-- 返回 this\n}\nalert(new SmallUser().name); // John\n```\n\n<aside>\n💡 如果没有参数，我们可以省略 `new` ，后的括号。这里省略括号不被认为是一种“好风格”，但是规范允许使用该语法。\n\n</aside>\n\n### 对象的方法\n\n**Object.keys(obj)**\n\n返回一个包含该对象所有的键的数组。\n\n**Object.values(obj)**\n\n返回一个包含该对象所有的值的数组。\n\n**Object.entries(obj)**\n\n返回一个包含该对象所有 `[key, value]` 键值对的二维数组。\n\n```jsx\nconst object1 = {\n  a: \"somestring\",\n  b: 42,\n};\n\nconsole.log(Object.entries(object1));\n//[[\"a\",\"somestring\"],[\"b\",42]]\n\nfor (const [key, value] of Object.entries(object1)) {\n  console.log(`${key}: ${value}`);\n}\n// expected output:\n// \"a: somestring\"\n// \"b: 42\"\n```\n\n**Object.assign()**\n\n方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象（浅拷贝）。它将返回目标对象。\n\n```jsx\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target);\n// expected output: Object { a: 1, b: 4, c: 5 }\n\nconsole.log(returnedTarget);\n// expected output: Object { a: 1, b: 4, c: 5 }\n```\n\n**Object.create()**\n\n方法创建一个新对象，使用现有的对象来提供新创建的对象的`__proto__`。\n\n**Object.defineProperty()**\n\n方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n<aside>\n💡 应当直接在 `[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)` 构造器对象上调用此方法，而不是在任意一个 `Object`\n类型的实例上调用。\n\n</aside>\n\n```jsx\nconst object1 = {};\n\nObject.defineProperty(object1, \"property1\", {\n  value: 42,\n  writable: false,\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\n\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n<aside>\n💡 Vue2通过使用此方法实现双向绑定，Vue3改为了Proxy\n\n</aside>\n\n```jsx\nvar o = {}; // 创建一个新对象\n// 在对象中添加一个设置了存取描述符属性的示例\nvar bValue = 38;\nObject.defineProperty(o, \"b\", {\n  // 使用了方法名称缩写（ES2015 特性）\n  // 下面两个缩写等价于：\n  // get : function() { return bValue; },\n  // set : function(newValue) { bValue = newValue; },\n  get() {\n    return bValue;\n  },\n  set(newValue) {\n    bValue = newValue;\n  },\n  enumerable: true,\n  configurable: true,\n});\n```\n\n**Object.defineProperties()**\n\n方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。\n\n**Object.freeze()**\n\n方法可以**冻结**一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。`freeze()`  返回和传入的参数相同的对象。\n\n**Object.fromEntries()**\n\n方法把键值对列表转换为一个对象。\n\n**Object.getOwnPropertyDescriptor()**\n\n方法返回指定对象上一个自有属性对应的属性描述符。\n\n**Object.getOwnPropertyDescriptors()**\n\n方法用来获取一个对象的所有自身属性的描述符。\n\n**Object.getOwnPropertyNames()**\n\n方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 `Symbol` 值作为名称的属性）组成的数组。\n\n**Object.getOwnPropertySymbols()**\n\n方法返回一个给定对象自身的所有 `Symbol`  属性的数组。\n\n**Object.getPrototypeOf()**\n\n方法返回指定对象的原型（内部`[[Prototype]]`属性的值）。\n\n**Object.hasOwn()**\n\nThe **`Object.hasOwn()`**static method returns `true` if the specified object has the indicated property as its *own* property. If the property is inherited, or does not exist, the method returns `false`.\n\n<aside>\n💡 `Object.hasOwn()`\n is intended as a replacement for `[Object.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)`.\n\n</aside>\n\n```jsx\nconst object1 = {\n  prop: \"exists\",\n};\n\nconsole.log(Object.hasOwn(object1, \"prop\"));\n// expected output: true\n```\n\n**Object.prototype.hasOwnProperty()**\n\n方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。\n\n**Object.is()**\n\n方法判断两个值是否为[同一个值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)。\n\n**Object.isExtensible()**\n\n方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。\n\n**Object.isFrozen()**\n\n方法判断一个对象是否被[冻结](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)。\n\n**Object.prototype.isPrototypeOf()**\n\n方法用于测试一个对象是否存在于另一个对象的原型链上。\n\n**Object.isSealed()**\n\n方法判断一个对象是否被密封。\n\n**Object.preventExtensions()**\n\n方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。\n\n**Object.prototype.propertyIsEnumerable()**\n\n方法返回一个布尔值，表示指定的属性是否可枚举。\n\n**Object.seal()**\n\n方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。\n\n**Object.setPrototypeOf()**\n\n方法设置一个指定的对象的原型 ( 即, 内部`[[Prototype]]`属性）到另一个对象或  `[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)`。\n\n<aside>\n💡 考虑性能，你应该使用 `[Object.create()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)`来创建带有你想要的`[[Prototype]]`的新对象。\n\n</aside>\n\n**toLocaleString()**\n\n方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。\n\n**toString()**\n\n方法返回一个表示该对象的字符串。\n\n**valueOf()**\n\n方法返回指定对象的原始值。\n\n### 小结\n\n对象在代码执行过程中的任何时候都可以被创建和增强，具有极大的动态性，并不是严格定义的实 体。下面的模式适用于创建对象。\n\n- 工厂模式就是一个简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个 对象。这个模式在构造函数模式出现后就很少用了。\n- 使用构造函数模式可以自定义引用类型，可以使用 new 关键字像创建内置类型实例一样创建自 定义类型的实例。不过，构造函数模式也有不足，主要是其成员无法重用，包括函数。考虑到 函数本身是松散的、弱类型的，没有理由让函数不能在多个对象实例间共享。\n- 原型模式解决了成员共享的问题，只要是添加到构造函数 prototype 上的属性和方法就可以共 6 享。而组合构造函数和原型模式通过构造函数定义实例属性，通过原型定义共享的属性和方法。\n\nJavaScript 的继承主要通过原型链来实现。原型链涉及把构造函数的原型赋值为另一个类型的实例。 这样一来，子类就可以访问父类的所有属性和方法，就像基于类的继承那样。原型链的问题是所有继承 的属性和方法都会在对象实例间共享，无法做到实例私有。盗用构造函数模式通过在子类构造函数中调 用父类构造函数，可以避免这个问题。这样可以让每个实例继承的属性都是私有的，但要求类型只能通 过构造函数模式来定义(因为子类不能访问父类原型上的方法)。目前最流行的继承模式是组合继承， 即通过原型链继承共享的属性和方法，通过盗用构造函数继承实例属性。\n\n除上述模式之外，还有以下几种继承模式。\n\n- 原型式继承可以无须明确定义构造函数而实现继承，本质上是对给定对象执行浅复制。这种操 作的结果之后还可以再进一步增强。\n- 与原型式继承紧密相关的是寄生式继承，即先基于一个对象创建一个新对象，然后再增强这个 新对象，最后返回新对象。这个模式也被用在组合继承中，用于避免重复调用父类构造函数导 致的浪费。\n- 寄生组合继承被认为是实现基于类型继承的最有效方式。\n\nECMAScript 6 新增的类很大程度上是基于既有原型机制的语法糖。类的语法让开发者可以优雅地定义向后兼容的类，既可以继承内置类型，也可以继承自定义类型。类有效地跨越了对象实例、对象原型 和对象类之间的鸿沟。\n\n## 第九章 代理与反射\n\n### 小结\n\n代理是 ECMAScript 6 新增的令人兴奋和动态十足的新特性。尽管不支持向后兼容，但它开辟出了 一片前所未有的 JavaScript 元编程及抽象的新天地。\n\n从宏观上看，代理是真实 JavaScript 对象的透明抽象层。代理可以定义包含捕获器的处理程序对象， 而这些捕获器可以拦截绝大部分 JavaScript 的基本操作和方法。在这个捕获器处理程序中，可以修改任 何基本操作的行为，当然前提是遵从捕获器不变式。\n\n与代理如影随形的反射 API，则封装了一整套与捕获器拦截的操作相对应的方法。可以把反射 API 看作一套基本操作，这些操作是绝大部分 JavaScript 对象 API 的基础。\n\n代理的应用场景是不可限量的。开发者使用它可以创建出各种编码模式，比如(但远远不限于)跟 踪属性访问、隐藏属性、阻止修改或删除属性、函数参数验证、构造函数参数验证、数据绑定，以及可 观察对象。\n\n## 第十章 函数\n\n### 小结\n\n函数是 JavaScript 编程中最有用也最通用的工具。ECMAScript 6 新增了更加强大的语法特性，从而 让开发者可以更有效地使用函数。\n\n- 函数表达式与函数声明是不一样的。函数声明要求写出函数名称，而函数表达式并不需要。没 有名称的函数表达式也被称为匿名函数。\n- ES6 新增了类似于函数表达式的箭头函数语法，但两者也有一些重要区别。\n- JavaScript 中函数定义与调用时的参数极其灵活。arguments 对象，以及 ES6 新增的扩展操作符，可以实现函数定义和调用的完全动态化。\n- 函数内部也暴露了很多对象和引用，涵盖了函数被谁调用、使用什么调用，以及调用时传入了什么参数等信息。\n- JavaScript 引擎可以优化符合尾调用条件的函数，以节省栈空间。\n- 闭包的作用域链中包含自己的一个变量对象，然后是包含函数的变量对象，直到全局上下文的变量对象。\n- 通常，函数作用域及其中的所有变量在函数执行完毕后都会被销毁。\n- 闭包在被函数返回之后，其作用域会一直保存在内存中，直到闭包被销毁。\n- 函数可以在创建之后立即调用，执行其中代码之后却不留下对函数的引用。\n- 立即调用的函数表达式如果不在包含作用域中将返回值赋给一个变量，则其包含的所有变量都会被销毁。\n- 虽然 JavaScript 没有私有对象属性的概念，但可以使用闭包实现公共方法，访问位于包含作用域中定义的变量。\n- 可以访问私有变量的公共方法叫作特权方法。\n- 特权方法可以使用构造函数或原型模式通过自定义类型中实现，也可以使用模块模式或模块增强模式在单例对象上实现。\n\n## 第十一章 期约与异步函数\n\n### 小结\n\n长期以来，掌握单线程 JavaScript 运行时的异步行为一直都是个艰巨的任务。随着 ES6 新增了期约 和 ES8 新增了异步函数，ECMAScript 的异步编程特性有了长足的进步。通过期约和 async/await，不仅 可以实现之前难以实现或不可能实现的任务，而且也能写出更清晰、简洁，并且容易理解、调试的代码。\n\n期约的主要功能是为异步代码提供了清晰的抽象。可以用期约表示异步执行的代码块，也可以用期 约表示异步计算的值。在需要串行异步代码时，期约的价值最为突出。作为可塑性极强的一种结构，期 约可以被序列化、连锁使用、复合、扩展和重组。\n\n异步函数是将期约应用于 JavaScript 函数的结果。异步函数可以暂停执行，而不阻塞主线程。无论 是编写基于期约的代码，还是组织串行或平行执行的异步代码，使用异步函数都非常得心应手。异步函 数可以说是现代 JavaScript 工具箱中最重要的工具之一。\n\n## 第十二章 BOM\n\nBOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口\n\nJavaScript 在浏览器中是单线程执行的，但允许使用定时器指定在某个时间之后或每隔一段时间就 执行相应的代码。\n\n> 所有超时执行的代码(函数)都会在全局作用域中的一个匿名函数中运行，因此函 数中的 this 值在非严格模式下始终指向 window，而在严格模式下是 undefined。如果 给 setTimeout()提供了一个箭头函数，那么 this 会保留为定义它时所在的词汇作用域。\n\n**location** 是最有用的 BOM 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象独特的地方在于，它既是 window 的属性，也是 document 的属性。也就是说， `window.location` 和 `document.location` 指向同一个对象。\n\n### 小结\n\n浏览器对象模型(BOM，Browser Object Model)是以 window 对象为基础的，这个对象代表了浏览器窗口和页面可见的区域。window 对象也被复用为 ECMAScript 的 Global 对象，因此所有全局变量和函数都是它的属性，而且所有原生类型的构造函数和普通函数也都从一开始就存在于这个对象之上。本章讨论了 BOM 的以下内容。\n\n- 要引用其他 window 对象，可以使用几个不同的窗口指针。\n- 通过 location 对象可以以编程方式操纵浏览器的导航系统。通过设置这个对象上的属性，可以改变浏览器 URL 中的某一部分或全部。\n- 使用 replace()方法可以替换浏览器历史记录中当前显示的页面，并导航到新 URL。 navigator 对象提供关于浏览器的信息。提供的信息类型取决于浏览器，不过有些属性如 userAgent 是所有浏览器都支持的。\n\nBOM 中的另外两个对象也提供了一些功能。screen 对象中保存着客户端显示器的信息。这些信息 通常用于评估浏览网站的设备信息。history 对象提供了操纵浏览器历史记录的能力，开发者可以确 定历史记录中包含多少个条目，并以编程方式实现在历史记录中导航，而且也可以修改历史记录。\n\n## 第十三章 客户端检测\n\n### 小结\n\n客户端检测是 JavaScript 中争议最多的话题之一。因为不同浏览器之间存在差异，所以经常需要根 据浏览器的能力来编写不同的代码。客户端检测有不少方式，但下面两种用得最多。\n\n- **能力检测**，在使用之前先测试浏览器的特定能力。例如，脚本可以在调用某个函数之前先检查 它是否存在。这种客户端检测方式可以让开发者不必考虑特定的浏览器或版本，而只需关注某 些能力是否存在。能力检测不能精确地反映特定的浏览器或版本。\n- **用户代理检测**，通过用户代理字符串确定浏览器。用户代理字符串包含关于浏览器的很多信息， 通常包括浏览器、平台、操作系统和浏览器版本。用户代理字符串有一个相当长的发展史，很 多浏览器都试图欺骗网站相信自己是别的浏览器。用户代理检测也比较麻烦，特别是涉及 Opera 会在代理字符串中隐藏自己信息的时候。即使如此，用户代理字符串也可以用来确定浏览器使 用的渲染引擎以及平台，包括移动设备和游戏机。\n\n在选择客户端检测方法时，首选是使用能力检测。特殊能力检测要放在次要位置，作为决定代码逻 辑的参考。用户代理检测是最后一个选择，因为它过于依赖用户代理字符串。\n\n浏览器也提供了一些软件和硬件相关的信息。这些信息通过 screen 和 navigator 对象暴露出来。 利用这些 API，可以获取关于操作系统、浏览器、硬件、设备位置、电池状态等方面的准确信息。\n\n## 第十四章 DOM\n\n文档对象模型(DOM，Document Object Model)是 HTML 和 XML 文档的编程接口。\n\n每个节点都有 nodeType 属性，表示该节点的类型：\n\n- Node.ELEMENT_NODE(1)\n- Node.ATTRIBUTE_NODE(2)\n- Node.TEXT_NODE(3)\n- Node.CDATA_SECTION_NODE(4)\n- Node.ENTITY_REFERENCE_NODE(5)\n- Node.ENTITY_NODE(6)\n- Node.PROCESSING_INSTRUCTION_NODE(7)\n- Node.COMMENT_NODE(8)\n- Node.DOCUMENT_NODE(9) 文档节点\n- Node.DOCUMENT_TYPE_NODE(10)\n- Node.DOCUMENT_FRAGMENT_NODE(11)\n- Node.NOTATION_NODE(12)\n\n`nodeName` 与 `nodeValue` 保存着有关节点的信息\n\n```jsx\nif (someNode.nodeType == 1) {\n  value = someNode.nodeName; // 会显示元素的标签名\n}\n```\n\n### 节点属性和方法\n\n- previousSibling\n- nextSibling\n- firstChild\n- lastChild\n- hasChildNodes()\n- appendChild()\n- insertBefore()\n- replaceChild()\n- removeChild()\n- cloneNode()\n\n### MutationObserver 接口\n\n不久前添加到 DOM 规范中的 MutationObserver 接口，可以在 DOM 被修改时异步执行回调。使 用 MutationObserver 可以观察整个文档、DOM 树的一部分，或某个元素。此外还可以观察元素属性、子节点、文本，或者前三者任意组合的变化。\n\n### 小结\n\n文档对象模型(DOM，Document Object Model)是语言中立的 HTML 和 XML 文档的 API。DOM Level 1 将 HTML 和 XML 文档定义为一个节点的多层级结构，并暴露出 JavaScript 接口以操作文档的底 层结构和外观。\n\nDOM 由一系列节点类型构成，主要包括以下几种。\n\n- Node 是基准节点类型，是文档一个部分的抽象表示，所有其他类型都继承 Node。\n- Document 类型表示整个文档，对应树形结构的根节点。在 JavaScript 中，document 对象是 Document 的实例，拥有查询和获取节点的很多方法。\n- Element 节点表示文档中所有 HTML 或 XML 元素，可以用来操作它们的内容和属性。\n- 其他节点类型分别表示文本内容、注释、文档类型、CDATA 区块和文档片段。\n\nDOM 编程在多数情况下没什么问题，在涉及 `<script>` 和 `<style>` 元素时会有一点兼容性问题。因为这些元素分别包含脚本和样式信息，所以浏览器会将它们与其他元素区别对待。\n\n要理解 DOM，最关键的一点是知道影响其性能的问题所在。DOM 操作在 JavaScript 代码中是代价 比较高的，NodeList 对象尤其需要注意。NodeList 对象是“实时更新”的，这意味着每次访问它都会执行一次新的查询。考虑到这些问题，实践中要尽量减少 DOM 操作的数量。\n\n**MutationObserver** 是为代替性能不好的 **MutationEvent** 而问世的。使用它可以有效精准地监控 DOM 变化，而且 API 也相对简单。\n\n## 第十五章 DOM 扩展\n\n### Selectors API\n\n- `querySelector()` 方法接收 CSS 选择符参数，返回匹配该模式的第一个后代元素，如果没有匹配 项则返回 null。\n- `querySelectorAll()` 方法跟 querySelector()一样，也接收一个用于查询的参数，但它会返回 所有匹配的节点，而不止一个。这个方法返回的是一个 NodeList 的静态实例。\n- `matches()` 方法(在规范草案中称为 matchesSelector())接收一个 CSS 选择符参数，如果元素 匹配则该选择符返回 true，否则返回 false。\n\n### Element Traversal\n\nElement Traversal API 为 DOM 元素添加了 5 个属性:\n\n- `childElementCount`，返回子元素数量(不包含文本节点和注释)\n- `firstElementChild`，指向第一个 Element 类型的子元素(Element 版 firstChild)\n- `lastElementChild`，指向最后一个 Element 类型的子元素(Element 版 lastChild)\n- `previousElementSibling`， 指 向 前 一 个 Element 类 型 的 同 胞 元 素 (Element 版 previousSibling)\n- `nextElementSibling`，指向后一个 Element 类型的同胞元素(Element 版 nextSibling)\n\n### CSS 类扩展\n\n- `getElementsByClassName()`\n- classList 属性\n\n### HTMLDocument 扩展\n\n`readyState` 属性，document.readyState 属性有两个可能的值:\n\n- loading，表示文档正在加载。\n- complete，表示文档加载完成。\n\n### 插入标记\n\n- `innerHTML` 在读取 innerHTML 属性时，会返回元素所有后代的 HTML 字符串，包括元素、注释和文本节点。 而在写入 innerHTML 时，则会根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点。\n- `outerHTML` 读取 outerHTML 属性时，会返回调用它的元素(及所有后代元素)的 HTML 字符串。在写入 outerHTML 属性时，调用它的元素会被传入的 HTML 字符串经解释之后生成的 DOM 子树取代。\n- `insertAdjacentHTML()` 与 `insertAdjacentText()`\n- **scrollIntoView()** 方法存在于所有 HTML 元素上，可以滚动浏览器窗口或容器元素以便包含元素进入视口。\n\n### 小结\n\n虽然 DOM 规定了与 XML 和 HTML 文档交互的核心 API，但其他几个规范也定义了对 DOM 的扩展。很多扩展都基于之前的已成为事实标准的专有特性标准化而来。本章主要介绍了以下 3 个规范。\n\n- **Selectors API** 为基于 CSS 选择符获取 DOM 元素定义了几个方法:`querySelector()`、 `querySelectorAll()`和 `matches()`。\n- **Element Traversal** 在 DOM 元素上定义了额外的属性，以方便对 DOM 元素进行遍历。这个需求 是因浏览器处理元素间空格的差异而产生的。\n- **HTML5** 为标准 DOM 提供了大量扩展。其中包括对 innerHTML 属性等事实标准进行了标准化， 还有焦点管理、字符集、滚动等特性。\n\nDOM 扩展的数量总体还不大，但随着 Web 技术的发展一定会越来越多。浏览器仍然没有停止对专 有扩展的探索，如果出现成功的扩展，那么就可能成为事实标准，或者最终被整合到未来的标准中。\n\n## 第十六章 DOM2 和 DOM3\n\n### 小结\n\nDOM2 规范定义了一些模块，用来丰富 DOM1 的功能。DOM2 Core 在一些类型上增加了与 XML 命名空间有关的新方法。这些变化只有在使用 XML 或 XHTML 文档时才会用到，在 HTML 文档中则没 有用处。DOM2 增加的与 XML 命名空间无关的方法涉及以编程方式创建 Document 和 DocumentType 类型的新实例。\n\nDOM2 Style 模块定义了如何操作元素的样式信息。\n\n- 每个元素都有一个关联的 style 对象，可用于确定和修改元素特定的样式。\n- 要确定元素的计算样式，包括应用到元素身上的所有 CSS 规则，可以使用 `getComputedStyle()` 方法。\n- 通过 `document.styleSheets` 集合可以访问文档上所有的样式表。\n\nDOM2 Traversal and Range 模块定义了与 DOM 结构交互的不同方式。\n\n- NodeIterator 和 TreeWalker 可以对 DOM 树执行深度优先的遍历。\n- NodeIterator 接口很简单，每次只能向前和向后移动一步。TreeWalker 除了支持同样的行为，还支持在 DOM 结构的所有方向移动，包括父节点、同胞节点和子节点。\n- 范围是选择 DOM 结构中特定部分并且进行操作的一种方式。\n- 通过范围的选区可以在保持文档结构完好的同时从文档中移除内容，也可复制文档中相应的部分。\n\n## 第十七章 事件\n\n### 小结\n\n事件是 JavaScript 与网页结合的主要方式。最常见的事件是在 DOM3 Events 规范或 HTML5 中定义 的。虽然基本的事件都有规范定义，但很多浏览器在规范之外实现了自己专有的事件，以方便开发者更 好地满足用户交互需求，其中一些专有事件直接与特殊的设备相关。\n\n围绕着使用事件，需要考虑内存与性能问题。例如:\n\n- 最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢;\n- 利用事件冒泡，事件委托可以解决限制事件处理程序数量的问题;\n- 最好在页面卸载之前删除所有事件处理程序。\n\n使用 JavaScript 也可以在浏览器中模拟事件。DOM2 Events 和 DOM3 Events 规范提供了模拟方法，可以模拟所有原生 DOM 事件。键盘事件一定程度上也是可以模拟的，有时候需要组合其他技术。IE8 及更早版本也支持事件模拟，只是接口与 DOM 方式不同。\n\n事件是 JavaScript 中最重要的主题之一，理解事件的原理及其对性能的影响非常重要。\n\n## 第十八章 动画与 Canvas 图形\n\n### 使用 requsetAnimationFrame() 节流\n\n```jsx\nlet enabled = true;\n\nfunction expensiveOperation() {\n  console.log(\"do\", Date.now());\n}\n\nwindow.addEventListener(\"scroll\", () => {\n  if (enabled) {\n    enabled = false;\n    window.requestanimationframe(expensiveOperation);\n    window.setTimeout(() => {\n      enabled = true;\n    }, 1000);\n  }\n});\n```\n\n### 小结\n\n`requestAnimationFrame` 是简单但实用的工具，可以让 JavaScript 跟进浏览器渲染周期，从而更 加有效地实现网页视觉动效。\n\nHTML5 的 `<canvas>` 元素为 JavaScript 提供了动态创建图形的 API。这些图形需要使用特定上下文 绘制，主要有两种。第一种是支持基本绘图操作的 2D 上下文:\n\n- 填充和描绘颜色及图案\n- 绘制矩形\n- 绘制路径\n- 绘制文本\n- 创建渐变和图案\n\n第二种是 3D 上下文，也就是 WebGL。WebGL 是浏览器对 OpenGL ES 2.0 的实现。OpenGL ES 2.0 是游戏图形开发常用的一个标准。WebGL 支持比 2D 上下文更强大的绘图能力，包括:\n\n- 用 OpenGL 着色器语言(GLSL)编写顶点和片段着色器;\n- 支持定型数组，限定数组中包含数值的类型;\n- 创建和操作纹理。 目前所有主流浏览器的较新版本都已经支持`<canvas>`标签。\n\n## 第十九章 表单脚本\n\n### 小结\n\n尽管 HTML 和 Web 应用自诞生以来已经发生了天翻地覆的变化，但 Web 表单几乎从来没有变过。 JavaScript 可以增加现有的表单字段以提供新功能或增强易用性。为此，表单字段也暴露了属性、方法 和事件供 JavaScript 使用。以下是本章介绍的一些概念。\n\n- 可以使用标准或非标准的方法全部或部分选择文本框中的文本。\n- 所有浏览器都采用了 Firefox 操作文本选区的方式，使其成为真正的标准。\n- 可以通过监听键盘事件并检测要插入的字符来控制文本框接受或不接受某些字符。\n\n所有浏览器都支持剪贴板相关的事件，包括 copy、cut 和 paste。剪贴板事件在不同浏览器中的实现有很大差异。\n\n在文本框只限某些字符时，可以利用剪贴板事件屏幕粘贴事件。\n\n选择框也是经常使用 JavaScript 来控制的一种表单控件。借助 DOM，操作选择框比以前方便了很多。\n\n使用标准的 DOM 技术，可以为选择框添加或移除选项，也可以将选项从一个选择框移动到另一个选择 框，或者重排选项。\n\n富文本编辑通常以使用包含空白 HTML 文档的内嵌窗格来处理。通过将文档的 designMode 属性设 置为“on”，可以让整个页面变成编辑区，就像文字处理软件一样。另外，给元素添加 contenteditable 属性也可以将元素转换为可编辑区。默认情况下，可以切换文本的粗体、斜体样式，也可以使用剪贴板功 能。JavaScript 通过 execCommand()方法可以执行一些富文本编辑功能，通过 queryCommandEnabled()、 queryCommandState()和 queryCommandValue()方法则可以获取有关文本选区的信息。由于富文本编 辑区不涉及表单字段，因此要将富文本内容提交到服务器，必须把 HTML 从 iframe 或 contenteditable 元素中复制到一个表单字段。\n\n## 第二十章 Javascript API\n\n### 小结\n\n除了定义新标签，HTML5 还定义了一些 JavaScript API。这些 API 可以为开发者提供更便捷的 Web 接口，暴露堪比桌面应用的能力。本章主要介绍了以下 API。\n\n- Atomics API 用于保护代码在多线程内存访问模式下不发生资源争用。\n- postMessage() API 支持从不同源跨文档发送消息，同时保证安全和遵循同源策略。\n- Encoding API 用于实现字符串与缓冲区之间的无缝转换(越来越常见的操作)。\n- File API 提供了发送、接收和读取大型二进制对象的可靠工具。\n- 媒体元素`<audio>`和`<video>`拥有自己的 API，用于操作音频和视频。并不是每个浏览器都会支持所有媒体格式，使用 canPlayType()方法可以检测浏览器支持情况。\n- 拖放 API 支持方便地将元素标识为可拖动，并在操作系统完成放置时给出回应。可以利用它创建自定义可拖动元素和放置目标。\n- Notifications API 提供了一种浏览器中立的方式，以此向用户展示消通知弹层。\n- Streams API 支持以全新的方式读取、写入和处理数据。\n- Timing API 提供了一组度量数据进出浏览器时间的可靠工具。\n- Web Components API 为元素重用和封装技术向前迈进提供了有力支撑。\n- Web Cryptography API 让生成随机数、加密和签名消息成为一类特性。\n\n## 第二十一章 错误处理与调试\n\n### 小结\n\n对于今天复杂的 Web 应用程序而言，JavaScript 中的错误处理十分重要。未能预测什么时候会发生 错误以及如何从错误中恢复，会导致糟糕的用户体验，甚至造成用户流失。大多数浏览器默认不向用户 报告 JavaScript 错误，因此在开发和调试时需要自己实现错误报告。不过在生产环境中，不应该以这种 方式报告错误。\n\n下列方法可用于阻止浏览器对 JavaScript 错误作出反应。\n\n- 使用 try/catch 语句，可以通过更合适的方式对错误做出处理，避免浏览器处理。\n- 定义 window.onerror 事件处理程序，所有没有通过 try/catch 处理的错误都会被该事件处理程序接收到(仅限 IE、Firefox 和 Chrome)。\n\n开发 Web 应用程序时，应该认真考虑可能发生的错误，以及如何处理这些错误。\n\n- 首先，应该分清哪些算重大错误，哪些不算重大错误。\n- 然后，要通过分析代码预测很可能发生哪些错误。由于以下因素，JavaScript 中经常出现错误:\n  - 类型转换;\n  - 数据类型检测不足;\n  - 向服务器发送错误数据或从服务器接收到错误数据。\n\nIE、Firefox、Chrome、Opera 和 Safari 都有 JavaScript 调试器，有的内置在浏览器中，有的是作为扩 展，需另行下载。所有调试器都能够设置断点、控制代码执行和在运行时检查变量值。\n\n## 第二十二章 处理 XML\n\n### 小结\n\n浏览器对使用 JavaScript 处理 XML 实现及相关技术相当支持。然而，由于早期缺少规范，常用的功能出现了不同实现。DOM Level 2 提供了创建空 XML 文档的 API，但不能解析和序列化。浏览器为解析和序列化 XML 实现了两个新类型。\n\n- DOMParser 类型是简单的对象，可以将 XML 字符串解析为 DOM 文档。\n- XMLSerializer 类型执行相反操作，将 DOM 文档序列化为 XML 字符串。 基于所有主流浏览器的实现，DOM Level 3 新增了针对 XPath API 的规范。该 API 可以让 JavaScript 针对 DOM 文档执行任何 XPath 查询并得到不同数据类型的结果。\n\n最后一个与 XML 相关的技术是 XSLT，目前并没有规范定义其 API。Firefox 最早增加了 XSLTProcessor 类型用于通过 JavaScript 处理转换。\n\n## 第二十三章 JSON\n\n### 小结\n\nJSON 是一种轻量级数据格式，可以方便地表示复杂数据结构。这个格式使用 JavaScript 语法的一个 子集表示对象、数组、字符串、数值、布尔值和 null。虽然 XML 也能胜任同样的角色，但 JSON 更简 洁，JavaScript 支持也更好。更重要的是，所有浏览器都已经原生支持全局 JSON 对象。\n\nECMAScript 5 定义了原生 JSON 对象，用于将 JavaScript 对象序列化为 JSON 字符串，以及将 JSON 数组解析为 JavaScript 对象。JSON.stringify()和 JSON.parse()方法分别用于实现这两种操作。这 两个方法都有一些选项可以用来改变默认的行为，以实现过滤或修改流程。\n\n## 第二十四章 网络请求与远程资源\n\nXMLHttpRequest 对象的 API 被普遍认为比较难用，而 Fetch API 自从诞生以后就迅速成为了 XHR 更现代的替代 标准。Fetch API 支持期约(promise)和服务线程(service worker)，已经成为极其强大的 Web 开发工具。\n\n### XMLHttpRequest\n\nIE5 是第一个引入 XHR 对象的浏览器。这个对象是通过 ActiveX 对象实现并包含在 MSXML 库中 的。为此，XHR 对象的 3 个版本在浏览器中分别被暴露为 MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MXSML2.XMLHttp.6.0。\n\n所有现代浏览器都通过 XMLHttpRequest 构造函数原生支持 XHR 对象:\n\nlet xhr = new XMLHttpRequest();\n\n### HTTP 头部\n\n- Accept:浏览器可以处理的内容类型。\n- Accept-Charset:浏览器可以显示的字符集。\n- Accept-Encoding:浏览器可以处理的压缩编码类型。\n- Accept-Language:浏览器可以使用的语言。\n- Authorization:HTTP 认证信息。\n- Connection:浏览器与服务器的连接类型。\n- Cookie:页面中设置的 Cookie。\n- Host:发送请求的页面所在的域。\n- Referer:发送请求的页面的 URI。**注意，这个字段在 HTTP 规范中就拼错了**，所以考虑到兼容性也必须将错就错。(正确的拼写应该是 Referrer。)\n- User-Agent:浏览器的用户代理字符串。\n\n如果需要发送额外的请求头部，可以使用 setRequestHeader()方法。服务器通过读取自定义头部可以确定适当的操作。自定义头部一定要区别于浏览器正常发送的头部， 否则可能影响服务器正常响应。有些浏览器允许重写默认头部，有些浏览器则不允许。\n\n### GET 和 POST 请求\n\n最常用的请求方法是 GET 请求，用于向服务器查询某些信息。查询字符串中的每个名和值都必须使用 encodeURIComponent()编码，所有名/值对必须以和号(&)分隔。\n\n第二个最常用的请求是 POST 请求，用于向服务器发送应该保存的数据。每个 POST 请求都应该在 请求体中携带提交的数据，而 GET 请求则不然。POST 请求的请求体可以包含非常多的数据，而且数据 可以是任意格式。\n\n默认情况下，对服务器而言，POST 请求与提交表单是不一样的。服务器逻辑需要读取原始 POST 数据才能取得浏览器发送的数据。不过，可以使用 XHR 模拟表单提交。为此，第一步需要把 `Content- Type` 头部设置为`\"application/x-www-formurlencoded\"`，这是提交表单时使用的内容类型。第二步是创建对应格式的字符串。POST 数据此时使用与查询字符串相同的格式。\n\nPOST 请求相比 GET 请求要占用更多资源。从性能方面说，**发送相同数量的数据， GET 请求比 POST 请求要快两倍。**\n\n### XMLHttpRequest Level 2\n\nXMLHttpRequest Level 2 又进一步发展了 XHR 对象。并非所有浏览器都实现了 XMLHttpRequest Level 2 的所有部分，但所有浏览器都实现了其中部分功能。\n\n**1. FormData 类型**\n\n现代 Web 应用程序中经常需要对表单数据进行序列化，因此 XMLHttpRequest Level 2 新增了 FormData 类型。FormData 类型便于表单序列化，也便于创建与表单类似格式的数据然后通过 XHR 发送。下面的代码创建了一个 FormData 对象，并填充了一些数据:\n\n```jsx\nlet xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function () {\n  if (xhr.readyState == 4) {\n    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n      alert(xhr.responseText);\n    } else {\n      alert(\"Request was unsuccessful: \" + xhr.status);\n    }\n  }\n};\nxhr.open(\"post\", \"postexample.php\", true);\nlet form = document.getElementById(\"user-info\");\nxhr.send(new FormData(form));\n```\n\n使用 FormData 的另一个方便之处是不再需要给 XHR 对象显式设置任何请求头部了。XHR 对象能 够识别作为 FormData 实例传入的数据类型并自动配置相应的头部。\n\n**2. 超时**\n\nIE8 给 XHR 对象增加了一个 timeout 属性，用于表示发送请求后等待多少毫秒，如果响应不成功 就中断请求。之后所有浏览器都在自己的 XHR 实现中增加了这个属性。\n\n```jsx\nxhr.timeout = 1000; // 设置 1 秒超时\nxhr.ontimeout = function () {\n  alert(\"Request did not return in a second.\");\n};\n```\n\n**3. overrideMimeType()方法**\n\n```jsx\nlet xhr = new XMLHttpRequest();\nxhr.open(\"get\", \"text.php\", true);\nxhr.overrideMimeType(\"text/xml\");\nxhr.send(null);\n```\n\n这个例子强制让 XHR 把响应当成 XML 而不是纯文本来处理。为了正确覆盖响应的 MIME 类型， 必须在调用 send()之前调用 overrideMimeType()。\n\n### 进度事件\n\nProgress Events 是 W3C 的工作草案，定义了客户端-服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。\n\n- loadstart:在接收到响应的第一个字节时触发。\n- progress:在接收响应期间反复触发。\n- error:在请求出错时触发。\n- abort:在调用 abort()终止连接时触发。\n- load:在成功接收完响应时触发。\n- loadend:在通信完成时，且在 error、abort 或 load 之后触发。\n\n每次请求都会首先触发 loadstart 事件，之后是一个或多个 progress 事件，接着是 error、abort 或 load 中的一个，最后以 loadend 事件结束。\n\n### 跨源资源共享\n\nCORS 背后的基本思路就是使用自定义的 HTTP 头部允许浏览器和服务器相互了解，以确实请求或响应 应该成功还是失败。\n\n对于简单的请求，比如 GET 或 POST 请求，没有自定义头部，而且请求体是 text/plain 类型， 这样的请求在发送时会有一个额外的头部叫 **Origin。** Origin 头部包含发送请求的页面的源(协议、 域名和端口)，以便服务器确定是否为其提供响应。\n\n`Origin: http://www.nczonline.net`\n\n如果服务器决定响应请求，那么应该发送 Access-Control-Allow-Origin 头部\n\n`Access-Control-Allow-Origin: http://www.nczonline.net`\n\n如果没有这个头部，或者有但源不匹配，则表明不会响应浏览器请求。否则，服务器就会处理这个 请求。注意，无论请求还是响应都不会包含 cookie 信息。现代浏览器通过 XMLHttpRequest 对象原生支持 CORS。在尝试访问不同源的资源时，这个行为 会被自动触发。\n\n出于安全考虑，跨域 XHR 对象也施加了一些额外限制。\n\n- 不能使用 setRequestHeader()设置自定义头部。\n- 不能发送和接收 cookie。\n- getAllResponseHeaders()方法始终返回空字符串。\n\n### 预检请求\n\nCORS 通过一种叫预检请求(preflighted request)的服务器验证机制，允许使用自定义头部、除 GET 和 POST 之外的方法，以及不同请求体内容类型。\n\n客户端\n\n```\nOrigin: http://www.nczonline.net\nAccess-Control-Request-Method: POST //请求希望使用的方法。\nAccess-Control-Request-Headers: NCZ //(可选)要使用的逗号分隔的自定义头部列表。\n```\n\n服务端\n\n```\nAccess-Control-Allow-Origin: http://www.nczonline.net //与简单请求相同。\nAccess-Control-Allow-Methods: POST, GET //允许的方法(逗号分隔的列表)。\nAccess-Control-Allow-Headers: NCZ //服务器允许的头部(逗号分隔的列表)\nAccess-Control-Max-Age: 1728000 //缓存预检请求的秒数\n```\n\n### 凭据请求\n\n默认情况下，跨源请求不提供凭据(cookie、HTTP 认证和客户端 SSL 证书)。\n\n客户端\n\n```jsx\nwithCredentials：true\n```\n\n服务端\n\n```\nAccess-Control-Allow-Credentials: true\n```\n\n### 替代性跨源技术\n\n### 图片探测\n\n这种动态创建图片的技术经常用于图片探测(image pings)。图片探测是与服务器之间简单、跨域、单向的通信。数据通过查询字符串发送，响应可以随意设置，不过一般是位图图片或值为 204 的状态码。 浏览器通过图片探测拿不到任何数据，但可以通过监听 onload 和 onerror 事件知道什么时候能接收 到响应。\n\n```jsx\nlet img = new Image();\nimg.onload = img.onerror = function () {\n  alert(\"Done!\");\n};\nimg.src = \"http://www.example.com/test?name=Nicholas\";\n```\n\n图片探测频繁用于跟踪用户在页面上的点击操作或动态显示广告。当然，图片探测的缺点是只能发送 GET 请求和无法获取服务器响应的内容。这也是只能利用图片探测实现浏览器与服务器单向通信的原因。\n\n### JSONP\n\nJSONP 是“JSON with padding”的简写，是在 Web 服务上流行的一种 JSON 变体。\n\nSONP 调用是通过动态创建 `<script>` 元素并为 src 属性指定跨域 URL 实现的。\n\n只能发送 get 请求，缺点是不好确定 JSONP 请求是否失败。\n\n```jsx\nfunction handleResponse(response) {\n  console.log(`\n          You're at IP address ${response.ip}, which is in\n          ${response.city}, ${response.region_name}`);\n}\nlet script = document.createElement(\"script\");\nscript.src = \"http://freegeoip.net/json/?callback=handleResponse\";\ndocument.body.insertBefore(script, document.body.firstChild);\n```\n\n### Fetch\n\nFetch API 能够执行 XMLHttpRequest 对象的所有任务，但更容易使用，接口也更现代化，能够在 Web 工作线程等现代 Web 工具中使用。XMLHttpRequest 可以选择异步，而 Fetch API 则必须是异步。Fetch API 是 WHATWG 的一个“活标准”(living standard)，用规范原文说，就是“Fetch 标准定义请求、响应，以及绑定二者的流程:**获取(fetch)**”。\n\nFetch API 本身是使用 JavaScript 请求资源的优秀工具，同时这个 API 也能够应用在服务线程 (service worker)中，提供拦截、重定向和修改通过 fetch()生成的请求接口。\n\n### 中断请求\n\nFetch API 支持通过 AbortController/AbortSignal 对中断请求。调用 AbortController. abort()会中断所有网络传输，特别适合希望停止传输大型负载的情况。中断进行中的 fetch() 请求会导致包含错误的拒绝。\n\n```jsx\nlet abortController = new AbortController();\nfetch('wikipedia.zip', { signal: abortController.signal }) .catch(() => console.log('aborted!');\n// 10 毫秒后中断请求\nsetTimeout(() => abortController.abort(), 10);\n// 已经中断\n```\n\n### Web Socket\n\nWeb Socket(套接字)的目标是通过一个长时连接实现与服务器全双工、双向的通信。在 JavaScript 中创建 Web Socket 时，一个 HTTP 请求会发送到服务器以初始化连接。服务器响应后，连接使用 HTTP 25 的 Upgrade 头部从 HTTP 协议切换到 Web Socket 协议。这意味着 Web Socket 不能通过标准 HTTP 服务 器实现，而必须使用支持该协议的专有服务器。\n\n因为 Web Socket 使用了自定义协议，所以 URL 方案(scheme)稍有变化:不能再使用 `http://` 或 `https://`， 而要使用 `ws://` 和 `wss://`。前者是不安全的连接，后者是安全连接。\n\n### 安全\n\n需要验证请求发送者拥有对资源的访问权限。可以通过如下方式实现。\n\n- 要求通过 SSL 访问能够被 Ajax 访问的资源。\n- 要求每个请求都发送一个按约定算法计算好的令牌(token)。\n\n以下手段对防护 CSRF 攻击是无效的。\n\n- 要求 POST 而非 GET 请求(很容易修改请求方法)。\n- 使用来源 URL 验证来源(来源 URL 很容易伪造)。\n- 基于 cookie 验证(同样很容易伪造)。\n\n### 小结\n\nAjax 是无须刷新当前页面即可从服务器获取数据的一个方法，具有如下特点。\n\n- 让 Ajax 迅速流行的中心对象是 **`XMLHttpRequest(XHR)`。**\n- 这个对象最早由微软发明，并在 IE5 中作为通过 JavaScript 从服务器获取 XML 数据的一种手段。\n- 之后，Firefox、Safari、Chrome 和 Opera 都复刻了相同的实现。W3C 随后将 XHR 行为写入 Web 标准。\n- 虽然不同浏览器的实现有些差异，但 XHR 对象的基本使用在所有浏览器中相对是规范的，因此可以放心地在 Web 应用程序中使用。\n\nXHR 的一个主要限制是同源策略，即通信只能在相同域名、相同端口和相同协议的前提下完成。\n\n访问超出这些限制之外的资源会导致安全错误，除非使用了正式的跨域方案。这个方案叫作跨源资源共享(CORS，Cross-Origin Resource Sharing)，XHR 对象原生支持 CORS。图片探测和 JSONP 是另外两种 跨域通信技术，但没有 CORS 可靠。 Fetch API 是作为对 XHR 对象的一种端到端的替代方案而提出的。这个 API 提供了优秀的基于期约 的结构、更直观的接口，以及对 Stream API 的最好支持。\n\n**Web Socket** 是与服务器的全双工、双向通信渠道。与其他方案不同，Web Socket 不使用 HTTP，而 使用了自定义协议，目的是更快地发送小数据块。这需要专用的服务器，但速度优势明显。\n\n## 第二十五章 客户端存储\n\nProgress Events 是 W3C 的工作草案，定义了客户端  服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。\n\n### 小结\n\nWeb Storage 定义了两个对象用于存储数据:sessionStorage 和 localStorage。前者用于严格 保存浏览器一次会话期间的数据，因为数据会在浏览器关闭时被删除。后者用于会话之外持久保存数据。\n\nIndexedDB 是类似于 SQL 数据库的结构化数据存储机制。不同的是，IndexedDB 存储的是对象，而 不是数据表。对象存储是通过定义键然后添加数据来创建的。游标用于查询对象存储中的特定数据，而 索引可以针对特定属性实现更快的查询。\n\n有了这些存储手段，就可以在客户端通过使用 JavaScript 存储可观的数据。因为这些数据没有加密， 所以要注意不能使用它们存储敏感信息。\n\n## 第二十六章 模块\n\n### 小结\n\n模块模式是管理复杂性的永恒工具。开发者可以通过它创建逻辑彼此独立的代码段，在这些代码段之间声明依赖，并将它们连接在一起。此外，这种模式也是经证明能够优雅扩展到任意复杂度且跨平台 方案。\n\n多年以来，CommonJS 和 AMD 这两个分别针对服务器端环境和受延迟限制的客户端环境的模块系统长期分裂。两个系统都获得了爆炸性增强，但为它们编写的代码则在很多方面不一致，经常也会带有冗余的样板代码。而且，这两个系统都没有在浏览器中实现。缺乏兼容导致出现了相关工具，从而让在浏览器中实现模块模式成为可能。\n\nECMAScript 6 规范重新定义了浏览器模块，集之前两个系统之长于一身，并通过更简单的声明性语法暴露出来。浏览器对原生模块的支持越来越好，但也提供了稳健的工具以实现从不支持到支持 ES6 模块的过渡。\n\n## 第二十七章 工作者线程\n\n### 小结\n\n工作者线程可以运行异步 JavaScript 而不阻塞用户界面。这非常适合复杂计算和数据处理，特别是 需要花较长时间因而会影响用户使用网页的处理任务。工作者线程有自己独立的环境，只能通过异步消 息与外界通信。\n\n工作者线程可以是专用线程、共享线程。专用线程只能由一个页面使用，而共享线程则可以由同源 的任意页面共享。\n\n服务工作者线程用于让网页模拟原生应用程序。服务工作者线程也是一种工作者线程，但它们更像 是网络代理，而非独立的浏览器线程。可以把它们看成是高度定制化的网络缓存，它们也可以在 PWA 中支持推送通知。\n\n## 第二十八章 最佳实践\n\n### 编码规范\n\n与大多数面向对象语言不同， JavaScript 并不强迫开发者把任何东西都定义为对象。它支持任何编程风格，包括传统的面向对象编程、声明式编程，以及函数式编程。\n\n1. 可读性\n\n以下这些地方应该写注释：\n\n- 函数和方法\n- 大型代码块\n- 复杂的算法\n- 使用黑科技\n\n1. 变量和函数命名\n\n以下是关于命名的通用规则：\n\n- 变量名应该是名词，例如 car 或 person。\n- 函数名应该以动词开始，例如 getName()。\n- 返回布尔值的函数通常以 is 开头，比如 isEnabled()。\n- 对变量和函数都使用符合逻辑的名称，不用担心长度。\n- 变量、函数和方法应该以小写字母开头，使用驼峰大小写(camelCase)形式，如 getName()和 isPerson。类名应该首字母大写，如 Person、RequestFactory。常量值应该全部大写并以 下划线相接，比如 REQUEST_TIMEOUT。\n- 名称要尽量用描述性和直观的词汇，但不要过于冗长。\n\n### 编码惯例\n\n1. 尊重对象所有权\n2. 不声明全局变量\n3. 不要比较 null\n4. 使用常量\n\n### 其他性能优化注意事项\n\n- 原生方法很快。如：**Math 对象**。\n- switch 语句很快。\n- 位操作很快。\n\n### 小结\n\n随着 JavaScript 开发日益成熟，最佳实践不断涌现。曾经的业余爱好如今也成为了正式的职业。因此，**前端开发也需要像其他编程语言一样，注重可维护性、性能优化和部署。**\n\n为保证 JavaScript 代码的可维护性，可以参考如下编码惯例。\n\n- 其他语言的编码惯例可以作为添加注释和确定缩进的参考，但 JavaScript 作为一门适合松散类型的语言也有自己的一些特殊要求。\n- 由于 JavaScript 必须与 HTML 和 CSS 共存，因此各司其职尤为重要:JavaScript 负责定义行为， HTML 负责定义内容，而 CSS 负责定义外观。\n- 如果三者职责混淆，则可能导致难以调试的错误和可维护性问题。\n\n随着 Web 应用程序中 JavaScript 代码量的激增，性能也越来越重要。因此应该牢记如下这些事项。\n\n- 执行 JavaScript 所需的时间直接影响网页性能，其重要性不容忽视。\n- 很多适合 C 语言的性能优化策略同样也适合 JavaScript，包括循环展开和使用 **switch** 语句而不是 if 语句。\n- 另一个需要重视的方面是 DOM 交互很费时间，因此应该尽可能限制 DOM 操作的数量。\n\n开发 Web 应用程序的最后一步是上线部署。以下是本章讨论的相关要点。\n\n- 为辅助部署，应该建立构建流程，将 JavaScript 文件合并为较少的(最好是只有一个)文件。\n- 构建流程可以实现很多源代码处理任务的自动化。例如，可以运行 JavaScript 验证程序，确保没有语法错误和潜在的问题。\n- 压缩可以让文件在部署之前变得尽量小。\n- 启用 HTTP 压缩可以让网络传输的 JavaScript 文件尽可能小，从而提升页面的整体性能。\n","source":"_posts/learn-javascript.md","raw":"---\ntitle: 重学 Javascript\n---\n\n# 重学 Javascript\n\n> Javascript 高级程序设计 + Modern JavaScript Tutorial + MDN\n\n[现代 JavaScript 教程](https://zh.javascript.info/)\n\n[MDN Web Docs](https://developer.mozilla.org/zh-CN/)\n\n## 第一章 什么是 JavaScript\n\n### javascript 的实现\n\n- 核心 (ECMAScript)\n- 文档对象模型 (DOM)\n- 浏览器对象模型 (BOM)\n\n### 组织分工\n\nTC39 → ECMAScript\n\nW3C → DOM\n\n浏览器厂商 → BOM\n\n### 规范和手册\n\n规范：ECMA-262\n\n[ECMAScript® 2023 Language Specification](https://tc39.es/ecma262/)\n\n手册：MDN（Mozilla）JavaScript\n\n[JavaScript reference - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)\n\n### 小结\n\nJavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。\n\n- ECMAScript:由 ECMA-262 定义并提供核心功能。\n- 文档对象模型(DOM):提供与网页内容交互的方法和接口。\n- 浏览器对象模型(BOM):提供与浏览器交互的方法和接口。\n\nJavaScript 的这三个部分得到了五大 Web 浏览器(IE、Firefox、Chrome、Safari 和 Opera)不同程度的支持。所有浏览器基本上对 ES5(ECMAScript 5)提供了完善的支持，而对 ES6(ECMAScript 6) 和 ES7(ECMAScript 7) 的支持度也在不断提升。这些浏览器对 DOM 的支持各不相同，但对 Level 3 的支 持日益趋于规范。HTML5 中收录的 BOM 会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性。\n\n## 第二章 HTML 中的 JavaScript\n\n### `<script>`标签\n\n使用了 src 属性的 `<script>` 元素不应该再在 `<script>` 和 `</script>` 标签中再包含其他 JavaScript 代码。如果两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。\n\n### nomodule\n\n这个布尔属性被设置来标明这个脚本在支持  [ES2015 modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)的浏览器中不执行。  实际上，这可用于在不支持模块化 JavaScript 的旧浏览器中提供回退脚本。\n\n### `<noscript>`启用条件\n\n- 浏览器不支持脚本\n- 浏览器对脚本的支持被关闭\n\n### 小结\n\nJavaScript 是通过 **`<script>`** 元素插入到 HTML 页面中的。这个元素可用于把 JavaScript 代码嵌入到 HTML 页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的 JavaScript。本章的重点可以总结如下。\n\n- 要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。\n- 所有`<script>` 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在`<script>` 元素中的代码必须严格按次序解释。\n- 对不推迟执行的脚本，浏览器必须解释完位于`<script>` 元素中的代码，然后才能继续渲染页面 的剩余部分。为此，**通常应该把`<script>` 元素放到页面末尾，介于主内容之后及`<script>` 标签之前**。\n- 可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。\n- 可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异 步脚本不能保证按照它们在页面中出现的次序执行。\n- 通过使用 `**<noscript>**` 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则`<noscript>`元素中的任何内容都不会被渲染。\n\n## 第三章 语言基础\n\n### 标识符\n\n- 所谓标识符，就是变量、函数、属性或参数的名称\n- 按照惯例，ECMAScript 标识符使用驼峰大小写形式，因为这种形式跟 ECMAScript 内置函数和对象的命名方式一致，所以算是最佳实践\n- 关键字、保留字、true、false、null 不能作为标识符\n\n### 语句\n\n- if 之类的控制语句只在执行多条语句时要求必须有代码块。不过最佳实践是始终在控制语句中使用代码块，即使执行的只有一条语句。在控制语句中使用代码块可以让内容更清晰，在需要修改代码时也可以减少出错的可能性。\n\n```jsx\n// 有效，但容易导致错误，应该避免\nif (test) console.log(test);\n\n//推荐\nif (test) {\n  console.log(test);\n}\n```\n\n### 变量\n\n- var → 函数作用域\n- let → 块作用域\n\n### 暂时性死区\n\n```jsx\nconsole.log(age); // ReferenceError: age没有定义\nlet age = 26;\n```\n\n### 小结\n\nJavaScript 的核心语言特性在 **ECMA-262** 中以伪语言 **ECMAScript** 的形式来定义。ECMAScript 包含所有基本语法、操作符、数据类型和对象，能完成基本的计算任务，但没有提供获得输入和产生输出的 机制。理解 ECMAScript 及其复杂的细节是完全理解浏览器中 JavaScript 的关键。下面总结一下 ECMAScript 中的基本元素。\n\n- ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number、String 和 Symbol。\n- 与其他语言不同，ECMAScript 不区分整数和浮点值，只有 Number 一种数值数据类型。\n- Object 是一种复杂数据类型，它是这门语言中所有对象的基类。\n- 严格模式为这门语言中某些容易出错的部分施加了限制。\n- ECMAScript 提供了 C 语言和类 C 语言中常见的很多基本操作符，包括数学操作符、布尔操作符、 关系操作符、相等操作符和赋值操作符等。\n- 这门语言中的流控制语句大多是从其他语言中借鉴而来的，比如 if 语句、for 语句和 switch 语句等。\n\nECMAScript 中的函数与其他语言中的函数不一样。\n\n- 不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。\n- **不指定返回值的函数实际上会返回特殊值 undefined。**\n\n## 第四章 变量、作用域与内存\n\n### 小结\n\nJavaScript 变量可以保存两种类型的值:原始值和引用值。原始值可能是以下 6 种原始数据类型之 一：Undefined、Null、Boolean、Number、String 和 Symbol。原始值和引用值有以下特点。\n\n- 原始值大小固定，因此保存在**栈内存**上。\n- 从一个变量到另一个变量复制原始值会创建该值的第二个副本。\n- 引用值是对象，存储在**堆内存**上。\n- 包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。\n- 从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。\n- **typeof 操作符可以确定值的原始类型，而 instanceof 操作符用于确保值的引用类型。**\n\n> 堆内存是向高地址扩展的数据结构，是不连续的内存区域。 栈内存在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。\n\n任何变量(不管包含的是原始值还是引用值)都存在于某个执行上下文中(也称为作用域)。这个上下文(作用域)决定了变量的生命周期，以及它们可以访问代码的哪些部分。执行上下文可以总结如下。\n\n- 执行上下文分**全局上下文、函数上下文和块级上下文**。\n- 代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。\n- @函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。\n- 全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。\n- 变量的执行上下文用于确定什么时候释放内存。\n\nJavaScript 是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收。JavaScript 的垃圾回收程序可以总结如下。\n\n- **离开作用域**的值会被自动标记为可回收，然后在垃圾回收期间被删除。\n- 主流的垃圾回收算法是**标记清理**，即先给当前不使用的值加上标记，再回来回收它们的内存。\n- **引用计数**是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎**不再**使用这种算法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对象(如 DOM 元素)。\n- 引用计数在代码中存在循环引用时会出现问题。\n- 解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。\n\n## 第五章 基本引用类型\n\n### 小结\n\nJavaScript 中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。\n\n- 引用值与传统面向对象编程语言中的类相似，但实现不同。\n- **Date** 类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。\n- **RegExp** 类型是 ECMAScript 支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。\n\nJavaScript 比较独特的一点是，**函数实际上是 Function 类型的实例，也就是说函数也是对象**。因为函数也是对象，所以函数也有方法，可以用于增强其能力。\n\n由于原始值包装类型的存在，JavaScript 中的原始值可以被当成对象来使用。有 3 种原始值包装类型:**Boolean**、**Number** 和 **String**。它们都具备如下特点。\n\n- 每种包装类型都映射到同名的原始类型。\n- 以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。\n- 涉及原始值的语句执行完毕后，包装对象就会被销毁。\n\n当代码开始执行时，全局上下文中会存在两个内置对象: **Global** 和 **Math** 。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。**不过，浏览器将其实现为 window 对象。**所有全局变量和函 数都是 Global 对象的属性。Math 对象包含辅助完成复杂计算的属性和方法。\n\n## 第六章 集合引用类型\n\n### 小结\n\nJavaScript 中的对象是引用值，可以通过几种内置引用类型创建特定类型的对象。\n\n- 引用类型与传统面向对象编程语言中的类相似，但实现不同。\n- **Object 类型是一个基础类型，所有引用类型都从它继承了基本的行为。**\n- Array 类型表示一组有序的值，并提供了操作和转换值的能力。\n- 定型数组包含一套不同的引用类型，用于管理数值在内存中的类型。\n- Date 类型提供了关于日期和时间的信息，包括当前日期和时间以及计算。\n- RegExp 类型是 ECMAScript 支持的正则表达式的接口，提供了大多数基本正则表达式以及一些 高级正则表达式的能力。\n\n**JavaScript 比较独特的一点是，函数其实是 Function 类型的实例，这意味着函数也是对象。由于函数是对象，因此也就具有能够增强自身行为的方法。**\n\n因为原始值包装类型的存在，所以 JavaScript 中的原始值可以拥有类似对象的行为。有 3 种原始值包装类型:Boolean、Number 和 String。它们都具有如下特点。\n\n- 每种包装类型都映射到同名的原始类型。\n- 在以读模式访问原始值时，后台会实例化一个原始值包装对象，通过这个对象可以操作数据。\n- 涉及原始值的语句只要一执行完毕，包装对象就会立即销毁。 JavaScript 还有两个在一开始执行代码时就存在的内置对象:Global 和 Math。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。不过浏览器将 Global 实现为 window 对象。所有全局 变量和函数都是 Global 对象的属性。Math 对象包含辅助完成复杂数学计算的属性和方法。 ECMAScript 6 新增了一批引用类型:Map、WeakMap、Set 和 WeakSet。这些类型为组织应用程序 数据和简化内存管理提供了新能力。\n\n## 第七章 迭代器与生成器\n\n**可迭代（Iterable）**  对象是数组的泛化。这个概念是说任何对象都可以被定制为可在  `for..of`\n  循环中使用的对象。\n\n数组是可迭代的。但不仅仅是数组。很多其他**内建对象**也都是可迭代的。例如字符串也是可迭代的。\n\n### **Symbol.iterator**\n\n```jsx\nlet range = {\n  from: 1,\n  to: 5,\n};\n```\n\n为了让  `range`  对象可迭代（也就让  `for..of`  可以运行）我们需要为对象添加一个名为  `Symbol.iterator`  的方法（一个专门用于使对象可迭代的内建 symbol）。\n\n1. 当  `for..of`  循环启动时，它会调用这个方法（如果没找到，就会报错）。这个方法必须返回一个  **迭代器（iterator）** —— 一个有  `next`  方法的对象。\n2. 从此开始，`for..of` **仅适用于这个被返回的对象**。\n3. 当  `for..of`  循环希望取得下一个数值，它就调用这个对象的  `next()`  方法。\n4. `next()`  方法返回的结果的格式必须是  `{done: Boolean, value: any}`，当  `done=true`  时，表示循环结束，否则  `value`  是下一个值。\n\n### 完整实现\n\n```jsx\nlet range = {\n  from: 1,\n  to: 5,\n};\n\n// 1. for..of 调用首先会调用这个：\nrange[Symbol.iterator] = function () {\n  // ……它返回迭代器对象（iterator object）：\n  // 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值\n  return {\n    current: this.from,\n    last: this.to,\n\n    // 3. next() 在 for..of 的每一轮循环迭代中被调用\n    next() {\n      // 4. 它将会返回 {done:.., value :...} 格式的对象\n      if (this.current <= this.last) {\n        return { done: false, value: this.current++ };\n      } else {\n        return { done: true };\n      }\n    },\n  };\n};\n\n// 现在它可以运行了！\nfor (let num of range) {\n  alert(num); // 1, 然后是 2, 3, 4, 5\n}\n```\n\n请注意可迭代对象的核心功能：关注点分离。\n\n- `range`  自身没有  `next()`  方法。\n- 相反，是通过调用  `range[Symbol.iterator]()`  创建了另一个对象，即所谓的“迭代器”对象，并且它的  `next`  会为迭代生成值。\n\n因此，迭代器对象和与其进行迭代的对象是分开的。\n\n从技术上说，我们可以将它们合并，并使用  `range`  自身作为迭代器来简化代码。\n\n```jsx\nlet range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.iterator]() {\n    this.current = this.from;\n    return this;\n  },\n\n  next() {\n    if (this.current <= this.to) {\n      return { done: false, value: this.current++ };\n    } else {\n      return { done: true };\n    }\n  },\n};\n\nfor (let num of range) {\n  alert(num); // 1, 然后是 2, 3, 4, 5\n}\n```\n\n### **字符串是可迭代的**\n\n数组和字符串是使用最广泛的内建可迭代对象。\n\n```jsx\nfor (let char of \"test\") {\n  // 触发 4 次，每个字符一次\n  alert(char); // t, then e, then s, then t\n}\n```\n\n### **显式调用迭代器**\n\n我们将会采用与  `for..of`  完全相同的方式遍历字符串，但使用的是直接调用。这段代码创建了一个字符串迭代器，并“手动”从中获取值。这样比  `for..of`  给了我们更多的控制权。\n\n```jsx\nlet str = \"Hello\";\n\n// 和 for..of 做相同的事\n// for (let char of str) alert(char);\n\nlet iterator = str[Symbol.iterator]();\n\nwhile (true) {\n  let result = iterator.next();\n  if (result.done) break;\n  alert(result.value); // 一个接一个地输出字符\n}\n```\n\n### 可迭代（iterable）和类数组（array-like）\n\n- **Iterable**  如上所述，是实现了  `Symbol.iterator`  方法的对象。\n- **Array-like**  是有索引和  `length`  属性的对象，所以它们看起来很像数组。\n\n例如，字符串即是可迭代的（`for..of`  对它们有效），又是类数组的（它们有数值索引和  `length`  属性）。\n\n下面这个对象则是类数组的，但是不可迭代：\n\n```jsx\nlet arrayLike = {\n  // 有索引和 length 属性 => 类数组对象\n  0: \"Hello\",\n  1: \"World\",\n  length: 2,\n};\n\n// Error (no Symbol.iterator)\nfor (let item of arrayLike) {\n}\n```\n\n### Array.from\n\n`Array.from` 可以接受一个**可迭代**或**类数组**的值，并从中获取一个“真正的”数组。\n\n```jsx\nlet arrayLike = {\n  0: \"Hello\",\n  1: \"World\",\n  length: 2,\n};\n\nlet arr = Array.from(arrayLike); // (*)\nalert(arr.pop()); // World（pop 方法有效）\n```\n\n### 小结\n\n迭代是一种所有编程语言中都可以看到的模式。ECMAScript 6 正式支持**迭代模式**并引入了两个新的 语言特性：**迭代器和生成器。**\n\n可以应用  `for..of`  的对象被称为  **可迭代的**。\n\n- 技术上来说，可迭代对象必须实现  `Symbol.iterator`  方法。\n  - `obj[Symbol.iterator]()`  的结果被称为  **迭代器（iterator）**。由它处理进一步的迭代过程。\n  - 一个迭代器必须有  `next()`  方法，它返回一个  `{done: Boolean, value: any}`  对象，这里  `done:true`  表明迭代结束，否则  `value`  就是下一个值。\n- `Symbol.iterator`  方法会被  `for..of`  自动调用，但我们也可以直接调用它。\n- 内建的可迭代对象例如字符串和数组，都实现了  `Symbol.iterator`。\n- 字符串迭代器能够识别代理对（surrogate pair）。（译注：代理对也就是 UTF-16 扩展字符。）\n\n有索引属性和  `length`  属性的对象被称为  **类数组对象**。这种对象可能还具有其他属性和方法，但是没有数组的内建方法。\n\n如果我们仔细研究一下规范 —— 就会发现大多数内建方法都假设它们需要处理的是可迭代对象或者类数组对象，而不是“真正的”数组，因为这样抽象度更高。\n\n`Array.from(obj[, mapFn, thisArg])`  将可迭代对象或类数组对象  `obj`  转化为真正的数组  `Array`，然后我们就可以对它应用数组的方法。可选参数  `mapFn`  和  `thisArg`  允许我们将函数应用到每个元素。\n\n**生成器**是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了 Iterable 接口， 因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持 yield 关键字，这个关键字能够 暂停执行生成器函数。使用 yield 关键字还可以通过 next()方法接收输入和产生输出。在加上星号之 后，yield 关键字可以将跟在它后面的可迭代对象序列化为一连串值。\n\n## 第八章 对象、类与面向对象编程\n\n### 对象\n\n### 面相对象编程\n\n当我们在代码中用对象表示实体时，就是所谓的  [面向对象编程](https://en.wikipedia.org/wiki/Object-oriented_programming)，简称为 “OOP”。\n\n### “in” 操作符和“for…in” 循环\n\n相比于其他语言，JavaScript 的对象有一个需要注意的特性：能够被访问任何属性。即使属性不存在也不会报错！读取不存在的属性只会得到  `undefined`。\n\n这里还有一个特别的，检查属性是否存在的操作符  `in`。\n\n```jsx\nlet user = { name: \"John\", age: 30 };\n\nalert(\"age\" in user); // true，user.age 存在\nalert(\"blabla\" in user); // false，user.blabla 不存在。\n```\n\n为何会有  `in`  运算符呢？与  `undefined`  进行比较来判断还不够吗？大部分情况下与  `undefined`  进行比较来判断就可以了。但有一个例外情况那就是属性存在，但存储的值是  `undefined`  的时候。\n\n这种情况很少发生，因为通常情况下不应该给对象赋值  `undefined`。我们通常会用  `null`\n  来表示未知的或者空的值。因此，`in`  运算符是代码中的特殊来宾。\n\n**“for…in” 循环**\n\n为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环：`for..in`。这跟我们在前面学到的  `for(;;)`  循环是完全不一样的东西。\n\n```jsx\nlet user = {\n  name: \"John\",\n  age: 30,\n  isAdmin: true,\n};\n\nfor (let key in user) {\n  // keys\n  alert(key); // name, age, isAdmin\n  // 属性键的值\n  alert(user[key]); // John, 30, true\n}\n```\n\n<aside>\n💡 如果我们遍历一个对象，其顺序是：**整数属性会被进行排序，其他属性则按照创建的顺序显示。**\n\n</aside>\n\n### 对象方法，\\***\\*\"this\"\\*\\***\n\n```jsx\nlet user = {\n  name: \"John\",\n  age: 30,\n  sayHi() {\n    // \"this\" 指的是“当前的对象”\n    alert(this.name);\n  },\n};\nuser.sayHi(); // John\n```\n\n在 JavaScript 中，`this`  关键字与其他大多数编程语言中的不同。JavaScript 中的  `this`  可以用于任何函数，即使它不是对象的方法。\n\n```jsx\n//下面这样的代码没有语法错误：\nfunction sayHi() {\n  alert(this.name);\n}\n```\n\n`this`  的值是在代码运行时计算出来的，它取决于代码上下文。\n\n```jsx\nlet user = { name: \"John\" };\nfunction sayHi() {\n  alert(this.name);\n}\nuser.f = sayHi;\nuser.f(); // John（this == user）\n```\n\n**在没有对象的情况下调用：`this == undefined`**\n\n```jsx\nfunction sayHi() {\n  alert(this);\n}\n\nsayHi(); // undefined\n```\n\n在这种情况下，严格模式下的  `this`  值为  `undefined`。如果我们尝试访问  `this.name`，将会报错。\n\n在非严格模式的情况下，`this`  将会是  **全局对象**（浏览器中的  `window`）。这是一个历史行为，`\"use strict\"`  已经将其修复了。\n\n通常这种调用是程序出错了。如果在一个函数内部有  `this`，那么通常意味着它是在对象上下文环境中被调用的。\n\n**箭头函数没有自己的 “this”**\n\n箭头函数有些特别：它们没有自己的  `this`。如果我们在这样的函数中引用  `this`，`this`\n  值取决于外部“正常的”函数。\n\n```jsx\nlet user = {\n  firstName: \"Ilya\",\n  sayHi() {\n    let arrow = () => alert(this.firstName);\n    arrow();\n  },\n};\n\nuser.sayHi(); // Ilya\n```\n\n### \\***\\*构造器和操作符 “new”\\*\\***\n\n常规的  `{...}`  语法允许创建一个对象。但是我们经常需要创建很多类似的对象，例如多个用户或菜单项等。这可以使用构造函数和  `\"new\"`  操作符来实现。\n\n### 构造函数\n\n构造函数在技术上是常规函数。不过有两个约定：\n\n1. 它们的命名以大写字母开头。\n2. 它们只能由  `\"new\"`  操作符来执行。\n\n```jsx\nfunction User(name) {\n  this.name = name;\n  this.isAdmin = false;\n}\n\nlet user = new User(\"Jack\");\n\nalert(user.name); // Jack\nalert(user.isAdmin); // false\n```\n\n`new User(...)`  做的是类似的事情：\n\n```jsx\nfunction User(name) {\n  // this = {};（隐式创建）\n\n  // 添加属性到 this\n  this.name = name;\n  this.isAdmin = false;\n\n  // return this;（隐式返回）\n}\n```\n\n### 构造器模式测试：new.target\n\n在一个函数内部，我们可以使用  `new.target`  属性来检查它是否被使用  `new`  进行调用了。\n\n对于常规调用，它为 undefined，对于使用  `new`  的调用，则等于该函数：\n\n```jsx\nfunction User() {\n  alert(new.target);\n}\n\n// 不带 \"new\"：\nUser(); // undefined\n\n// 带 \"new\"：\nnew User(); // function User { ... }\n```\n\n### 构造器的 return\n\n带有对象的  `return`返回该对象，在所有其他情况下返回  `this`。\n\n```jsx\nfunction BigUser() {\n  this.name = \"John\";\n  return { name: \"Godzilla\" }; // <-- 返回这个对象\n}\nalert(new BigUser().name); // Godzilla，得到了那个对象\n\nfunction SmallUser() {\n  this.name = \"John\";\n  return; // <-- 返回 this\n}\nalert(new SmallUser().name); // John\n```\n\n<aside>\n💡 如果没有参数，我们可以省略 `new` ，后的括号。这里省略括号不被认为是一种“好风格”，但是规范允许使用该语法。\n\n</aside>\n\n### 对象的方法\n\n**Object.keys(obj)**\n\n返回一个包含该对象所有的键的数组。\n\n**Object.values(obj)**\n\n返回一个包含该对象所有的值的数组。\n\n**Object.entries(obj)**\n\n返回一个包含该对象所有 `[key, value]` 键值对的二维数组。\n\n```jsx\nconst object1 = {\n  a: \"somestring\",\n  b: 42,\n};\n\nconsole.log(Object.entries(object1));\n//[[\"a\",\"somestring\"],[\"b\",42]]\n\nfor (const [key, value] of Object.entries(object1)) {\n  console.log(`${key}: ${value}`);\n}\n// expected output:\n// \"a: somestring\"\n// \"b: 42\"\n```\n\n**Object.assign()**\n\n方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象（浅拷贝）。它将返回目标对象。\n\n```jsx\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target);\n// expected output: Object { a: 1, b: 4, c: 5 }\n\nconsole.log(returnedTarget);\n// expected output: Object { a: 1, b: 4, c: 5 }\n```\n\n**Object.create()**\n\n方法创建一个新对象，使用现有的对象来提供新创建的对象的`__proto__`。\n\n**Object.defineProperty()**\n\n方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n<aside>\n💡 应当直接在 `[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)` 构造器对象上调用此方法，而不是在任意一个 `Object`\n类型的实例上调用。\n\n</aside>\n\n```jsx\nconst object1 = {};\n\nObject.defineProperty(object1, \"property1\", {\n  value: 42,\n  writable: false,\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\n\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n<aside>\n💡 Vue2通过使用此方法实现双向绑定，Vue3改为了Proxy\n\n</aside>\n\n```jsx\nvar o = {}; // 创建一个新对象\n// 在对象中添加一个设置了存取描述符属性的示例\nvar bValue = 38;\nObject.defineProperty(o, \"b\", {\n  // 使用了方法名称缩写（ES2015 特性）\n  // 下面两个缩写等价于：\n  // get : function() { return bValue; },\n  // set : function(newValue) { bValue = newValue; },\n  get() {\n    return bValue;\n  },\n  set(newValue) {\n    bValue = newValue;\n  },\n  enumerable: true,\n  configurable: true,\n});\n```\n\n**Object.defineProperties()**\n\n方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。\n\n**Object.freeze()**\n\n方法可以**冻结**一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。`freeze()`  返回和传入的参数相同的对象。\n\n**Object.fromEntries()**\n\n方法把键值对列表转换为一个对象。\n\n**Object.getOwnPropertyDescriptor()**\n\n方法返回指定对象上一个自有属性对应的属性描述符。\n\n**Object.getOwnPropertyDescriptors()**\n\n方法用来获取一个对象的所有自身属性的描述符。\n\n**Object.getOwnPropertyNames()**\n\n方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 `Symbol` 值作为名称的属性）组成的数组。\n\n**Object.getOwnPropertySymbols()**\n\n方法返回一个给定对象自身的所有 `Symbol`  属性的数组。\n\n**Object.getPrototypeOf()**\n\n方法返回指定对象的原型（内部`[[Prototype]]`属性的值）。\n\n**Object.hasOwn()**\n\nThe **`Object.hasOwn()`**static method returns `true` if the specified object has the indicated property as its *own* property. If the property is inherited, or does not exist, the method returns `false`.\n\n<aside>\n💡 `Object.hasOwn()`\n is intended as a replacement for `[Object.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)`.\n\n</aside>\n\n```jsx\nconst object1 = {\n  prop: \"exists\",\n};\n\nconsole.log(Object.hasOwn(object1, \"prop\"));\n// expected output: true\n```\n\n**Object.prototype.hasOwnProperty()**\n\n方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。\n\n**Object.is()**\n\n方法判断两个值是否为[同一个值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)。\n\n**Object.isExtensible()**\n\n方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。\n\n**Object.isFrozen()**\n\n方法判断一个对象是否被[冻结](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)。\n\n**Object.prototype.isPrototypeOf()**\n\n方法用于测试一个对象是否存在于另一个对象的原型链上。\n\n**Object.isSealed()**\n\n方法判断一个对象是否被密封。\n\n**Object.preventExtensions()**\n\n方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。\n\n**Object.prototype.propertyIsEnumerable()**\n\n方法返回一个布尔值，表示指定的属性是否可枚举。\n\n**Object.seal()**\n\n方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。\n\n**Object.setPrototypeOf()**\n\n方法设置一个指定的对象的原型 ( 即, 内部`[[Prototype]]`属性）到另一个对象或  `[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)`。\n\n<aside>\n💡 考虑性能，你应该使用 `[Object.create()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)`来创建带有你想要的`[[Prototype]]`的新对象。\n\n</aside>\n\n**toLocaleString()**\n\n方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。\n\n**toString()**\n\n方法返回一个表示该对象的字符串。\n\n**valueOf()**\n\n方法返回指定对象的原始值。\n\n### 小结\n\n对象在代码执行过程中的任何时候都可以被创建和增强，具有极大的动态性，并不是严格定义的实 体。下面的模式适用于创建对象。\n\n- 工厂模式就是一个简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个 对象。这个模式在构造函数模式出现后就很少用了。\n- 使用构造函数模式可以自定义引用类型，可以使用 new 关键字像创建内置类型实例一样创建自 定义类型的实例。不过，构造函数模式也有不足，主要是其成员无法重用，包括函数。考虑到 函数本身是松散的、弱类型的，没有理由让函数不能在多个对象实例间共享。\n- 原型模式解决了成员共享的问题，只要是添加到构造函数 prototype 上的属性和方法就可以共 6 享。而组合构造函数和原型模式通过构造函数定义实例属性，通过原型定义共享的属性和方法。\n\nJavaScript 的继承主要通过原型链来实现。原型链涉及把构造函数的原型赋值为另一个类型的实例。 这样一来，子类就可以访问父类的所有属性和方法，就像基于类的继承那样。原型链的问题是所有继承 的属性和方法都会在对象实例间共享，无法做到实例私有。盗用构造函数模式通过在子类构造函数中调 用父类构造函数，可以避免这个问题。这样可以让每个实例继承的属性都是私有的，但要求类型只能通 过构造函数模式来定义(因为子类不能访问父类原型上的方法)。目前最流行的继承模式是组合继承， 即通过原型链继承共享的属性和方法，通过盗用构造函数继承实例属性。\n\n除上述模式之外，还有以下几种继承模式。\n\n- 原型式继承可以无须明确定义构造函数而实现继承，本质上是对给定对象执行浅复制。这种操 作的结果之后还可以再进一步增强。\n- 与原型式继承紧密相关的是寄生式继承，即先基于一个对象创建一个新对象，然后再增强这个 新对象，最后返回新对象。这个模式也被用在组合继承中，用于避免重复调用父类构造函数导 致的浪费。\n- 寄生组合继承被认为是实现基于类型继承的最有效方式。\n\nECMAScript 6 新增的类很大程度上是基于既有原型机制的语法糖。类的语法让开发者可以优雅地定义向后兼容的类，既可以继承内置类型，也可以继承自定义类型。类有效地跨越了对象实例、对象原型 和对象类之间的鸿沟。\n\n## 第九章 代理与反射\n\n### 小结\n\n代理是 ECMAScript 6 新增的令人兴奋和动态十足的新特性。尽管不支持向后兼容，但它开辟出了 一片前所未有的 JavaScript 元编程及抽象的新天地。\n\n从宏观上看，代理是真实 JavaScript 对象的透明抽象层。代理可以定义包含捕获器的处理程序对象， 而这些捕获器可以拦截绝大部分 JavaScript 的基本操作和方法。在这个捕获器处理程序中，可以修改任 何基本操作的行为，当然前提是遵从捕获器不变式。\n\n与代理如影随形的反射 API，则封装了一整套与捕获器拦截的操作相对应的方法。可以把反射 API 看作一套基本操作，这些操作是绝大部分 JavaScript 对象 API 的基础。\n\n代理的应用场景是不可限量的。开发者使用它可以创建出各种编码模式，比如(但远远不限于)跟 踪属性访问、隐藏属性、阻止修改或删除属性、函数参数验证、构造函数参数验证、数据绑定，以及可 观察对象。\n\n## 第十章 函数\n\n### 小结\n\n函数是 JavaScript 编程中最有用也最通用的工具。ECMAScript 6 新增了更加强大的语法特性，从而 让开发者可以更有效地使用函数。\n\n- 函数表达式与函数声明是不一样的。函数声明要求写出函数名称，而函数表达式并不需要。没 有名称的函数表达式也被称为匿名函数。\n- ES6 新增了类似于函数表达式的箭头函数语法，但两者也有一些重要区别。\n- JavaScript 中函数定义与调用时的参数极其灵活。arguments 对象，以及 ES6 新增的扩展操作符，可以实现函数定义和调用的完全动态化。\n- 函数内部也暴露了很多对象和引用，涵盖了函数被谁调用、使用什么调用，以及调用时传入了什么参数等信息。\n- JavaScript 引擎可以优化符合尾调用条件的函数，以节省栈空间。\n- 闭包的作用域链中包含自己的一个变量对象，然后是包含函数的变量对象，直到全局上下文的变量对象。\n- 通常，函数作用域及其中的所有变量在函数执行完毕后都会被销毁。\n- 闭包在被函数返回之后，其作用域会一直保存在内存中，直到闭包被销毁。\n- 函数可以在创建之后立即调用，执行其中代码之后却不留下对函数的引用。\n- 立即调用的函数表达式如果不在包含作用域中将返回值赋给一个变量，则其包含的所有变量都会被销毁。\n- 虽然 JavaScript 没有私有对象属性的概念，但可以使用闭包实现公共方法，访问位于包含作用域中定义的变量。\n- 可以访问私有变量的公共方法叫作特权方法。\n- 特权方法可以使用构造函数或原型模式通过自定义类型中实现，也可以使用模块模式或模块增强模式在单例对象上实现。\n\n## 第十一章 期约与异步函数\n\n### 小结\n\n长期以来，掌握单线程 JavaScript 运行时的异步行为一直都是个艰巨的任务。随着 ES6 新增了期约 和 ES8 新增了异步函数，ECMAScript 的异步编程特性有了长足的进步。通过期约和 async/await，不仅 可以实现之前难以实现或不可能实现的任务，而且也能写出更清晰、简洁，并且容易理解、调试的代码。\n\n期约的主要功能是为异步代码提供了清晰的抽象。可以用期约表示异步执行的代码块，也可以用期 约表示异步计算的值。在需要串行异步代码时，期约的价值最为突出。作为可塑性极强的一种结构，期 约可以被序列化、连锁使用、复合、扩展和重组。\n\n异步函数是将期约应用于 JavaScript 函数的结果。异步函数可以暂停执行，而不阻塞主线程。无论 是编写基于期约的代码，还是组织串行或平行执行的异步代码，使用异步函数都非常得心应手。异步函 数可以说是现代 JavaScript 工具箱中最重要的工具之一。\n\n## 第十二章 BOM\n\nBOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口\n\nJavaScript 在浏览器中是单线程执行的，但允许使用定时器指定在某个时间之后或每隔一段时间就 执行相应的代码。\n\n> 所有超时执行的代码(函数)都会在全局作用域中的一个匿名函数中运行，因此函 数中的 this 值在非严格模式下始终指向 window，而在严格模式下是 undefined。如果 给 setTimeout()提供了一个箭头函数，那么 this 会保留为定义它时所在的词汇作用域。\n\n**location** 是最有用的 BOM 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象独特的地方在于，它既是 window 的属性，也是 document 的属性。也就是说， `window.location` 和 `document.location` 指向同一个对象。\n\n### 小结\n\n浏览器对象模型(BOM，Browser Object Model)是以 window 对象为基础的，这个对象代表了浏览器窗口和页面可见的区域。window 对象也被复用为 ECMAScript 的 Global 对象，因此所有全局变量和函数都是它的属性，而且所有原生类型的构造函数和普通函数也都从一开始就存在于这个对象之上。本章讨论了 BOM 的以下内容。\n\n- 要引用其他 window 对象，可以使用几个不同的窗口指针。\n- 通过 location 对象可以以编程方式操纵浏览器的导航系统。通过设置这个对象上的属性，可以改变浏览器 URL 中的某一部分或全部。\n- 使用 replace()方法可以替换浏览器历史记录中当前显示的页面，并导航到新 URL。 navigator 对象提供关于浏览器的信息。提供的信息类型取决于浏览器，不过有些属性如 userAgent 是所有浏览器都支持的。\n\nBOM 中的另外两个对象也提供了一些功能。screen 对象中保存着客户端显示器的信息。这些信息 通常用于评估浏览网站的设备信息。history 对象提供了操纵浏览器历史记录的能力，开发者可以确 定历史记录中包含多少个条目，并以编程方式实现在历史记录中导航，而且也可以修改历史记录。\n\n## 第十三章 客户端检测\n\n### 小结\n\n客户端检测是 JavaScript 中争议最多的话题之一。因为不同浏览器之间存在差异，所以经常需要根 据浏览器的能力来编写不同的代码。客户端检测有不少方式，但下面两种用得最多。\n\n- **能力检测**，在使用之前先测试浏览器的特定能力。例如，脚本可以在调用某个函数之前先检查 它是否存在。这种客户端检测方式可以让开发者不必考虑特定的浏览器或版本，而只需关注某 些能力是否存在。能力检测不能精确地反映特定的浏览器或版本。\n- **用户代理检测**，通过用户代理字符串确定浏览器。用户代理字符串包含关于浏览器的很多信息， 通常包括浏览器、平台、操作系统和浏览器版本。用户代理字符串有一个相当长的发展史，很 多浏览器都试图欺骗网站相信自己是别的浏览器。用户代理检测也比较麻烦，特别是涉及 Opera 会在代理字符串中隐藏自己信息的时候。即使如此，用户代理字符串也可以用来确定浏览器使 用的渲染引擎以及平台，包括移动设备和游戏机。\n\n在选择客户端检测方法时，首选是使用能力检测。特殊能力检测要放在次要位置，作为决定代码逻 辑的参考。用户代理检测是最后一个选择，因为它过于依赖用户代理字符串。\n\n浏览器也提供了一些软件和硬件相关的信息。这些信息通过 screen 和 navigator 对象暴露出来。 利用这些 API，可以获取关于操作系统、浏览器、硬件、设备位置、电池状态等方面的准确信息。\n\n## 第十四章 DOM\n\n文档对象模型(DOM，Document Object Model)是 HTML 和 XML 文档的编程接口。\n\n每个节点都有 nodeType 属性，表示该节点的类型：\n\n- Node.ELEMENT_NODE(1)\n- Node.ATTRIBUTE_NODE(2)\n- Node.TEXT_NODE(3)\n- Node.CDATA_SECTION_NODE(4)\n- Node.ENTITY_REFERENCE_NODE(5)\n- Node.ENTITY_NODE(6)\n- Node.PROCESSING_INSTRUCTION_NODE(7)\n- Node.COMMENT_NODE(8)\n- Node.DOCUMENT_NODE(9) 文档节点\n- Node.DOCUMENT_TYPE_NODE(10)\n- Node.DOCUMENT_FRAGMENT_NODE(11)\n- Node.NOTATION_NODE(12)\n\n`nodeName` 与 `nodeValue` 保存着有关节点的信息\n\n```jsx\nif (someNode.nodeType == 1) {\n  value = someNode.nodeName; // 会显示元素的标签名\n}\n```\n\n### 节点属性和方法\n\n- previousSibling\n- nextSibling\n- firstChild\n- lastChild\n- hasChildNodes()\n- appendChild()\n- insertBefore()\n- replaceChild()\n- removeChild()\n- cloneNode()\n\n### MutationObserver 接口\n\n不久前添加到 DOM 规范中的 MutationObserver 接口，可以在 DOM 被修改时异步执行回调。使 用 MutationObserver 可以观察整个文档、DOM 树的一部分，或某个元素。此外还可以观察元素属性、子节点、文本，或者前三者任意组合的变化。\n\n### 小结\n\n文档对象模型(DOM，Document Object Model)是语言中立的 HTML 和 XML 文档的 API。DOM Level 1 将 HTML 和 XML 文档定义为一个节点的多层级结构，并暴露出 JavaScript 接口以操作文档的底 层结构和外观。\n\nDOM 由一系列节点类型构成，主要包括以下几种。\n\n- Node 是基准节点类型，是文档一个部分的抽象表示，所有其他类型都继承 Node。\n- Document 类型表示整个文档，对应树形结构的根节点。在 JavaScript 中，document 对象是 Document 的实例，拥有查询和获取节点的很多方法。\n- Element 节点表示文档中所有 HTML 或 XML 元素，可以用来操作它们的内容和属性。\n- 其他节点类型分别表示文本内容、注释、文档类型、CDATA 区块和文档片段。\n\nDOM 编程在多数情况下没什么问题，在涉及 `<script>` 和 `<style>` 元素时会有一点兼容性问题。因为这些元素分别包含脚本和样式信息，所以浏览器会将它们与其他元素区别对待。\n\n要理解 DOM，最关键的一点是知道影响其性能的问题所在。DOM 操作在 JavaScript 代码中是代价 比较高的，NodeList 对象尤其需要注意。NodeList 对象是“实时更新”的，这意味着每次访问它都会执行一次新的查询。考虑到这些问题，实践中要尽量减少 DOM 操作的数量。\n\n**MutationObserver** 是为代替性能不好的 **MutationEvent** 而问世的。使用它可以有效精准地监控 DOM 变化，而且 API 也相对简单。\n\n## 第十五章 DOM 扩展\n\n### Selectors API\n\n- `querySelector()` 方法接收 CSS 选择符参数，返回匹配该模式的第一个后代元素，如果没有匹配 项则返回 null。\n- `querySelectorAll()` 方法跟 querySelector()一样，也接收一个用于查询的参数，但它会返回 所有匹配的节点，而不止一个。这个方法返回的是一个 NodeList 的静态实例。\n- `matches()` 方法(在规范草案中称为 matchesSelector())接收一个 CSS 选择符参数，如果元素 匹配则该选择符返回 true，否则返回 false。\n\n### Element Traversal\n\nElement Traversal API 为 DOM 元素添加了 5 个属性:\n\n- `childElementCount`，返回子元素数量(不包含文本节点和注释)\n- `firstElementChild`，指向第一个 Element 类型的子元素(Element 版 firstChild)\n- `lastElementChild`，指向最后一个 Element 类型的子元素(Element 版 lastChild)\n- `previousElementSibling`， 指 向 前 一 个 Element 类 型 的 同 胞 元 素 (Element 版 previousSibling)\n- `nextElementSibling`，指向后一个 Element 类型的同胞元素(Element 版 nextSibling)\n\n### CSS 类扩展\n\n- `getElementsByClassName()`\n- classList 属性\n\n### HTMLDocument 扩展\n\n`readyState` 属性，document.readyState 属性有两个可能的值:\n\n- loading，表示文档正在加载。\n- complete，表示文档加载完成。\n\n### 插入标记\n\n- `innerHTML` 在读取 innerHTML 属性时，会返回元素所有后代的 HTML 字符串，包括元素、注释和文本节点。 而在写入 innerHTML 时，则会根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点。\n- `outerHTML` 读取 outerHTML 属性时，会返回调用它的元素(及所有后代元素)的 HTML 字符串。在写入 outerHTML 属性时，调用它的元素会被传入的 HTML 字符串经解释之后生成的 DOM 子树取代。\n- `insertAdjacentHTML()` 与 `insertAdjacentText()`\n- **scrollIntoView()** 方法存在于所有 HTML 元素上，可以滚动浏览器窗口或容器元素以便包含元素进入视口。\n\n### 小结\n\n虽然 DOM 规定了与 XML 和 HTML 文档交互的核心 API，但其他几个规范也定义了对 DOM 的扩展。很多扩展都基于之前的已成为事实标准的专有特性标准化而来。本章主要介绍了以下 3 个规范。\n\n- **Selectors API** 为基于 CSS 选择符获取 DOM 元素定义了几个方法:`querySelector()`、 `querySelectorAll()`和 `matches()`。\n- **Element Traversal** 在 DOM 元素上定义了额外的属性，以方便对 DOM 元素进行遍历。这个需求 是因浏览器处理元素间空格的差异而产生的。\n- **HTML5** 为标准 DOM 提供了大量扩展。其中包括对 innerHTML 属性等事实标准进行了标准化， 还有焦点管理、字符集、滚动等特性。\n\nDOM 扩展的数量总体还不大，但随着 Web 技术的发展一定会越来越多。浏览器仍然没有停止对专 有扩展的探索，如果出现成功的扩展，那么就可能成为事实标准，或者最终被整合到未来的标准中。\n\n## 第十六章 DOM2 和 DOM3\n\n### 小结\n\nDOM2 规范定义了一些模块，用来丰富 DOM1 的功能。DOM2 Core 在一些类型上增加了与 XML 命名空间有关的新方法。这些变化只有在使用 XML 或 XHTML 文档时才会用到，在 HTML 文档中则没 有用处。DOM2 增加的与 XML 命名空间无关的方法涉及以编程方式创建 Document 和 DocumentType 类型的新实例。\n\nDOM2 Style 模块定义了如何操作元素的样式信息。\n\n- 每个元素都有一个关联的 style 对象，可用于确定和修改元素特定的样式。\n- 要确定元素的计算样式，包括应用到元素身上的所有 CSS 规则，可以使用 `getComputedStyle()` 方法。\n- 通过 `document.styleSheets` 集合可以访问文档上所有的样式表。\n\nDOM2 Traversal and Range 模块定义了与 DOM 结构交互的不同方式。\n\n- NodeIterator 和 TreeWalker 可以对 DOM 树执行深度优先的遍历。\n- NodeIterator 接口很简单，每次只能向前和向后移动一步。TreeWalker 除了支持同样的行为，还支持在 DOM 结构的所有方向移动，包括父节点、同胞节点和子节点。\n- 范围是选择 DOM 结构中特定部分并且进行操作的一种方式。\n- 通过范围的选区可以在保持文档结构完好的同时从文档中移除内容，也可复制文档中相应的部分。\n\n## 第十七章 事件\n\n### 小结\n\n事件是 JavaScript 与网页结合的主要方式。最常见的事件是在 DOM3 Events 规范或 HTML5 中定义 的。虽然基本的事件都有规范定义，但很多浏览器在规范之外实现了自己专有的事件，以方便开发者更 好地满足用户交互需求，其中一些专有事件直接与特殊的设备相关。\n\n围绕着使用事件，需要考虑内存与性能问题。例如:\n\n- 最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢;\n- 利用事件冒泡，事件委托可以解决限制事件处理程序数量的问题;\n- 最好在页面卸载之前删除所有事件处理程序。\n\n使用 JavaScript 也可以在浏览器中模拟事件。DOM2 Events 和 DOM3 Events 规范提供了模拟方法，可以模拟所有原生 DOM 事件。键盘事件一定程度上也是可以模拟的，有时候需要组合其他技术。IE8 及更早版本也支持事件模拟，只是接口与 DOM 方式不同。\n\n事件是 JavaScript 中最重要的主题之一，理解事件的原理及其对性能的影响非常重要。\n\n## 第十八章 动画与 Canvas 图形\n\n### 使用 requsetAnimationFrame() 节流\n\n```jsx\nlet enabled = true;\n\nfunction expensiveOperation() {\n  console.log(\"do\", Date.now());\n}\n\nwindow.addEventListener(\"scroll\", () => {\n  if (enabled) {\n    enabled = false;\n    window.requestanimationframe(expensiveOperation);\n    window.setTimeout(() => {\n      enabled = true;\n    }, 1000);\n  }\n});\n```\n\n### 小结\n\n`requestAnimationFrame` 是简单但实用的工具，可以让 JavaScript 跟进浏览器渲染周期，从而更 加有效地实现网页视觉动效。\n\nHTML5 的 `<canvas>` 元素为 JavaScript 提供了动态创建图形的 API。这些图形需要使用特定上下文 绘制，主要有两种。第一种是支持基本绘图操作的 2D 上下文:\n\n- 填充和描绘颜色及图案\n- 绘制矩形\n- 绘制路径\n- 绘制文本\n- 创建渐变和图案\n\n第二种是 3D 上下文，也就是 WebGL。WebGL 是浏览器对 OpenGL ES 2.0 的实现。OpenGL ES 2.0 是游戏图形开发常用的一个标准。WebGL 支持比 2D 上下文更强大的绘图能力，包括:\n\n- 用 OpenGL 着色器语言(GLSL)编写顶点和片段着色器;\n- 支持定型数组，限定数组中包含数值的类型;\n- 创建和操作纹理。 目前所有主流浏览器的较新版本都已经支持`<canvas>`标签。\n\n## 第十九章 表单脚本\n\n### 小结\n\n尽管 HTML 和 Web 应用自诞生以来已经发生了天翻地覆的变化，但 Web 表单几乎从来没有变过。 JavaScript 可以增加现有的表单字段以提供新功能或增强易用性。为此，表单字段也暴露了属性、方法 和事件供 JavaScript 使用。以下是本章介绍的一些概念。\n\n- 可以使用标准或非标准的方法全部或部分选择文本框中的文本。\n- 所有浏览器都采用了 Firefox 操作文本选区的方式，使其成为真正的标准。\n- 可以通过监听键盘事件并检测要插入的字符来控制文本框接受或不接受某些字符。\n\n所有浏览器都支持剪贴板相关的事件，包括 copy、cut 和 paste。剪贴板事件在不同浏览器中的实现有很大差异。\n\n在文本框只限某些字符时，可以利用剪贴板事件屏幕粘贴事件。\n\n选择框也是经常使用 JavaScript 来控制的一种表单控件。借助 DOM，操作选择框比以前方便了很多。\n\n使用标准的 DOM 技术，可以为选择框添加或移除选项，也可以将选项从一个选择框移动到另一个选择 框，或者重排选项。\n\n富文本编辑通常以使用包含空白 HTML 文档的内嵌窗格来处理。通过将文档的 designMode 属性设 置为“on”，可以让整个页面变成编辑区，就像文字处理软件一样。另外，给元素添加 contenteditable 属性也可以将元素转换为可编辑区。默认情况下，可以切换文本的粗体、斜体样式，也可以使用剪贴板功 能。JavaScript 通过 execCommand()方法可以执行一些富文本编辑功能，通过 queryCommandEnabled()、 queryCommandState()和 queryCommandValue()方法则可以获取有关文本选区的信息。由于富文本编 辑区不涉及表单字段，因此要将富文本内容提交到服务器，必须把 HTML 从 iframe 或 contenteditable 元素中复制到一个表单字段。\n\n## 第二十章 Javascript API\n\n### 小结\n\n除了定义新标签，HTML5 还定义了一些 JavaScript API。这些 API 可以为开发者提供更便捷的 Web 接口，暴露堪比桌面应用的能力。本章主要介绍了以下 API。\n\n- Atomics API 用于保护代码在多线程内存访问模式下不发生资源争用。\n- postMessage() API 支持从不同源跨文档发送消息，同时保证安全和遵循同源策略。\n- Encoding API 用于实现字符串与缓冲区之间的无缝转换(越来越常见的操作)。\n- File API 提供了发送、接收和读取大型二进制对象的可靠工具。\n- 媒体元素`<audio>`和`<video>`拥有自己的 API，用于操作音频和视频。并不是每个浏览器都会支持所有媒体格式，使用 canPlayType()方法可以检测浏览器支持情况。\n- 拖放 API 支持方便地将元素标识为可拖动，并在操作系统完成放置时给出回应。可以利用它创建自定义可拖动元素和放置目标。\n- Notifications API 提供了一种浏览器中立的方式，以此向用户展示消通知弹层。\n- Streams API 支持以全新的方式读取、写入和处理数据。\n- Timing API 提供了一组度量数据进出浏览器时间的可靠工具。\n- Web Components API 为元素重用和封装技术向前迈进提供了有力支撑。\n- Web Cryptography API 让生成随机数、加密和签名消息成为一类特性。\n\n## 第二十一章 错误处理与调试\n\n### 小结\n\n对于今天复杂的 Web 应用程序而言，JavaScript 中的错误处理十分重要。未能预测什么时候会发生 错误以及如何从错误中恢复，会导致糟糕的用户体验，甚至造成用户流失。大多数浏览器默认不向用户 报告 JavaScript 错误，因此在开发和调试时需要自己实现错误报告。不过在生产环境中，不应该以这种 方式报告错误。\n\n下列方法可用于阻止浏览器对 JavaScript 错误作出反应。\n\n- 使用 try/catch 语句，可以通过更合适的方式对错误做出处理，避免浏览器处理。\n- 定义 window.onerror 事件处理程序，所有没有通过 try/catch 处理的错误都会被该事件处理程序接收到(仅限 IE、Firefox 和 Chrome)。\n\n开发 Web 应用程序时，应该认真考虑可能发生的错误，以及如何处理这些错误。\n\n- 首先，应该分清哪些算重大错误，哪些不算重大错误。\n- 然后，要通过分析代码预测很可能发生哪些错误。由于以下因素，JavaScript 中经常出现错误:\n  - 类型转换;\n  - 数据类型检测不足;\n  - 向服务器发送错误数据或从服务器接收到错误数据。\n\nIE、Firefox、Chrome、Opera 和 Safari 都有 JavaScript 调试器，有的内置在浏览器中，有的是作为扩 展，需另行下载。所有调试器都能够设置断点、控制代码执行和在运行时检查变量值。\n\n## 第二十二章 处理 XML\n\n### 小结\n\n浏览器对使用 JavaScript 处理 XML 实现及相关技术相当支持。然而，由于早期缺少规范，常用的功能出现了不同实现。DOM Level 2 提供了创建空 XML 文档的 API，但不能解析和序列化。浏览器为解析和序列化 XML 实现了两个新类型。\n\n- DOMParser 类型是简单的对象，可以将 XML 字符串解析为 DOM 文档。\n- XMLSerializer 类型执行相反操作，将 DOM 文档序列化为 XML 字符串。 基于所有主流浏览器的实现，DOM Level 3 新增了针对 XPath API 的规范。该 API 可以让 JavaScript 针对 DOM 文档执行任何 XPath 查询并得到不同数据类型的结果。\n\n最后一个与 XML 相关的技术是 XSLT，目前并没有规范定义其 API。Firefox 最早增加了 XSLTProcessor 类型用于通过 JavaScript 处理转换。\n\n## 第二十三章 JSON\n\n### 小结\n\nJSON 是一种轻量级数据格式，可以方便地表示复杂数据结构。这个格式使用 JavaScript 语法的一个 子集表示对象、数组、字符串、数值、布尔值和 null。虽然 XML 也能胜任同样的角色，但 JSON 更简 洁，JavaScript 支持也更好。更重要的是，所有浏览器都已经原生支持全局 JSON 对象。\n\nECMAScript 5 定义了原生 JSON 对象，用于将 JavaScript 对象序列化为 JSON 字符串，以及将 JSON 数组解析为 JavaScript 对象。JSON.stringify()和 JSON.parse()方法分别用于实现这两种操作。这 两个方法都有一些选项可以用来改变默认的行为，以实现过滤或修改流程。\n\n## 第二十四章 网络请求与远程资源\n\nXMLHttpRequest 对象的 API 被普遍认为比较难用，而 Fetch API 自从诞生以后就迅速成为了 XHR 更现代的替代 标准。Fetch API 支持期约(promise)和服务线程(service worker)，已经成为极其强大的 Web 开发工具。\n\n### XMLHttpRequest\n\nIE5 是第一个引入 XHR 对象的浏览器。这个对象是通过 ActiveX 对象实现并包含在 MSXML 库中 的。为此，XHR 对象的 3 个版本在浏览器中分别被暴露为 MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MXSML2.XMLHttp.6.0。\n\n所有现代浏览器都通过 XMLHttpRequest 构造函数原生支持 XHR 对象:\n\nlet xhr = new XMLHttpRequest();\n\n### HTTP 头部\n\n- Accept:浏览器可以处理的内容类型。\n- Accept-Charset:浏览器可以显示的字符集。\n- Accept-Encoding:浏览器可以处理的压缩编码类型。\n- Accept-Language:浏览器可以使用的语言。\n- Authorization:HTTP 认证信息。\n- Connection:浏览器与服务器的连接类型。\n- Cookie:页面中设置的 Cookie。\n- Host:发送请求的页面所在的域。\n- Referer:发送请求的页面的 URI。**注意，这个字段在 HTTP 规范中就拼错了**，所以考虑到兼容性也必须将错就错。(正确的拼写应该是 Referrer。)\n- User-Agent:浏览器的用户代理字符串。\n\n如果需要发送额外的请求头部，可以使用 setRequestHeader()方法。服务器通过读取自定义头部可以确定适当的操作。自定义头部一定要区别于浏览器正常发送的头部， 否则可能影响服务器正常响应。有些浏览器允许重写默认头部，有些浏览器则不允许。\n\n### GET 和 POST 请求\n\n最常用的请求方法是 GET 请求，用于向服务器查询某些信息。查询字符串中的每个名和值都必须使用 encodeURIComponent()编码，所有名/值对必须以和号(&)分隔。\n\n第二个最常用的请求是 POST 请求，用于向服务器发送应该保存的数据。每个 POST 请求都应该在 请求体中携带提交的数据，而 GET 请求则不然。POST 请求的请求体可以包含非常多的数据，而且数据 可以是任意格式。\n\n默认情况下，对服务器而言，POST 请求与提交表单是不一样的。服务器逻辑需要读取原始 POST 数据才能取得浏览器发送的数据。不过，可以使用 XHR 模拟表单提交。为此，第一步需要把 `Content- Type` 头部设置为`\"application/x-www-formurlencoded\"`，这是提交表单时使用的内容类型。第二步是创建对应格式的字符串。POST 数据此时使用与查询字符串相同的格式。\n\nPOST 请求相比 GET 请求要占用更多资源。从性能方面说，**发送相同数量的数据， GET 请求比 POST 请求要快两倍。**\n\n### XMLHttpRequest Level 2\n\nXMLHttpRequest Level 2 又进一步发展了 XHR 对象。并非所有浏览器都实现了 XMLHttpRequest Level 2 的所有部分，但所有浏览器都实现了其中部分功能。\n\n**1. FormData 类型**\n\n现代 Web 应用程序中经常需要对表单数据进行序列化，因此 XMLHttpRequest Level 2 新增了 FormData 类型。FormData 类型便于表单序列化，也便于创建与表单类似格式的数据然后通过 XHR 发送。下面的代码创建了一个 FormData 对象，并填充了一些数据:\n\n```jsx\nlet xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function () {\n  if (xhr.readyState == 4) {\n    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n      alert(xhr.responseText);\n    } else {\n      alert(\"Request was unsuccessful: \" + xhr.status);\n    }\n  }\n};\nxhr.open(\"post\", \"postexample.php\", true);\nlet form = document.getElementById(\"user-info\");\nxhr.send(new FormData(form));\n```\n\n使用 FormData 的另一个方便之处是不再需要给 XHR 对象显式设置任何请求头部了。XHR 对象能 够识别作为 FormData 实例传入的数据类型并自动配置相应的头部。\n\n**2. 超时**\n\nIE8 给 XHR 对象增加了一个 timeout 属性，用于表示发送请求后等待多少毫秒，如果响应不成功 就中断请求。之后所有浏览器都在自己的 XHR 实现中增加了这个属性。\n\n```jsx\nxhr.timeout = 1000; // 设置 1 秒超时\nxhr.ontimeout = function () {\n  alert(\"Request did not return in a second.\");\n};\n```\n\n**3. overrideMimeType()方法**\n\n```jsx\nlet xhr = new XMLHttpRequest();\nxhr.open(\"get\", \"text.php\", true);\nxhr.overrideMimeType(\"text/xml\");\nxhr.send(null);\n```\n\n这个例子强制让 XHR 把响应当成 XML 而不是纯文本来处理。为了正确覆盖响应的 MIME 类型， 必须在调用 send()之前调用 overrideMimeType()。\n\n### 进度事件\n\nProgress Events 是 W3C 的工作草案，定义了客户端-服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。\n\n- loadstart:在接收到响应的第一个字节时触发。\n- progress:在接收响应期间反复触发。\n- error:在请求出错时触发。\n- abort:在调用 abort()终止连接时触发。\n- load:在成功接收完响应时触发。\n- loadend:在通信完成时，且在 error、abort 或 load 之后触发。\n\n每次请求都会首先触发 loadstart 事件，之后是一个或多个 progress 事件，接着是 error、abort 或 load 中的一个，最后以 loadend 事件结束。\n\n### 跨源资源共享\n\nCORS 背后的基本思路就是使用自定义的 HTTP 头部允许浏览器和服务器相互了解，以确实请求或响应 应该成功还是失败。\n\n对于简单的请求，比如 GET 或 POST 请求，没有自定义头部，而且请求体是 text/plain 类型， 这样的请求在发送时会有一个额外的头部叫 **Origin。** Origin 头部包含发送请求的页面的源(协议、 域名和端口)，以便服务器确定是否为其提供响应。\n\n`Origin: http://www.nczonline.net`\n\n如果服务器决定响应请求，那么应该发送 Access-Control-Allow-Origin 头部\n\n`Access-Control-Allow-Origin: http://www.nczonline.net`\n\n如果没有这个头部，或者有但源不匹配，则表明不会响应浏览器请求。否则，服务器就会处理这个 请求。注意，无论请求还是响应都不会包含 cookie 信息。现代浏览器通过 XMLHttpRequest 对象原生支持 CORS。在尝试访问不同源的资源时，这个行为 会被自动触发。\n\n出于安全考虑，跨域 XHR 对象也施加了一些额外限制。\n\n- 不能使用 setRequestHeader()设置自定义头部。\n- 不能发送和接收 cookie。\n- getAllResponseHeaders()方法始终返回空字符串。\n\n### 预检请求\n\nCORS 通过一种叫预检请求(preflighted request)的服务器验证机制，允许使用自定义头部、除 GET 和 POST 之外的方法，以及不同请求体内容类型。\n\n客户端\n\n```\nOrigin: http://www.nczonline.net\nAccess-Control-Request-Method: POST //请求希望使用的方法。\nAccess-Control-Request-Headers: NCZ //(可选)要使用的逗号分隔的自定义头部列表。\n```\n\n服务端\n\n```\nAccess-Control-Allow-Origin: http://www.nczonline.net //与简单请求相同。\nAccess-Control-Allow-Methods: POST, GET //允许的方法(逗号分隔的列表)。\nAccess-Control-Allow-Headers: NCZ //服务器允许的头部(逗号分隔的列表)\nAccess-Control-Max-Age: 1728000 //缓存预检请求的秒数\n```\n\n### 凭据请求\n\n默认情况下，跨源请求不提供凭据(cookie、HTTP 认证和客户端 SSL 证书)。\n\n客户端\n\n```jsx\nwithCredentials：true\n```\n\n服务端\n\n```\nAccess-Control-Allow-Credentials: true\n```\n\n### 替代性跨源技术\n\n### 图片探测\n\n这种动态创建图片的技术经常用于图片探测(image pings)。图片探测是与服务器之间简单、跨域、单向的通信。数据通过查询字符串发送，响应可以随意设置，不过一般是位图图片或值为 204 的状态码。 浏览器通过图片探测拿不到任何数据，但可以通过监听 onload 和 onerror 事件知道什么时候能接收 到响应。\n\n```jsx\nlet img = new Image();\nimg.onload = img.onerror = function () {\n  alert(\"Done!\");\n};\nimg.src = \"http://www.example.com/test?name=Nicholas\";\n```\n\n图片探测频繁用于跟踪用户在页面上的点击操作或动态显示广告。当然，图片探测的缺点是只能发送 GET 请求和无法获取服务器响应的内容。这也是只能利用图片探测实现浏览器与服务器单向通信的原因。\n\n### JSONP\n\nJSONP 是“JSON with padding”的简写，是在 Web 服务上流行的一种 JSON 变体。\n\nSONP 调用是通过动态创建 `<script>` 元素并为 src 属性指定跨域 URL 实现的。\n\n只能发送 get 请求，缺点是不好确定 JSONP 请求是否失败。\n\n```jsx\nfunction handleResponse(response) {\n  console.log(`\n          You're at IP address ${response.ip}, which is in\n          ${response.city}, ${response.region_name}`);\n}\nlet script = document.createElement(\"script\");\nscript.src = \"http://freegeoip.net/json/?callback=handleResponse\";\ndocument.body.insertBefore(script, document.body.firstChild);\n```\n\n### Fetch\n\nFetch API 能够执行 XMLHttpRequest 对象的所有任务，但更容易使用，接口也更现代化，能够在 Web 工作线程等现代 Web 工具中使用。XMLHttpRequest 可以选择异步，而 Fetch API 则必须是异步。Fetch API 是 WHATWG 的一个“活标准”(living standard)，用规范原文说，就是“Fetch 标准定义请求、响应，以及绑定二者的流程:**获取(fetch)**”。\n\nFetch API 本身是使用 JavaScript 请求资源的优秀工具，同时这个 API 也能够应用在服务线程 (service worker)中，提供拦截、重定向和修改通过 fetch()生成的请求接口。\n\n### 中断请求\n\nFetch API 支持通过 AbortController/AbortSignal 对中断请求。调用 AbortController. abort()会中断所有网络传输，特别适合希望停止传输大型负载的情况。中断进行中的 fetch() 请求会导致包含错误的拒绝。\n\n```jsx\nlet abortController = new AbortController();\nfetch('wikipedia.zip', { signal: abortController.signal }) .catch(() => console.log('aborted!');\n// 10 毫秒后中断请求\nsetTimeout(() => abortController.abort(), 10);\n// 已经中断\n```\n\n### Web Socket\n\nWeb Socket(套接字)的目标是通过一个长时连接实现与服务器全双工、双向的通信。在 JavaScript 中创建 Web Socket 时，一个 HTTP 请求会发送到服务器以初始化连接。服务器响应后，连接使用 HTTP 25 的 Upgrade 头部从 HTTP 协议切换到 Web Socket 协议。这意味着 Web Socket 不能通过标准 HTTP 服务 器实现，而必须使用支持该协议的专有服务器。\n\n因为 Web Socket 使用了自定义协议，所以 URL 方案(scheme)稍有变化:不能再使用 `http://` 或 `https://`， 而要使用 `ws://` 和 `wss://`。前者是不安全的连接，后者是安全连接。\n\n### 安全\n\n需要验证请求发送者拥有对资源的访问权限。可以通过如下方式实现。\n\n- 要求通过 SSL 访问能够被 Ajax 访问的资源。\n- 要求每个请求都发送一个按约定算法计算好的令牌(token)。\n\n以下手段对防护 CSRF 攻击是无效的。\n\n- 要求 POST 而非 GET 请求(很容易修改请求方法)。\n- 使用来源 URL 验证来源(来源 URL 很容易伪造)。\n- 基于 cookie 验证(同样很容易伪造)。\n\n### 小结\n\nAjax 是无须刷新当前页面即可从服务器获取数据的一个方法，具有如下特点。\n\n- 让 Ajax 迅速流行的中心对象是 **`XMLHttpRequest(XHR)`。**\n- 这个对象最早由微软发明，并在 IE5 中作为通过 JavaScript 从服务器获取 XML 数据的一种手段。\n- 之后，Firefox、Safari、Chrome 和 Opera 都复刻了相同的实现。W3C 随后将 XHR 行为写入 Web 标准。\n- 虽然不同浏览器的实现有些差异，但 XHR 对象的基本使用在所有浏览器中相对是规范的，因此可以放心地在 Web 应用程序中使用。\n\nXHR 的一个主要限制是同源策略，即通信只能在相同域名、相同端口和相同协议的前提下完成。\n\n访问超出这些限制之外的资源会导致安全错误，除非使用了正式的跨域方案。这个方案叫作跨源资源共享(CORS，Cross-Origin Resource Sharing)，XHR 对象原生支持 CORS。图片探测和 JSONP 是另外两种 跨域通信技术，但没有 CORS 可靠。 Fetch API 是作为对 XHR 对象的一种端到端的替代方案而提出的。这个 API 提供了优秀的基于期约 的结构、更直观的接口，以及对 Stream API 的最好支持。\n\n**Web Socket** 是与服务器的全双工、双向通信渠道。与其他方案不同，Web Socket 不使用 HTTP，而 使用了自定义协议，目的是更快地发送小数据块。这需要专用的服务器，但速度优势明显。\n\n## 第二十五章 客户端存储\n\nProgress Events 是 W3C 的工作草案，定义了客户端  服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。\n\n### 小结\n\nWeb Storage 定义了两个对象用于存储数据:sessionStorage 和 localStorage。前者用于严格 保存浏览器一次会话期间的数据，因为数据会在浏览器关闭时被删除。后者用于会话之外持久保存数据。\n\nIndexedDB 是类似于 SQL 数据库的结构化数据存储机制。不同的是，IndexedDB 存储的是对象，而 不是数据表。对象存储是通过定义键然后添加数据来创建的。游标用于查询对象存储中的特定数据，而 索引可以针对特定属性实现更快的查询。\n\n有了这些存储手段，就可以在客户端通过使用 JavaScript 存储可观的数据。因为这些数据没有加密， 所以要注意不能使用它们存储敏感信息。\n\n## 第二十六章 模块\n\n### 小结\n\n模块模式是管理复杂性的永恒工具。开发者可以通过它创建逻辑彼此独立的代码段，在这些代码段之间声明依赖，并将它们连接在一起。此外，这种模式也是经证明能够优雅扩展到任意复杂度且跨平台 方案。\n\n多年以来，CommonJS 和 AMD 这两个分别针对服务器端环境和受延迟限制的客户端环境的模块系统长期分裂。两个系统都获得了爆炸性增强，但为它们编写的代码则在很多方面不一致，经常也会带有冗余的样板代码。而且，这两个系统都没有在浏览器中实现。缺乏兼容导致出现了相关工具，从而让在浏览器中实现模块模式成为可能。\n\nECMAScript 6 规范重新定义了浏览器模块，集之前两个系统之长于一身，并通过更简单的声明性语法暴露出来。浏览器对原生模块的支持越来越好，但也提供了稳健的工具以实现从不支持到支持 ES6 模块的过渡。\n\n## 第二十七章 工作者线程\n\n### 小结\n\n工作者线程可以运行异步 JavaScript 而不阻塞用户界面。这非常适合复杂计算和数据处理，特别是 需要花较长时间因而会影响用户使用网页的处理任务。工作者线程有自己独立的环境，只能通过异步消 息与外界通信。\n\n工作者线程可以是专用线程、共享线程。专用线程只能由一个页面使用，而共享线程则可以由同源 的任意页面共享。\n\n服务工作者线程用于让网页模拟原生应用程序。服务工作者线程也是一种工作者线程，但它们更像 是网络代理，而非独立的浏览器线程。可以把它们看成是高度定制化的网络缓存，它们也可以在 PWA 中支持推送通知。\n\n## 第二十八章 最佳实践\n\n### 编码规范\n\n与大多数面向对象语言不同， JavaScript 并不强迫开发者把任何东西都定义为对象。它支持任何编程风格，包括传统的面向对象编程、声明式编程，以及函数式编程。\n\n1. 可读性\n\n以下这些地方应该写注释：\n\n- 函数和方法\n- 大型代码块\n- 复杂的算法\n- 使用黑科技\n\n1. 变量和函数命名\n\n以下是关于命名的通用规则：\n\n- 变量名应该是名词，例如 car 或 person。\n- 函数名应该以动词开始，例如 getName()。\n- 返回布尔值的函数通常以 is 开头，比如 isEnabled()。\n- 对变量和函数都使用符合逻辑的名称，不用担心长度。\n- 变量、函数和方法应该以小写字母开头，使用驼峰大小写(camelCase)形式，如 getName()和 isPerson。类名应该首字母大写，如 Person、RequestFactory。常量值应该全部大写并以 下划线相接，比如 REQUEST_TIMEOUT。\n- 名称要尽量用描述性和直观的词汇，但不要过于冗长。\n\n### 编码惯例\n\n1. 尊重对象所有权\n2. 不声明全局变量\n3. 不要比较 null\n4. 使用常量\n\n### 其他性能优化注意事项\n\n- 原生方法很快。如：**Math 对象**。\n- switch 语句很快。\n- 位操作很快。\n\n### 小结\n\n随着 JavaScript 开发日益成熟，最佳实践不断涌现。曾经的业余爱好如今也成为了正式的职业。因此，**前端开发也需要像其他编程语言一样，注重可维护性、性能优化和部署。**\n\n为保证 JavaScript 代码的可维护性，可以参考如下编码惯例。\n\n- 其他语言的编码惯例可以作为添加注释和确定缩进的参考，但 JavaScript 作为一门适合松散类型的语言也有自己的一些特殊要求。\n- 由于 JavaScript 必须与 HTML 和 CSS 共存，因此各司其职尤为重要:JavaScript 负责定义行为， HTML 负责定义内容，而 CSS 负责定义外观。\n- 如果三者职责混淆，则可能导致难以调试的错误和可维护性问题。\n\n随着 Web 应用程序中 JavaScript 代码量的激增，性能也越来越重要。因此应该牢记如下这些事项。\n\n- 执行 JavaScript 所需的时间直接影响网页性能，其重要性不容忽视。\n- 很多适合 C 语言的性能优化策略同样也适合 JavaScript，包括循环展开和使用 **switch** 语句而不是 if 语句。\n- 另一个需要重视的方面是 DOM 交互很费时间，因此应该尽可能限制 DOM 操作的数量。\n\n开发 Web 应用程序的最后一步是上线部署。以下是本章讨论的相关要点。\n\n- 为辅助部署，应该建立构建流程，将 JavaScript 文件合并为较少的(最好是只有一个)文件。\n- 构建流程可以实现很多源代码处理任务的自动化。例如，可以运行 JavaScript 验证程序，确保没有语法错误和潜在的问题。\n- 压缩可以让文件在部署之前变得尽量小。\n- 启用 HTTP 压缩可以让网络传输的 JavaScript 文件尽可能小，从而提升页面的整体性能。\n","slug":"learn-javascript","published":1,"date":"2022-09-15T11:51:36.248Z","updated":"2022-09-15T11:53:22.474Z","_id":"cl82zs6q100005w9o1oxnbe6i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"重学-Javascript\"><a href=\"#重学-Javascript\" class=\"headerlink\" title=\"重学 Javascript\"></a>重学 Javascript</h1><blockquote>\n<p>Javascript 高级程序设计 + Modern JavaScript Tutorial + MDN</p>\n</blockquote>\n<p><a href=\"https://zh.javascript.info/\">现代 JavaScript 教程</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/\">MDN Web Docs</a></p>\n<h2 id=\"第一章-什么是-JavaScript\"><a href=\"#第一章-什么是-JavaScript\" class=\"headerlink\" title=\"第一章 什么是 JavaScript\"></a>第一章 什么是 JavaScript</h2><h3 id=\"javascript-的实现\"><a href=\"#javascript-的实现\" class=\"headerlink\" title=\"javascript 的实现\"></a>javascript 的实现</h3><ul>\n<li>核心 (ECMAScript)</li>\n<li>文档对象模型 (DOM)</li>\n<li>浏览器对象模型 (BOM)</li>\n</ul>\n<h3 id=\"组织分工\"><a href=\"#组织分工\" class=\"headerlink\" title=\"组织分工\"></a>组织分工</h3><p>TC39 → ECMAScript</p>\n<p>W3C → DOM</p>\n<p>浏览器厂商 → BOM</p>\n<h3 id=\"规范和手册\"><a href=\"#规范和手册\" class=\"headerlink\" title=\"规范和手册\"></a>规范和手册</h3><p>规范：ECMA-262</p>\n<p><a href=\"https://tc39.es/ecma262/\">ECMAScript® 2023 Language Specification</a></p>\n<p>手册：MDN（Mozilla）JavaScript</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\">JavaScript reference - JavaScript | MDN</a></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。</p>\n<ul>\n<li>ECMAScript:由 ECMA-262 定义并提供核心功能。</li>\n<li>文档对象模型(DOM):提供与网页内容交互的方法和接口。</li>\n<li>浏览器对象模型(BOM):提供与浏览器交互的方法和接口。</li>\n</ul>\n<p>JavaScript 的这三个部分得到了五大 Web 浏览器(IE、Firefox、Chrome、Safari 和 Opera)不同程度的支持。所有浏览器基本上对 ES5(ECMAScript 5)提供了完善的支持，而对 ES6(ECMAScript 6) 和 ES7(ECMAScript 7) 的支持度也在不断提升。这些浏览器对 DOM 的支持各不相同，但对 Level 3 的支 持日益趋于规范。HTML5 中收录的 BOM 会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性。</p>\n<h2 id=\"第二章-HTML-中的-JavaScript\"><a href=\"#第二章-HTML-中的-JavaScript\" class=\"headerlink\" title=\"第二章 HTML 中的 JavaScript\"></a>第二章 HTML 中的 JavaScript</h2><h3 id=\"lt-script-gt-标签\"><a href=\"#lt-script-gt-标签\" class=\"headerlink\" title=\"&lt;script&gt;标签\"></a><code>&lt;script&gt;</code>标签</h3><p>使用了 src 属性的 <code>&lt;script&gt;</code> 元素不应该再在 <code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签中再包含其他 JavaScript 代码。如果两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。</p>\n<h3 id=\"nomodule\"><a href=\"#nomodule\" class=\"headerlink\" title=\"nomodule\"></a>nomodule</h3><p>这个布尔属性被设置来标明这个脚本在支持  <a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">ES2015 modules</a>的浏览器中不执行。  实际上，这可用于在不支持模块化 JavaScript 的旧浏览器中提供回退脚本。</p>\n<h3 id=\"lt-noscript-gt-启用条件\"><a href=\"#lt-noscript-gt-启用条件\" class=\"headerlink\" title=\"&lt;noscript&gt;启用条件\"></a><code>&lt;noscript&gt;</code>启用条件</h3><ul>\n<li>浏览器不支持脚本</li>\n<li>浏览器对脚本的支持被关闭</li>\n</ul>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 是通过 <strong><code>&lt;script&gt;</code></strong> 元素插入到 HTML 页面中的。这个元素可用于把 JavaScript 代码嵌入到 HTML 页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的 JavaScript。本章的重点可以总结如下。</p>\n<ul>\n<li>要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li>\n<li>所有<code>&lt;script&gt;</code> 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在<code>&lt;script&gt;</code> 元素中的代码必须严格按次序解释。</li>\n<li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code> 元素中的代码，然后才能继续渲染页面 的剩余部分。为此，<strong>通常应该把<code>&lt;script&gt;</code> 元素放到页面末尾，介于主内容之后及<code>&lt;script&gt;</code> 标签之前</strong>。</li>\n<li>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。</li>\n<li>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异 步脚本不能保证按照它们在页面中出现的次序执行。</li>\n<li>通过使用 <code>**&lt;noscript&gt;**</code> 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染。</li>\n</ul>\n<h2 id=\"第三章-语言基础\"><a href=\"#第三章-语言基础\" class=\"headerlink\" title=\"第三章 语言基础\"></a>第三章 语言基础</h2><h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>所谓标识符，就是变量、函数、属性或参数的名称</li>\n<li>按照惯例，ECMAScript 标识符使用驼峰大小写形式，因为这种形式跟 ECMAScript 内置函数和对象的命名方式一致，所以算是最佳实践</li>\n<li>关键字、保留字、true、false、null 不能作为标识符</li>\n</ul>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><ul>\n<li>if 之类的控制语句只在执行多条语句时要求必须有代码块。不过最佳实践是始终在控制语句中使用代码块，即使执行的只有一条语句。在控制语句中使用代码块可以让内容更清晰，在需要修改代码时也可以减少出错的可能性。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有效，但容易导致错误，应该避免</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//推荐</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li>var → 函数作用域</li>\n<li>let → 块作用域</li>\n</ul>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 的核心语言特性在 <strong>ECMA-262</strong> 中以伪语言 <strong>ECMAScript</strong> 的形式来定义。ECMAScript 包含所有基本语法、操作符、数据类型和对象，能完成基本的计算任务，但没有提供获得输入和产生输出的 机制。理解 ECMAScript 及其复杂的细节是完全理解浏览器中 JavaScript 的关键。下面总结一下 ECMAScript 中的基本元素。</p>\n<ul>\n<li>ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number、String 和 Symbol。</li>\n<li>与其他语言不同，ECMAScript 不区分整数和浮点值，只有 Number 一种数值数据类型。</li>\n<li>Object 是一种复杂数据类型，它是这门语言中所有对象的基类。</li>\n<li>严格模式为这门语言中某些容易出错的部分施加了限制。</li>\n<li>ECMAScript 提供了 C 语言和类 C 语言中常见的很多基本操作符，包括数学操作符、布尔操作符、 关系操作符、相等操作符和赋值操作符等。</li>\n<li>这门语言中的流控制语句大多是从其他语言中借鉴而来的，比如 if 语句、for 语句和 switch 语句等。</li>\n</ul>\n<p>ECMAScript 中的函数与其他语言中的函数不一样。</p>\n<ul>\n<li>不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。</li>\n<li><strong>不指定返回值的函数实际上会返回特殊值 undefined。</strong></li>\n</ul>\n<h2 id=\"第四章-变量、作用域与内存\"><a href=\"#第四章-变量、作用域与内存\" class=\"headerlink\" title=\"第四章 变量、作用域与内存\"></a>第四章 变量、作用域与内存</h2><h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 变量可以保存两种类型的值:原始值和引用值。原始值可能是以下 6 种原始数据类型之 一：Undefined、Null、Boolean、Number、String 和 Symbol。原始值和引用值有以下特点。</p>\n<ul>\n<li>原始值大小固定，因此保存在<strong>栈内存</strong>上。</li>\n<li>从一个变量到另一个变量复制原始值会创建该值的第二个副本。</li>\n<li>引用值是对象，存储在<strong>堆内存</strong>上。</li>\n<li>包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。</li>\n<li>从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。</li>\n<li><strong>typeof 操作符可以确定值的原始类型，而 instanceof 操作符用于确保值的引用类型。</strong></li>\n</ul>\n<blockquote>\n<p>堆内存是向高地址扩展的数据结构，是不连续的内存区域。 栈内存在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。</p>\n</blockquote>\n<p>任何变量(不管包含的是原始值还是引用值)都存在于某个执行上下文中(也称为作用域)。这个上下文(作用域)决定了变量的生命周期，以及它们可以访问代码的哪些部分。执行上下文可以总结如下。</p>\n<ul>\n<li>执行上下文分<strong>全局上下文、函数上下文和块级上下文</strong>。</li>\n<li>代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。</li>\n<li>@函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。</li>\n<li>全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。</li>\n<li>变量的执行上下文用于确定什么时候释放内存。</li>\n</ul>\n<p>JavaScript 是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收。JavaScript 的垃圾回收程序可以总结如下。</p>\n<ul>\n<li><strong>离开作用域</strong>的值会被自动标记为可回收，然后在垃圾回收期间被删除。</li>\n<li>主流的垃圾回收算法是<strong>标记清理</strong>，即先给当前不使用的值加上标记，再回来回收它们的内存。</li>\n<li><strong>引用计数</strong>是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎<strong>不再</strong>使用这种算法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对象(如 DOM 元素)。</li>\n<li>引用计数在代码中存在循环引用时会出现问题。</li>\n<li>解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。</li>\n</ul>\n<h2 id=\"第五章-基本引用类型\"><a href=\"#第五章-基本引用类型\" class=\"headerlink\" title=\"第五章 基本引用类型\"></a>第五章 基本引用类型</h2><h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。</p>\n<ul>\n<li>引用值与传统面向对象编程语言中的类相似，但实现不同。</li>\n<li><strong>Date</strong> 类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。</li>\n<li><strong>RegExp</strong> 类型是 ECMAScript 支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。</li>\n</ul>\n<p>JavaScript 比较独特的一点是，<strong>函数实际上是 Function 类型的实例，也就是说函数也是对象</strong>。因为函数也是对象，所以函数也有方法，可以用于增强其能力。</p>\n<p>由于原始值包装类型的存在，JavaScript 中的原始值可以被当成对象来使用。有 3 种原始值包装类型:<strong>Boolean</strong>、<strong>Number</strong> 和 <strong>String</strong>。它们都具备如下特点。</p>\n<ul>\n<li>每种包装类型都映射到同名的原始类型。</li>\n<li>以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。</li>\n<li>涉及原始值的语句执行完毕后，包装对象就会被销毁。</li>\n</ul>\n<p>当代码开始执行时，全局上下文中会存在两个内置对象: <strong>Global</strong> 和 <strong>Math</strong> 。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。<strong>不过，浏览器将其实现为 window 对象。</strong>所有全局变量和函 数都是 Global 对象的属性。Math 对象包含辅助完成复杂计算的属性和方法。</p>\n<h2 id=\"第六章-集合引用类型\"><a href=\"#第六章-集合引用类型\" class=\"headerlink\" title=\"第六章 集合引用类型\"></a>第六章 集合引用类型</h2><h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 中的对象是引用值，可以通过几种内置引用类型创建特定类型的对象。</p>\n<ul>\n<li>引用类型与传统面向对象编程语言中的类相似，但实现不同。</li>\n<li><strong>Object 类型是一个基础类型，所有引用类型都从它继承了基本的行为。</strong></li>\n<li>Array 类型表示一组有序的值，并提供了操作和转换值的能力。</li>\n<li>定型数组包含一套不同的引用类型，用于管理数值在内存中的类型。</li>\n<li>Date 类型提供了关于日期和时间的信息，包括当前日期和时间以及计算。</li>\n<li>RegExp 类型是 ECMAScript 支持的正则表达式的接口，提供了大多数基本正则表达式以及一些 高级正则表达式的能力。</li>\n</ul>\n<p><strong>JavaScript 比较独特的一点是，函数其实是 Function 类型的实例，这意味着函数也是对象。由于函数是对象，因此也就具有能够增强自身行为的方法。</strong></p>\n<p>因为原始值包装类型的存在，所以 JavaScript 中的原始值可以拥有类似对象的行为。有 3 种原始值包装类型:Boolean、Number 和 String。它们都具有如下特点。</p>\n<ul>\n<li>每种包装类型都映射到同名的原始类型。</li>\n<li>在以读模式访问原始值时，后台会实例化一个原始值包装对象，通过这个对象可以操作数据。</li>\n<li>涉及原始值的语句只要一执行完毕，包装对象就会立即销毁。 JavaScript 还有两个在一开始执行代码时就存在的内置对象:Global 和 Math。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。不过浏览器将 Global 实现为 window 对象。所有全局 变量和函数都是 Global 对象的属性。Math 对象包含辅助完成复杂数学计算的属性和方法。 ECMAScript 6 新增了一批引用类型:Map、WeakMap、Set 和 WeakSet。这些类型为组织应用程序 数据和简化内存管理提供了新能力。</li>\n</ul>\n<h2 id=\"第七章-迭代器与生成器\"><a href=\"#第七章-迭代器与生成器\" class=\"headerlink\" title=\"第七章 迭代器与生成器\"></a>第七章 迭代器与生成器</h2><p><strong>可迭代（Iterable）</strong>  对象是数组的泛化。这个概念是说任何对象都可以被定制为可在  <code>for..of</code><br>  循环中使用的对象。</p>\n<p>数组是可迭代的。但不仅仅是数组。很多其他<strong>内建对象</strong>也都是可迭代的。例如字符串也是可迭代的。</p>\n<h3 id=\"Symbol-iterator\"><a href=\"#Symbol-iterator\" class=\"headerlink\" title=\"Symbol.iterator\"></a><strong>Symbol.iterator</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range = &#123;</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">to</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>为了让  <code>range</code>  对象可迭代（也就让  <code>for..of</code>  可以运行）我们需要为对象添加一个名为  <code>Symbol.iterator</code>  的方法（一个专门用于使对象可迭代的内建 symbol）。</p>\n<ol>\n<li>当  <code>for..of</code>  循环启动时，它会调用这个方法（如果没找到，就会报错）。这个方法必须返回一个  <strong>迭代器（iterator）</strong> —— 一个有  <code>next</code>  方法的对象。</li>\n<li>从此开始，<code>for..of</code> <strong>仅适用于这个被返回的对象</strong>。</li>\n<li>当  <code>for..of</code>  循环希望取得下一个数值，它就调用这个对象的  <code>next()</code>  方法。</li>\n<li><code>next()</code>  方法返回的结果的格式必须是  <code>&#123;done: Boolean, value: any&#125;</code>，当  <code>done=true</code>  时，表示循环结束，否则  <code>value</code>  是下一个值。</li>\n</ol>\n<h3 id=\"完整实现\"><a href=\"#完整实现\" class=\"headerlink\" title=\"完整实现\"></a>完整实现</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range = &#123;</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">to</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. for..of 调用首先会调用这个：</span></span><br><span class=\"line\">range[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ……它返回迭代器对象（iterator object）：</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">current</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">from</span>,</span><br><span class=\"line\">    <span class=\"attr\">last</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">to</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. next() 在 for..of 的每一轮循环迭代中被调用</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 4. 它将会返回 &#123;done:.., value :...&#125; 格式的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">current</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">last</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">current</span>++ &#125;;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在它可以运行了！</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> range) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(num); <span class=\"comment\">// 1, 然后是 2, 3, 4, 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意可迭代对象的核心功能：关注点分离。</p>\n<ul>\n<li><code>range</code>  自身没有  <code>next()</code>  方法。</li>\n<li>相反，是通过调用  <code>range[Symbol.iterator]()</code>  创建了另一个对象，即所谓的“迭代器”对象，并且它的  <code>next</code>  会为迭代生成值。</li>\n</ul>\n<p>因此，迭代器对象和与其进行迭代的对象是分开的。</p>\n<p>从技术上说，我们可以将它们合并，并使用  <code>range</code>  自身作为迭代器来简化代码。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range = &#123;</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">to</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">current</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">from</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">current</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">to</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">current</span>++ &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> range) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(num); <span class=\"comment\">// 1, 然后是 2, 3, 4, 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串是可迭代的\"><a href=\"#字符串是可迭代的\" class=\"headerlink\" title=\"字符串是可迭代的\"></a><strong>字符串是可迭代的</strong></h3><p>数组和字符串是使用最广泛的内建可迭代对象。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> <span class=\"string\">&quot;test&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 触发 4 次，每个字符一次</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(char); <span class=\"comment\">// t, then e, then s, then t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显式调用迭代器\"><a href=\"#显式调用迭代器\" class=\"headerlink\" title=\"显式调用迭代器\"></a><strong>显式调用迭代器</strong></h3><p>我们将会采用与  <code>for..of</code>  完全相同的方式遍历字符串，但使用的是直接调用。这段代码创建了一个字符串迭代器，并“手动”从中获取值。这样比  <code>for..of</code>  给了我们更多的控制权。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和 for..of 做相同的事</span></span><br><span class=\"line\"><span class=\"comment\">// for (let char of str) alert(char);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = str[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = iterator.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.<span class=\"property\">done</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(result.<span class=\"property\">value</span>); <span class=\"comment\">// 一个接一个地输出字符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可迭代（iterable）和类数组（array-like）\"><a href=\"#可迭代（iterable）和类数组（array-like）\" class=\"headerlink\" title=\"可迭代（iterable）和类数组（array-like）\"></a>可迭代（iterable）和类数组（array-like）</h3><ul>\n<li><strong>Iterable</strong>  如上所述，是实现了  <code>Symbol.iterator</code>  方法的对象。</li>\n<li><strong>Array-like</strong>  是有索引和  <code>length</code>  属性的对象，所以它们看起来很像数组。</li>\n</ul>\n<p>例如，字符串即是可迭代的（<code>for..of</code>  对它们有效），又是类数组的（它们有数值索引和  <code>length</code>  属性）。</p>\n<p>下面这个对象则是类数组的，但是不可迭代：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有索引和 length 属性 =&gt; 类数组对象</span></span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;Hello&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error (no Symbol.iterator)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> arrayLike) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from\"></a>Array.from</h3><p><code>Array.from</code> 可以接受一个<strong>可迭代</strong>或<strong>类数组</strong>的值，并从中获取一个“真正的”数组。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;Hello&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike); <span class=\"comment\">// (*)</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(arr.<span class=\"title function_\">pop</span>()); <span class=\"comment\">// World（pop 方法有效）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-6\"><a href=\"#小结-6\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>迭代是一种所有编程语言中都可以看到的模式。ECMAScript 6 正式支持<strong>迭代模式</strong>并引入了两个新的 语言特性：<strong>迭代器和生成器。</strong></p>\n<p>可以应用  <code>for..of</code>  的对象被称为  <strong>可迭代的</strong>。</p>\n<ul>\n<li>技术上来说，可迭代对象必须实现  <code>Symbol.iterator</code>  方法。<ul>\n<li><code>obj[Symbol.iterator]()</code>  的结果被称为  <strong>迭代器（iterator）</strong>。由它处理进一步的迭代过程。</li>\n<li>一个迭代器必须有  <code>next()</code>  方法，它返回一个  <code>&#123;done: Boolean, value: any&#125;</code>  对象，这里  <code>done:true</code>  表明迭代结束，否则  <code>value</code>  就是下一个值。</li>\n</ul>\n</li>\n<li><code>Symbol.iterator</code>  方法会被  <code>for..of</code>  自动调用，但我们也可以直接调用它。</li>\n<li>内建的可迭代对象例如字符串和数组，都实现了  <code>Symbol.iterator</code>。</li>\n<li>字符串迭代器能够识别代理对（surrogate pair）。（译注：代理对也就是 UTF-16 扩展字符。）</li>\n</ul>\n<p>有索引属性和  <code>length</code>  属性的对象被称为  <strong>类数组对象</strong>。这种对象可能还具有其他属性和方法，但是没有数组的内建方法。</p>\n<p>如果我们仔细研究一下规范 —— 就会发现大多数内建方法都假设它们需要处理的是可迭代对象或者类数组对象，而不是“真正的”数组，因为这样抽象度更高。</p>\n<p><code>Array.from(obj[, mapFn, thisArg])</code>  将可迭代对象或类数组对象  <code>obj</code>  转化为真正的数组  <code>Array</code>，然后我们就可以对它应用数组的方法。可选参数  <code>mapFn</code>  和  <code>thisArg</code>  允许我们将函数应用到每个元素。</p>\n<p><strong>生成器</strong>是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了 Iterable 接口， 因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持 yield 关键字，这个关键字能够 暂停执行生成器函数。使用 yield 关键字还可以通过 next()方法接收输入和产生输出。在加上星号之 后，yield 关键字可以将跟在它后面的可迭代对象序列化为一连串值。</p>\n<h2 id=\"第八章-对象、类与面向对象编程\"><a href=\"#第八章-对象、类与面向对象编程\" class=\"headerlink\" title=\"第八章 对象、类与面向对象编程\"></a>第八章 对象、类与面向对象编程</h2><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h3 id=\"面相对象编程\"><a href=\"#面相对象编程\" class=\"headerlink\" title=\"面相对象编程\"></a>面相对象编程</h3><p>当我们在代码中用对象表示实体时，就是所谓的  <a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">面向对象编程</a>，简称为 “OOP”。</p>\n<h3 id=\"“in”-操作符和“for…in”-循环\"><a href=\"#“in”-操作符和“for…in”-循环\" class=\"headerlink\" title=\"“in” 操作符和“for…in” 循环\"></a>“in” 操作符和“for…in” 循环</h3><p>相比于其他语言，JavaScript 的对象有一个需要注意的特性：能够被访问任何属性。即使属性不存在也不会报错！读取不存在的属性只会得到  <code>undefined</code>。</p>\n<p>这里还有一个特别的，检查属性是否存在的操作符  <code>in</code>。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;age&quot;</span> <span class=\"keyword\">in</span> user); <span class=\"comment\">// true，user.age 存在</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;blabla&quot;</span> <span class=\"keyword\">in</span> user); <span class=\"comment\">// false，user.blabla 不存在。</span></span><br></pre></td></tr></table></figure>\n\n<p>为何会有  <code>in</code>  运算符呢？与  <code>undefined</code>  进行比较来判断还不够吗？大部分情况下与  <code>undefined</code>  进行比较来判断就可以了。但有一个例外情况那就是属性存在，但存储的值是  <code>undefined</code>  的时候。</p>\n<p>这种情况很少发生，因为通常情况下不应该给对象赋值  <code>undefined</code>。我们通常会用  <code>null</code><br>  来表示未知的或者空的值。因此，<code>in</code>  运算符是代码中的特殊来宾。</p>\n<p><strong>“for…in” 循环</strong></p>\n<p>为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环：<code>for..in</code>。这跟我们在前面学到的  <code>for(;;)</code>  循环是完全不一样的东西。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"attr\">isAdmin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> user) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// keys</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(key); <span class=\"comment\">// name, age, isAdmin</span></span><br><span class=\"line\">  <span class=\"comment\">// 属性键的值</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(user[key]); <span class=\"comment\">// John, 30, true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<aside>\n💡 如果我们遍历一个对象，其顺序是：**整数属性会被进行排序，其他属性则按照创建的顺序显示。**\n\n</aside>\n\n<h3 id=\"对象方法，-“this”\"><a href=\"#对象方法，-“this”\" class=\"headerlink\" title=\"对象方法，**“this”**\"></a>对象方法，*<strong>*“this”**</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &quot;this&quot; 指的是“当前的对象”</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">user.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// John</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JavaScript 中，<code>this</code>  关键字与其他大多数编程语言中的不同。JavaScript 中的  <code>this</code>  可以用于任何函数，即使它不是对象的方法。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面这样的代码没有语法错误：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>this</code>  的值是在代码运行时计算出来的，它取决于代码上下文。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.<span class=\"property\">f</span> = sayHi;</span><br><span class=\"line\">user.<span class=\"title function_\">f</span>(); <span class=\"comment\">// John（this == user）</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在没有对象的情况下调用：<code>this == undefined</code></strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，严格模式下的  <code>this</code>  值为  <code>undefined</code>。如果我们尝试访问  <code>this.name</code>，将会报错。</p>\n<p>在非严格模式的情况下，<code>this</code>  将会是  <strong>全局对象</strong>（浏览器中的  <code>window</code>）。这是一个历史行为，<code>&quot;use strict&quot;</code>  已经将其修复了。</p>\n<p>通常这种调用是程序出错了。如果在一个函数内部有  <code>this</code>，那么通常意味着它是在对象上下文环境中被调用的。</p>\n<p><strong>箭头函数没有自己的 “this”</strong></p>\n<p>箭头函数有些特别：它们没有自己的  <code>this</code>。如果我们在这样的函数中引用  <code>this</code>，<code>this</code><br>  值取决于外部“正常的”函数。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Ilya&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">arrow</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span>);</span><br><span class=\"line\">    <span class=\"title function_\">arrow</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// Ilya</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器和操作符-“new”\"><a href=\"#构造器和操作符-“new”\" class=\"headerlink\" title=\"**构造器和操作符 “new”**\"></a>*<strong>*构造器和操作符 “new”**</strong></h3><p>常规的  <code>&#123;...&#125;</code>  语法允许创建一个对象。但是我们经常需要创建很多类似的对象，例如多个用户或菜单项等。这可以使用构造函数和  <code>&quot;new&quot;</code>  操作符来实现。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>构造函数在技术上是常规函数。不过有两个约定：</p>\n<ol>\n<li>它们的命名以大写字母开头。</li>\n<li>它们只能由  <code>&quot;new&quot;</code>  操作符来执行。</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">isAdmin</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(user.<span class=\"property\">name</span>); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(user.<span class=\"property\">isAdmin</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>new User(...)</code>  做的是类似的事情：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this = &#123;&#125;;（隐式创建）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 添加属性到 this</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">isAdmin</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// return this;（隐式返回）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器模式测试：new-target\"><a href=\"#构造器模式测试：new-target\" class=\"headerlink\" title=\"构造器模式测试：new.target\"></a>构造器模式测试：new.target</h3><p>在一个函数内部，我们可以使用  <code>new.target</code>  属性来检查它是否被使用  <code>new</code>  进行调用了。</p>\n<p>对于常规调用，它为 undefined，对于使用  <code>new</code>  的调用，则等于该函数：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不带 &quot;new&quot;：</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>(); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带 &quot;new&quot;：</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(); <span class=\"comment\">// function User &#123; ... &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器的-return\"><a href=\"#构造器的-return\" class=\"headerlink\" title=\"构造器的 return\"></a>构造器的 return</h3><p>带有对象的  <code>return</code>返回该对象，在所有其他情况下返回  <code>this</code>。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BigUser</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Godzilla&quot;</span> &#125;; <span class=\"comment\">// &lt;-- 返回这个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BigUser</span>().<span class=\"property\">name</span>); <span class=\"comment\">// Godzilla，得到了那个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SmallUser</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>; <span class=\"comment\">// &lt;-- 返回 this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">SmallUser</span>().<span class=\"property\">name</span>); <span class=\"comment\">// John</span></span><br></pre></td></tr></table></figure>\n\n<aside>\n💡 如果没有参数，我们可以省略 `new` ，后的括号。这里省略括号不被认为是一种“好风格”，但是规范允许使用该语法。\n\n</aside>\n\n<h3 id=\"对象的方法\"><a href=\"#对象的方法\" class=\"headerlink\" title=\"对象的方法\"></a>对象的方法</h3><p><strong>Object.keys(obj)</strong></p>\n<p>返回一个包含该对象所有的键的数组。</p>\n<p><strong>Object.values(obj)</strong></p>\n<p>返回一个包含该对象所有的值的数组。</p>\n<p><strong>Object.entries(obj)</strong></p>\n<p>返回一个包含该对象所有 <code>[key, value]</code> 键值对的二维数组。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&quot;somestring&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(object1));</span><br><span class=\"line\"><span class=\"comment\">//[[&quot;a&quot;,&quot;somestring&quot;],[&quot;b&quot;,42]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(object1)) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// expected output:</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;a: somestring&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;b: 42&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.assign()</strong></p>\n<p>方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象（浅拷贝）。它将返回目标对象。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> returnedTarget = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(target, source);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(returnedTarget);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.create()</strong></p>\n<p>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。</p>\n<p><strong>Object.defineProperty()</strong></p>\n<p>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<aside>\n💡 应当直接在 `[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)` 构造器对象上调用此方法，而不是在任意一个 `Object`\n类型的实例上调用。\n\n</aside>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(object1, <span class=\"string\">&quot;property1&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">object1.<span class=\"property\">property1</span> = <span class=\"number\">77</span>;</span><br><span class=\"line\"><span class=\"comment\">// throws an error in strict mode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(object1.<span class=\"property\">property1</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 42</span></span><br></pre></td></tr></table></figure>\n\n<aside>\n💡 Vue2通过使用此方法实现双向绑定，Vue3改为了Proxy\n\n</aside>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;; <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\"><span class=\"comment\">// 在对象中添加一个设置了存取描述符属性的示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bValue = <span class=\"number\">38</span>;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(o, <span class=\"string\">&quot;b&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用了方法名称缩写（ES2015 特性）</span></span><br><span class=\"line\">  <span class=\"comment\">// 下面两个缩写等价于：</span></span><br><span class=\"line\">  <span class=\"comment\">// get : function() &#123; return bValue; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// set : function(newValue) &#123; bValue = newValue; &#125;,</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">    bValue = newValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.defineProperties()</strong></p>\n<p>方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p>\n<p><strong>Object.freeze()</strong></p>\n<p>方法可以<strong>冻结</strong>一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。<code>freeze()</code>  返回和传入的参数相同的对象。</p>\n<p><strong>Object.fromEntries()</strong></p>\n<p>方法把键值对列表转换为一个对象。</p>\n<p><strong>Object.getOwnPropertyDescriptor()</strong></p>\n<p>方法返回指定对象上一个自有属性对应的属性描述符。</p>\n<p><strong>Object.getOwnPropertyDescriptors()</strong></p>\n<p>方法用来获取一个对象的所有自身属性的描述符。</p>\n<p><strong>Object.getOwnPropertyNames()</strong></p>\n<p>方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 <code>Symbol</code> 值作为名称的属性）组成的数组。</p>\n<p><strong>Object.getOwnPropertySymbols()</strong></p>\n<p>方法返回一个给定对象自身的所有 <code>Symbol</code>  属性的数组。</p>\n<p><strong>Object.getPrototypeOf()</strong></p>\n<p>方法返回指定对象的原型（内部<code>[[Prototype]]</code>属性的值）。</p>\n<p><strong>Object.hasOwn()</strong></p>\n<p>The **<code>Object.hasOwn()</code>**static method returns <code>true</code> if the specified object has the indicated property as its <em>own</em> property. If the property is inherited, or does not exist, the method returns <code>false</code>.</p>\n<aside>\n💡 `Object.hasOwn()`\n is intended as a replacement for `[Object.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)`.\n\n</aside>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">prop</span>: <span class=\"string\">&quot;exists&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">hasOwn</span>(object1, <span class=\"string\">&quot;prop&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.prototype.hasOwnProperty()</strong></p>\n<p>方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p>\n<p><strong>Object.is()</strong></p>\n<p>方法判断两个值是否为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\">同一个值</a>。</p>\n<p><strong>Object.isExtensible()</strong></p>\n<p>方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</p>\n<p><strong>Object.isFrozen()</strong></p>\n<p>方法判断一个对象是否被<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">冻结</a>。</p>\n<p><strong>Object.prototype.isPrototypeOf()</strong></p>\n<p>方法用于测试一个对象是否存在于另一个对象的原型链上。</p>\n<p><strong>Object.isSealed()</strong></p>\n<p>方法判断一个对象是否被密封。</p>\n<p><strong>Object.preventExtensions()</strong></p>\n<p>方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。</p>\n<p><strong>Object.prototype.propertyIsEnumerable()</strong></p>\n<p>方法返回一个布尔值，表示指定的属性是否可枚举。</p>\n<p><strong>Object.seal()</strong></p>\n<p>方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</p>\n<p><strong>Object.setPrototypeOf()</strong></p>\n<p>方法设置一个指定的对象的原型 ( 即, 内部<code>[[Prototype]]</code>属性）到另一个对象或  <code>[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)</code>。</p>\n<aside>\n💡 考虑性能，你应该使用 `[Object.create()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)`来创建带有你想要的`[[Prototype]]`的新对象。\n\n</aside>\n\n<p><strong>toLocaleString()</strong></p>\n<p>方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。</p>\n<p><strong>toString()</strong></p>\n<p>方法返回一个表示该对象的字符串。</p>\n<p><strong>valueOf()</strong></p>\n<p>方法返回指定对象的原始值。</p>\n<h3 id=\"小结-7\"><a href=\"#小结-7\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>对象在代码执行过程中的任何时候都可以被创建和增强，具有极大的动态性，并不是严格定义的实 体。下面的模式适用于创建对象。</p>\n<ul>\n<li>工厂模式就是一个简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个 对象。这个模式在构造函数模式出现后就很少用了。</li>\n<li>使用构造函数模式可以自定义引用类型，可以使用 new 关键字像创建内置类型实例一样创建自 定义类型的实例。不过，构造函数模式也有不足，主要是其成员无法重用，包括函数。考虑到 函数本身是松散的、弱类型的，没有理由让函数不能在多个对象实例间共享。</li>\n<li>原型模式解决了成员共享的问题，只要是添加到构造函数 prototype 上的属性和方法就可以共 6 享。而组合构造函数和原型模式通过构造函数定义实例属性，通过原型定义共享的属性和方法。</li>\n</ul>\n<p>JavaScript 的继承主要通过原型链来实现。原型链涉及把构造函数的原型赋值为另一个类型的实例。 这样一来，子类就可以访问父类的所有属性和方法，就像基于类的继承那样。原型链的问题是所有继承 的属性和方法都会在对象实例间共享，无法做到实例私有。盗用构造函数模式通过在子类构造函数中调 用父类构造函数，可以避免这个问题。这样可以让每个实例继承的属性都是私有的，但要求类型只能通 过构造函数模式来定义(因为子类不能访问父类原型上的方法)。目前最流行的继承模式是组合继承， 即通过原型链继承共享的属性和方法，通过盗用构造函数继承实例属性。</p>\n<p>除上述模式之外，还有以下几种继承模式。</p>\n<ul>\n<li>原型式继承可以无须明确定义构造函数而实现继承，本质上是对给定对象执行浅复制。这种操 作的结果之后还可以再进一步增强。</li>\n<li>与原型式继承紧密相关的是寄生式继承，即先基于一个对象创建一个新对象，然后再增强这个 新对象，最后返回新对象。这个模式也被用在组合继承中，用于避免重复调用父类构造函数导 致的浪费。</li>\n<li>寄生组合继承被认为是实现基于类型继承的最有效方式。</li>\n</ul>\n<p>ECMAScript 6 新增的类很大程度上是基于既有原型机制的语法糖。类的语法让开发者可以优雅地定义向后兼容的类，既可以继承内置类型，也可以继承自定义类型。类有效地跨越了对象实例、对象原型 和对象类之间的鸿沟。</p>\n<h2 id=\"第九章-代理与反射\"><a href=\"#第九章-代理与反射\" class=\"headerlink\" title=\"第九章 代理与反射\"></a>第九章 代理与反射</h2><h3 id=\"小结-8\"><a href=\"#小结-8\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>代理是 ECMAScript 6 新增的令人兴奋和动态十足的新特性。尽管不支持向后兼容，但它开辟出了 一片前所未有的 JavaScript 元编程及抽象的新天地。</p>\n<p>从宏观上看，代理是真实 JavaScript 对象的透明抽象层。代理可以定义包含捕获器的处理程序对象， 而这些捕获器可以拦截绝大部分 JavaScript 的基本操作和方法。在这个捕获器处理程序中，可以修改任 何基本操作的行为，当然前提是遵从捕获器不变式。</p>\n<p>与代理如影随形的反射 API，则封装了一整套与捕获器拦截的操作相对应的方法。可以把反射 API 看作一套基本操作，这些操作是绝大部分 JavaScript 对象 API 的基础。</p>\n<p>代理的应用场景是不可限量的。开发者使用它可以创建出各种编码模式，比如(但远远不限于)跟 踪属性访问、隐藏属性、阻止修改或删除属性、函数参数验证、构造函数参数验证、数据绑定，以及可 观察对象。</p>\n<h2 id=\"第十章-函数\"><a href=\"#第十章-函数\" class=\"headerlink\" title=\"第十章 函数\"></a>第十章 函数</h2><h3 id=\"小结-9\"><a href=\"#小结-9\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>函数是 JavaScript 编程中最有用也最通用的工具。ECMAScript 6 新增了更加强大的语法特性，从而 让开发者可以更有效地使用函数。</p>\n<ul>\n<li>函数表达式与函数声明是不一样的。函数声明要求写出函数名称，而函数表达式并不需要。没 有名称的函数表达式也被称为匿名函数。</li>\n<li>ES6 新增了类似于函数表达式的箭头函数语法，但两者也有一些重要区别。</li>\n<li>JavaScript 中函数定义与调用时的参数极其灵活。arguments 对象，以及 ES6 新增的扩展操作符，可以实现函数定义和调用的完全动态化。</li>\n<li>函数内部也暴露了很多对象和引用，涵盖了函数被谁调用、使用什么调用，以及调用时传入了什么参数等信息。</li>\n<li>JavaScript 引擎可以优化符合尾调用条件的函数，以节省栈空间。</li>\n<li>闭包的作用域链中包含自己的一个变量对象，然后是包含函数的变量对象，直到全局上下文的变量对象。</li>\n<li>通常，函数作用域及其中的所有变量在函数执行完毕后都会被销毁。</li>\n<li>闭包在被函数返回之后，其作用域会一直保存在内存中，直到闭包被销毁。</li>\n<li>函数可以在创建之后立即调用，执行其中代码之后却不留下对函数的引用。</li>\n<li>立即调用的函数表达式如果不在包含作用域中将返回值赋给一个变量，则其包含的所有变量都会被销毁。</li>\n<li>虽然 JavaScript 没有私有对象属性的概念，但可以使用闭包实现公共方法，访问位于包含作用域中定义的变量。</li>\n<li>可以访问私有变量的公共方法叫作特权方法。</li>\n<li>特权方法可以使用构造函数或原型模式通过自定义类型中实现，也可以使用模块模式或模块增强模式在单例对象上实现。</li>\n</ul>\n<h2 id=\"第十一章-期约与异步函数\"><a href=\"#第十一章-期约与异步函数\" class=\"headerlink\" title=\"第十一章 期约与异步函数\"></a>第十一章 期约与异步函数</h2><h3 id=\"小结-10\"><a href=\"#小结-10\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>长期以来，掌握单线程 JavaScript 运行时的异步行为一直都是个艰巨的任务。随着 ES6 新增了期约 和 ES8 新增了异步函数，ECMAScript 的异步编程特性有了长足的进步。通过期约和 async&#x2F;await，不仅 可以实现之前难以实现或不可能实现的任务，而且也能写出更清晰、简洁，并且容易理解、调试的代码。</p>\n<p>期约的主要功能是为异步代码提供了清晰的抽象。可以用期约表示异步执行的代码块，也可以用期 约表示异步计算的值。在需要串行异步代码时，期约的价值最为突出。作为可塑性极强的一种结构，期 约可以被序列化、连锁使用、复合、扩展和重组。</p>\n<p>异步函数是将期约应用于 JavaScript 函数的结果。异步函数可以暂停执行，而不阻塞主线程。无论 是编写基于期约的代码，还是组织串行或平行执行的异步代码，使用异步函数都非常得心应手。异步函 数可以说是现代 JavaScript 工具箱中最重要的工具之一。</p>\n<h2 id=\"第十二章-BOM\"><a href=\"#第十二章-BOM\" class=\"headerlink\" title=\"第十二章 BOM\"></a>第十二章 BOM</h2><p>BOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口</p>\n<p>JavaScript 在浏览器中是单线程执行的，但允许使用定时器指定在某个时间之后或每隔一段时间就 执行相应的代码。</p>\n<blockquote>\n<p>所有超时执行的代码(函数)都会在全局作用域中的一个匿名函数中运行，因此函 数中的 this 值在非严格模式下始终指向 window，而在严格模式下是 undefined。如果 给 setTimeout()提供了一个箭头函数，那么 this 会保留为定义它时所在的词汇作用域。</p>\n</blockquote>\n<p><strong>location</strong> 是最有用的 BOM 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象独特的地方在于，它既是 window 的属性，也是 document 的属性。也就是说， <code>window.location</code> 和 <code>document.location</code> 指向同一个对象。</p>\n<h3 id=\"小结-11\"><a href=\"#小结-11\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>浏览器对象模型(BOM，Browser Object Model)是以 window 对象为基础的，这个对象代表了浏览器窗口和页面可见的区域。window 对象也被复用为 ECMAScript 的 Global 对象，因此所有全局变量和函数都是它的属性，而且所有原生类型的构造函数和普通函数也都从一开始就存在于这个对象之上。本章讨论了 BOM 的以下内容。</p>\n<ul>\n<li>要引用其他 window 对象，可以使用几个不同的窗口指针。</li>\n<li>通过 location 对象可以以编程方式操纵浏览器的导航系统。通过设置这个对象上的属性，可以改变浏览器 URL 中的某一部分或全部。</li>\n<li>使用 replace()方法可以替换浏览器历史记录中当前显示的页面，并导航到新 URL。 navigator 对象提供关于浏览器的信息。提供的信息类型取决于浏览器，不过有些属性如 userAgent 是所有浏览器都支持的。</li>\n</ul>\n<p>BOM 中的另外两个对象也提供了一些功能。screen 对象中保存着客户端显示器的信息。这些信息 通常用于评估浏览网站的设备信息。history 对象提供了操纵浏览器历史记录的能力，开发者可以确 定历史记录中包含多少个条目，并以编程方式实现在历史记录中导航，而且也可以修改历史记录。</p>\n<h2 id=\"第十三章-客户端检测\"><a href=\"#第十三章-客户端检测\" class=\"headerlink\" title=\"第十三章 客户端检测\"></a>第十三章 客户端检测</h2><h3 id=\"小结-12\"><a href=\"#小结-12\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>客户端检测是 JavaScript 中争议最多的话题之一。因为不同浏览器之间存在差异，所以经常需要根 据浏览器的能力来编写不同的代码。客户端检测有不少方式，但下面两种用得最多。</p>\n<ul>\n<li><strong>能力检测</strong>，在使用之前先测试浏览器的特定能力。例如，脚本可以在调用某个函数之前先检查 它是否存在。这种客户端检测方式可以让开发者不必考虑特定的浏览器或版本，而只需关注某 些能力是否存在。能力检测不能精确地反映特定的浏览器或版本。</li>\n<li><strong>用户代理检测</strong>，通过用户代理字符串确定浏览器。用户代理字符串包含关于浏览器的很多信息， 通常包括浏览器、平台、操作系统和浏览器版本。用户代理字符串有一个相当长的发展史，很 多浏览器都试图欺骗网站相信自己是别的浏览器。用户代理检测也比较麻烦，特别是涉及 Opera 会在代理字符串中隐藏自己信息的时候。即使如此，用户代理字符串也可以用来确定浏览器使 用的渲染引擎以及平台，包括移动设备和游戏机。</li>\n</ul>\n<p>在选择客户端检测方法时，首选是使用能力检测。特殊能力检测要放在次要位置，作为决定代码逻 辑的参考。用户代理检测是最后一个选择，因为它过于依赖用户代理字符串。</p>\n<p>浏览器也提供了一些软件和硬件相关的信息。这些信息通过 screen 和 navigator 对象暴露出来。 利用这些 API，可以获取关于操作系统、浏览器、硬件、设备位置、电池状态等方面的准确信息。</p>\n<h2 id=\"第十四章-DOM\"><a href=\"#第十四章-DOM\" class=\"headerlink\" title=\"第十四章 DOM\"></a>第十四章 DOM</h2><p>文档对象模型(DOM，Document Object Model)是 HTML 和 XML 文档的编程接口。</p>\n<p>每个节点都有 nodeType 属性，表示该节点的类型：</p>\n<ul>\n<li>Node.ELEMENT_NODE(1)</li>\n<li>Node.ATTRIBUTE_NODE(2)</li>\n<li>Node.TEXT_NODE(3)</li>\n<li>Node.CDATA_SECTION_NODE(4)</li>\n<li>Node.ENTITY_REFERENCE_NODE(5)</li>\n<li>Node.ENTITY_NODE(6)</li>\n<li>Node.PROCESSING_INSTRUCTION_NODE(7)</li>\n<li>Node.COMMENT_NODE(8)</li>\n<li>Node.DOCUMENT_NODE(9) 文档节点</li>\n<li>Node.DOCUMENT_TYPE_NODE(10)</li>\n<li>Node.DOCUMENT_FRAGMENT_NODE(11)</li>\n<li>Node.NOTATION_NODE(12)</li>\n</ul>\n<p><code>nodeName</code> 与 <code>nodeValue</code> 保存着有关节点的信息</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.<span class=\"property\">nodeType</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  value = someNode.<span class=\"property\">nodeName</span>; <span class=\"comment\">// 会显示元素的标签名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点属性和方法\"><a href=\"#节点属性和方法\" class=\"headerlink\" title=\"节点属性和方法\"></a>节点属性和方法</h3><ul>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>hasChildNodes()</li>\n<li>appendChild()</li>\n<li>insertBefore()</li>\n<li>replaceChild()</li>\n<li>removeChild()</li>\n<li>cloneNode()</li>\n</ul>\n<h3 id=\"MutationObserver-接口\"><a href=\"#MutationObserver-接口\" class=\"headerlink\" title=\"MutationObserver 接口\"></a>MutationObserver 接口</h3><p>不久前添加到 DOM 规范中的 MutationObserver 接口，可以在 DOM 被修改时异步执行回调。使 用 MutationObserver 可以观察整个文档、DOM 树的一部分，或某个元素。此外还可以观察元素属性、子节点、文本，或者前三者任意组合的变化。</p>\n<h3 id=\"小结-13\"><a href=\"#小结-13\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>文档对象模型(DOM，Document Object Model)是语言中立的 HTML 和 XML 文档的 API。DOM Level 1 将 HTML 和 XML 文档定义为一个节点的多层级结构，并暴露出 JavaScript 接口以操作文档的底 层结构和外观。</p>\n<p>DOM 由一系列节点类型构成，主要包括以下几种。</p>\n<ul>\n<li>Node 是基准节点类型，是文档一个部分的抽象表示，所有其他类型都继承 Node。</li>\n<li>Document 类型表示整个文档，对应树形结构的根节点。在 JavaScript 中，document 对象是 Document 的实例，拥有查询和获取节点的很多方法。</li>\n<li>Element 节点表示文档中所有 HTML 或 XML 元素，可以用来操作它们的内容和属性。</li>\n<li>其他节点类型分别表示文本内容、注释、文档类型、CDATA 区块和文档片段。</li>\n</ul>\n<p>DOM 编程在多数情况下没什么问题，在涉及 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 元素时会有一点兼容性问题。因为这些元素分别包含脚本和样式信息，所以浏览器会将它们与其他元素区别对待。</p>\n<p>要理解 DOM，最关键的一点是知道影响其性能的问题所在。DOM 操作在 JavaScript 代码中是代价 比较高的，NodeList 对象尤其需要注意。NodeList 对象是“实时更新”的，这意味着每次访问它都会执行一次新的查询。考虑到这些问题，实践中要尽量减少 DOM 操作的数量。</p>\n<p><strong>MutationObserver</strong> 是为代替性能不好的 <strong>MutationEvent</strong> 而问世的。使用它可以有效精准地监控 DOM 变化，而且 API 也相对简单。</p>\n<h2 id=\"第十五章-DOM-扩展\"><a href=\"#第十五章-DOM-扩展\" class=\"headerlink\" title=\"第十五章 DOM 扩展\"></a>第十五章 DOM 扩展</h2><h3 id=\"Selectors-API\"><a href=\"#Selectors-API\" class=\"headerlink\" title=\"Selectors API\"></a>Selectors API</h3><ul>\n<li><code>querySelector()</code> 方法接收 CSS 选择符参数，返回匹配该模式的第一个后代元素，如果没有匹配 项则返回 null。</li>\n<li><code>querySelectorAll()</code> 方法跟 querySelector()一样，也接收一个用于查询的参数，但它会返回 所有匹配的节点，而不止一个。这个方法返回的是一个 NodeList 的静态实例。</li>\n<li><code>matches()</code> 方法(在规范草案中称为 matchesSelector())接收一个 CSS 选择符参数，如果元素 匹配则该选择符返回 true，否则返回 false。</li>\n</ul>\n<h3 id=\"Element-Traversal\"><a href=\"#Element-Traversal\" class=\"headerlink\" title=\"Element Traversal\"></a>Element Traversal</h3><p>Element Traversal API 为 DOM 元素添加了 5 个属性:</p>\n<ul>\n<li><code>childElementCount</code>，返回子元素数量(不包含文本节点和注释)</li>\n<li><code>firstElementChild</code>，指向第一个 Element 类型的子元素(Element 版 firstChild)</li>\n<li><code>lastElementChild</code>，指向最后一个 Element 类型的子元素(Element 版 lastChild)</li>\n<li><code>previousElementSibling</code>， 指 向 前 一 个 Element 类 型 的 同 胞 元 素 (Element 版 previousSibling)</li>\n<li><code>nextElementSibling</code>，指向后一个 Element 类型的同胞元素(Element 版 nextSibling)</li>\n</ul>\n<h3 id=\"CSS-类扩展\"><a href=\"#CSS-类扩展\" class=\"headerlink\" title=\"CSS 类扩展\"></a>CSS 类扩展</h3><ul>\n<li><code>getElementsByClassName()</code></li>\n<li>classList 属性</li>\n</ul>\n<h3 id=\"HTMLDocument-扩展\"><a href=\"#HTMLDocument-扩展\" class=\"headerlink\" title=\"HTMLDocument 扩展\"></a>HTMLDocument 扩展</h3><p><code>readyState</code> 属性，document.readyState 属性有两个可能的值:</p>\n<ul>\n<li>loading，表示文档正在加载。</li>\n<li>complete，表示文档加载完成。</li>\n</ul>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><ul>\n<li><code>innerHTML</code> 在读取 innerHTML 属性时，会返回元素所有后代的 HTML 字符串，包括元素、注释和文本节点。 而在写入 innerHTML 时，则会根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点。</li>\n<li><code>outerHTML</code> 读取 outerHTML 属性时，会返回调用它的元素(及所有后代元素)的 HTML 字符串。在写入 outerHTML 属性时，调用它的元素会被传入的 HTML 字符串经解释之后生成的 DOM 子树取代。</li>\n<li><code>insertAdjacentHTML()</code> 与 <code>insertAdjacentText()</code></li>\n<li><strong>scrollIntoView()</strong> 方法存在于所有 HTML 元素上，可以滚动浏览器窗口或容器元素以便包含元素进入视口。</li>\n</ul>\n<h3 id=\"小结-14\"><a href=\"#小结-14\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>虽然 DOM 规定了与 XML 和 HTML 文档交互的核心 API，但其他几个规范也定义了对 DOM 的扩展。很多扩展都基于之前的已成为事实标准的专有特性标准化而来。本章主要介绍了以下 3 个规范。</p>\n<ul>\n<li><strong>Selectors API</strong> 为基于 CSS 选择符获取 DOM 元素定义了几个方法:<code>querySelector()</code>、 <code>querySelectorAll()</code>和 <code>matches()</code>。</li>\n<li><strong>Element Traversal</strong> 在 DOM 元素上定义了额外的属性，以方便对 DOM 元素进行遍历。这个需求 是因浏览器处理元素间空格的差异而产生的。</li>\n<li><strong>HTML5</strong> 为标准 DOM 提供了大量扩展。其中包括对 innerHTML 属性等事实标准进行了标准化， 还有焦点管理、字符集、滚动等特性。</li>\n</ul>\n<p>DOM 扩展的数量总体还不大，但随着 Web 技术的发展一定会越来越多。浏览器仍然没有停止对专 有扩展的探索，如果出现成功的扩展，那么就可能成为事实标准，或者最终被整合到未来的标准中。</p>\n<h2 id=\"第十六章-DOM2-和-DOM3\"><a href=\"#第十六章-DOM2-和-DOM3\" class=\"headerlink\" title=\"第十六章 DOM2 和 DOM3\"></a>第十六章 DOM2 和 DOM3</h2><h3 id=\"小结-15\"><a href=\"#小结-15\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>DOM2 规范定义了一些模块，用来丰富 DOM1 的功能。DOM2 Core 在一些类型上增加了与 XML 命名空间有关的新方法。这些变化只有在使用 XML 或 XHTML 文档时才会用到，在 HTML 文档中则没 有用处。DOM2 增加的与 XML 命名空间无关的方法涉及以编程方式创建 Document 和 DocumentType 类型的新实例。</p>\n<p>DOM2 Style 模块定义了如何操作元素的样式信息。</p>\n<ul>\n<li>每个元素都有一个关联的 style 对象，可用于确定和修改元素特定的样式。</li>\n<li>要确定元素的计算样式，包括应用到元素身上的所有 CSS 规则，可以使用 <code>getComputedStyle()</code> 方法。</li>\n<li>通过 <code>document.styleSheets</code> 集合可以访问文档上所有的样式表。</li>\n</ul>\n<p>DOM2 Traversal and Range 模块定义了与 DOM 结构交互的不同方式。</p>\n<ul>\n<li>NodeIterator 和 TreeWalker 可以对 DOM 树执行深度优先的遍历。</li>\n<li>NodeIterator 接口很简单，每次只能向前和向后移动一步。TreeWalker 除了支持同样的行为，还支持在 DOM 结构的所有方向移动，包括父节点、同胞节点和子节点。</li>\n<li>范围是选择 DOM 结构中特定部分并且进行操作的一种方式。</li>\n<li>通过范围的选区可以在保持文档结构完好的同时从文档中移除内容，也可复制文档中相应的部分。</li>\n</ul>\n<h2 id=\"第十七章-事件\"><a href=\"#第十七章-事件\" class=\"headerlink\" title=\"第十七章 事件\"></a>第十七章 事件</h2><h3 id=\"小结-16\"><a href=\"#小结-16\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>事件是 JavaScript 与网页结合的主要方式。最常见的事件是在 DOM3 Events 规范或 HTML5 中定义 的。虽然基本的事件都有规范定义，但很多浏览器在规范之外实现了自己专有的事件，以方便开发者更 好地满足用户交互需求，其中一些专有事件直接与特殊的设备相关。</p>\n<p>围绕着使用事件，需要考虑内存与性能问题。例如:</p>\n<ul>\n<li>最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢;</li>\n<li>利用事件冒泡，事件委托可以解决限制事件处理程序数量的问题;</li>\n<li>最好在页面卸载之前删除所有事件处理程序。</li>\n</ul>\n<p>使用 JavaScript 也可以在浏览器中模拟事件。DOM2 Events 和 DOM3 Events 规范提供了模拟方法，可以模拟所有原生 DOM 事件。键盘事件一定程度上也是可以模拟的，有时候需要组合其他技术。IE8 及更早版本也支持事件模拟，只是接口与 DOM 方式不同。</p>\n<p>事件是 JavaScript 中最重要的主题之一，理解事件的原理及其对性能的影响非常重要。</p>\n<h2 id=\"第十八章-动画与-Canvas-图形\"><a href=\"#第十八章-动画与-Canvas-图形\" class=\"headerlink\" title=\"第十八章 动画与 Canvas 图形\"></a>第十八章 动画与 Canvas 图形</h2><h3 id=\"使用-requsetAnimationFrame-节流\"><a href=\"#使用-requsetAnimationFrame-节流\" class=\"headerlink\" title=\"使用 requsetAnimationFrame() 节流\"></a>使用 requsetAnimationFrame() 节流</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">expensiveOperation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;do&quot;</span>, <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;scroll&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (enabled) &#123;</span><br><span class=\"line\">    enabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestanimationframe</span>(expensiveOperation);</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-17\"><a href=\"#小结-17\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>requestAnimationFrame</code> 是简单但实用的工具，可以让 JavaScript 跟进浏览器渲染周期，从而更 加有效地实现网页视觉动效。</p>\n<p>HTML5 的 <code>&lt;canvas&gt;</code> 元素为 JavaScript 提供了动态创建图形的 API。这些图形需要使用特定上下文 绘制，主要有两种。第一种是支持基本绘图操作的 2D 上下文:</p>\n<ul>\n<li>填充和描绘颜色及图案</li>\n<li>绘制矩形</li>\n<li>绘制路径</li>\n<li>绘制文本</li>\n<li>创建渐变和图案</li>\n</ul>\n<p>第二种是 3D 上下文，也就是 WebGL。WebGL 是浏览器对 OpenGL ES 2.0 的实现。OpenGL ES 2.0 是游戏图形开发常用的一个标准。WebGL 支持比 2D 上下文更强大的绘图能力，包括:</p>\n<ul>\n<li>用 OpenGL 着色器语言(GLSL)编写顶点和片段着色器;</li>\n<li>支持定型数组，限定数组中包含数值的类型;</li>\n<li>创建和操作纹理。 目前所有主流浏览器的较新版本都已经支持<code>&lt;canvas&gt;</code>标签。</li>\n</ul>\n<h2 id=\"第十九章-表单脚本\"><a href=\"#第十九章-表单脚本\" class=\"headerlink\" title=\"第十九章 表单脚本\"></a>第十九章 表单脚本</h2><h3 id=\"小结-18\"><a href=\"#小结-18\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>尽管 HTML 和 Web 应用自诞生以来已经发生了天翻地覆的变化，但 Web 表单几乎从来没有变过。 JavaScript 可以增加现有的表单字段以提供新功能或增强易用性。为此，表单字段也暴露了属性、方法 和事件供 JavaScript 使用。以下是本章介绍的一些概念。</p>\n<ul>\n<li>可以使用标准或非标准的方法全部或部分选择文本框中的文本。</li>\n<li>所有浏览器都采用了 Firefox 操作文本选区的方式，使其成为真正的标准。</li>\n<li>可以通过监听键盘事件并检测要插入的字符来控制文本框接受或不接受某些字符。</li>\n</ul>\n<p>所有浏览器都支持剪贴板相关的事件，包括 copy、cut 和 paste。剪贴板事件在不同浏览器中的实现有很大差异。</p>\n<p>在文本框只限某些字符时，可以利用剪贴板事件屏幕粘贴事件。</p>\n<p>选择框也是经常使用 JavaScript 来控制的一种表单控件。借助 DOM，操作选择框比以前方便了很多。</p>\n<p>使用标准的 DOM 技术，可以为选择框添加或移除选项，也可以将选项从一个选择框移动到另一个选择 框，或者重排选项。</p>\n<p>富文本编辑通常以使用包含空白 HTML 文档的内嵌窗格来处理。通过将文档的 designMode 属性设 置为“on”，可以让整个页面变成编辑区，就像文字处理软件一样。另外，给元素添加 contenteditable 属性也可以将元素转换为可编辑区。默认情况下，可以切换文本的粗体、斜体样式，也可以使用剪贴板功 能。JavaScript 通过 execCommand()方法可以执行一些富文本编辑功能，通过 queryCommandEnabled()、 queryCommandState()和 queryCommandValue()方法则可以获取有关文本选区的信息。由于富文本编 辑区不涉及表单字段，因此要将富文本内容提交到服务器，必须把 HTML 从 iframe 或 contenteditable 元素中复制到一个表单字段。</p>\n<h2 id=\"第二十章-Javascript-API\"><a href=\"#第二十章-Javascript-API\" class=\"headerlink\" title=\"第二十章 Javascript API\"></a>第二十章 Javascript API</h2><h3 id=\"小结-19\"><a href=\"#小结-19\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>除了定义新标签，HTML5 还定义了一些 JavaScript API。这些 API 可以为开发者提供更便捷的 Web 接口，暴露堪比桌面应用的能力。本章主要介绍了以下 API。</p>\n<ul>\n<li>Atomics API 用于保护代码在多线程内存访问模式下不发生资源争用。</li>\n<li>postMessage() API 支持从不同源跨文档发送消息，同时保证安全和遵循同源策略。</li>\n<li>Encoding API 用于实现字符串与缓冲区之间的无缝转换(越来越常见的操作)。</li>\n<li>File API 提供了发送、接收和读取大型二进制对象的可靠工具。</li>\n<li>媒体元素<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>拥有自己的 API，用于操作音频和视频。并不是每个浏览器都会支持所有媒体格式，使用 canPlayType()方法可以检测浏览器支持情况。</li>\n<li>拖放 API 支持方便地将元素标识为可拖动，并在操作系统完成放置时给出回应。可以利用它创建自定义可拖动元素和放置目标。</li>\n<li>Notifications API 提供了一种浏览器中立的方式，以此向用户展示消通知弹层。</li>\n<li>Streams API 支持以全新的方式读取、写入和处理数据。</li>\n<li>Timing API 提供了一组度量数据进出浏览器时间的可靠工具。</li>\n<li>Web Components API 为元素重用和封装技术向前迈进提供了有力支撑。</li>\n<li>Web Cryptography API 让生成随机数、加密和签名消息成为一类特性。</li>\n</ul>\n<h2 id=\"第二十一章-错误处理与调试\"><a href=\"#第二十一章-错误处理与调试\" class=\"headerlink\" title=\"第二十一章 错误处理与调试\"></a>第二十一章 错误处理与调试</h2><h3 id=\"小结-20\"><a href=\"#小结-20\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>对于今天复杂的 Web 应用程序而言，JavaScript 中的错误处理十分重要。未能预测什么时候会发生 错误以及如何从错误中恢复，会导致糟糕的用户体验，甚至造成用户流失。大多数浏览器默认不向用户 报告 JavaScript 错误，因此在开发和调试时需要自己实现错误报告。不过在生产环境中，不应该以这种 方式报告错误。</p>\n<p>下列方法可用于阻止浏览器对 JavaScript 错误作出反应。</p>\n<ul>\n<li>使用 try&#x2F;catch 语句，可以通过更合适的方式对错误做出处理，避免浏览器处理。</li>\n<li>定义 window.onerror 事件处理程序，所有没有通过 try&#x2F;catch 处理的错误都会被该事件处理程序接收到(仅限 IE、Firefox 和 Chrome)。</li>\n</ul>\n<p>开发 Web 应用程序时，应该认真考虑可能发生的错误，以及如何处理这些错误。</p>\n<ul>\n<li>首先，应该分清哪些算重大错误，哪些不算重大错误。</li>\n<li>然后，要通过分析代码预测很可能发生哪些错误。由于以下因素，JavaScript 中经常出现错误:<ul>\n<li>类型转换;</li>\n<li>数据类型检测不足;</li>\n<li>向服务器发送错误数据或从服务器接收到错误数据。</li>\n</ul>\n</li>\n</ul>\n<p>IE、Firefox、Chrome、Opera 和 Safari 都有 JavaScript 调试器，有的内置在浏览器中，有的是作为扩 展，需另行下载。所有调试器都能够设置断点、控制代码执行和在运行时检查变量值。</p>\n<h2 id=\"第二十二章-处理-XML\"><a href=\"#第二十二章-处理-XML\" class=\"headerlink\" title=\"第二十二章 处理 XML\"></a>第二十二章 处理 XML</h2><h3 id=\"小结-21\"><a href=\"#小结-21\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>浏览器对使用 JavaScript 处理 XML 实现及相关技术相当支持。然而，由于早期缺少规范，常用的功能出现了不同实现。DOM Level 2 提供了创建空 XML 文档的 API，但不能解析和序列化。浏览器为解析和序列化 XML 实现了两个新类型。</p>\n<ul>\n<li>DOMParser 类型是简单的对象，可以将 XML 字符串解析为 DOM 文档。</li>\n<li>XMLSerializer 类型执行相反操作，将 DOM 文档序列化为 XML 字符串。 基于所有主流浏览器的实现，DOM Level 3 新增了针对 XPath API 的规范。该 API 可以让 JavaScript 针对 DOM 文档执行任何 XPath 查询并得到不同数据类型的结果。</li>\n</ul>\n<p>最后一个与 XML 相关的技术是 XSLT，目前并没有规范定义其 API。Firefox 最早增加了 XSLTProcessor 类型用于通过 JavaScript 处理转换。</p>\n<h2 id=\"第二十三章-JSON\"><a href=\"#第二十三章-JSON\" class=\"headerlink\" title=\"第二十三章 JSON\"></a>第二十三章 JSON</h2><h3 id=\"小结-22\"><a href=\"#小结-22\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JSON 是一种轻量级数据格式，可以方便地表示复杂数据结构。这个格式使用 JavaScript 语法的一个 子集表示对象、数组、字符串、数值、布尔值和 null。虽然 XML 也能胜任同样的角色，但 JSON 更简 洁，JavaScript 支持也更好。更重要的是，所有浏览器都已经原生支持全局 JSON 对象。</p>\n<p>ECMAScript 5 定义了原生 JSON 对象，用于将 JavaScript 对象序列化为 JSON 字符串，以及将 JSON 数组解析为 JavaScript 对象。JSON.stringify()和 JSON.parse()方法分别用于实现这两种操作。这 两个方法都有一些选项可以用来改变默认的行为，以实现过滤或修改流程。</p>\n<h2 id=\"第二十四章-网络请求与远程资源\"><a href=\"#第二十四章-网络请求与远程资源\" class=\"headerlink\" title=\"第二十四章 网络请求与远程资源\"></a>第二十四章 网络请求与远程资源</h2><p>XMLHttpRequest 对象的 API 被普遍认为比较难用，而 Fetch API 自从诞生以后就迅速成为了 XHR 更现代的替代 标准。Fetch API 支持期约(promise)和服务线程(service worker)，已经成为极其强大的 Web 开发工具。</p>\n<h3 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h3><p>IE5 是第一个引入 XHR 对象的浏览器。这个对象是通过 ActiveX 对象实现并包含在 MSXML 库中 的。为此，XHR 对象的 3 个版本在浏览器中分别被暴露为 MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MXSML2.XMLHttp.6.0。</p>\n<p>所有现代浏览器都通过 XMLHttpRequest 构造函数原生支持 XHR 对象:</p>\n<p>let xhr &#x3D; new XMLHttpRequest();</p>\n<h3 id=\"HTTP-头部\"><a href=\"#HTTP-头部\" class=\"headerlink\" title=\"HTTP 头部\"></a>HTTP 头部</h3><ul>\n<li>Accept:浏览器可以处理的内容类型。</li>\n<li>Accept-Charset:浏览器可以显示的字符集。</li>\n<li>Accept-Encoding:浏览器可以处理的压缩编码类型。</li>\n<li>Accept-Language:浏览器可以使用的语言。</li>\n<li>Authorization:HTTP 认证信息。</li>\n<li>Connection:浏览器与服务器的连接类型。</li>\n<li>Cookie:页面中设置的 Cookie。</li>\n<li>Host:发送请求的页面所在的域。</li>\n<li>Referer:发送请求的页面的 URI。<strong>注意，这个字段在 HTTP 规范中就拼错了</strong>，所以考虑到兼容性也必须将错就错。(正确的拼写应该是 Referrer。)</li>\n<li>User-Agent:浏览器的用户代理字符串。</li>\n</ul>\n<p>如果需要发送额外的请求头部，可以使用 setRequestHeader()方法。服务器通过读取自定义头部可以确定适当的操作。自定义头部一定要区别于浏览器正常发送的头部， 否则可能影响服务器正常响应。有些浏览器允许重写默认头部，有些浏览器则不允许。</p>\n<h3 id=\"GET-和-POST-请求\"><a href=\"#GET-和-POST-请求\" class=\"headerlink\" title=\"GET 和 POST 请求\"></a>GET 和 POST 请求</h3><p>最常用的请求方法是 GET 请求，用于向服务器查询某些信息。查询字符串中的每个名和值都必须使用 encodeURIComponent()编码，所有名&#x2F;值对必须以和号(&amp;)分隔。</p>\n<p>第二个最常用的请求是 POST 请求，用于向服务器发送应该保存的数据。每个 POST 请求都应该在 请求体中携带提交的数据，而 GET 请求则不然。POST 请求的请求体可以包含非常多的数据，而且数据 可以是任意格式。</p>\n<p>默认情况下，对服务器而言，POST 请求与提交表单是不一样的。服务器逻辑需要读取原始 POST 数据才能取得浏览器发送的数据。不过，可以使用 XHR 模拟表单提交。为此，第一步需要把 <code>Content- Type</code> 头部设置为<code>&quot;application/x-www-formurlencoded&quot;</code>，这是提交表单时使用的内容类型。第二步是创建对应格式的字符串。POST 数据此时使用与查询字符串相同的格式。</p>\n<p>POST 请求相比 GET 请求要占用更多资源。从性能方面说，<strong>发送相同数量的数据， GET 请求比 POST 请求要快两倍。</strong></p>\n<h3 id=\"XMLHttpRequest-Level-2\"><a href=\"#XMLHttpRequest-Level-2\" class=\"headerlink\" title=\"XMLHttpRequest Level 2\"></a>XMLHttpRequest Level 2</h3><p>XMLHttpRequest Level 2 又进一步发展了 XHR 对象。并非所有浏览器都实现了 XMLHttpRequest Level 2 的所有部分，但所有浏览器都实现了其中部分功能。</p>\n<p><strong>1. FormData 类型</strong></p>\n<p>现代 Web 应用程序中经常需要对表单数据进行序列化，因此 XMLHttpRequest Level 2 新增了 FormData 类型。FormData 类型便于表单序列化，也便于创建与表单类似格式的数据然后通过 XHR 发送。下面的代码创建了一个 FormData 对象，并填充了一些数据:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span>) || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;postexample.php&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;user-info&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>(form));</span><br></pre></td></tr></table></figure>\n\n<p>使用 FormData 的另一个方便之处是不再需要给 XHR 对象显式设置任何请求头部了。XHR 对象能 够识别作为 FormData 实例传入的数据类型并自动配置相应的头部。</p>\n<p><strong>2. 超时</strong></p>\n<p>IE8 给 XHR 对象增加了一个 timeout 属性，用于表示发送请求后等待多少毫秒，如果响应不成功 就中断请求。之后所有浏览器都在自己的 XHR 实现中增加了这个属性。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">timeout</span> = <span class=\"number\">1000</span>; <span class=\"comment\">// 设置 1 秒超时</span></span><br><span class=\"line\">xhr.<span class=\"property\">ontimeout</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Request did not return in a second.&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. overrideMimeType()方法</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;text.php&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">overrideMimeType</span>(<span class=\"string\">&quot;text/xml&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子强制让 XHR 把响应当成 XML 而不是纯文本来处理。为了正确覆盖响应的 MIME 类型， 必须在调用 send()之前调用 overrideMimeType()。</p>\n<h3 id=\"进度事件\"><a href=\"#进度事件\" class=\"headerlink\" title=\"进度事件\"></a>进度事件</h3><p>Progress Events 是 W3C 的工作草案，定义了客户端-服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。</p>\n<ul>\n<li>loadstart:在接收到响应的第一个字节时触发。</li>\n<li>progress:在接收响应期间反复触发。</li>\n<li>error:在请求出错时触发。</li>\n<li>abort:在调用 abort()终止连接时触发。</li>\n<li>load:在成功接收完响应时触发。</li>\n<li>loadend:在通信完成时，且在 error、abort 或 load 之后触发。</li>\n</ul>\n<p>每次请求都会首先触发 loadstart 事件，之后是一个或多个 progress 事件，接着是 error、abort 或 load 中的一个，最后以 loadend 事件结束。</p>\n<h3 id=\"跨源资源共享\"><a href=\"#跨源资源共享\" class=\"headerlink\" title=\"跨源资源共享\"></a>跨源资源共享</h3><p>CORS 背后的基本思路就是使用自定义的 HTTP 头部允许浏览器和服务器相互了解，以确实请求或响应 应该成功还是失败。</p>\n<p>对于简单的请求，比如 GET 或 POST 请求，没有自定义头部，而且请求体是 text&#x2F;plain 类型， 这样的请求在发送时会有一个额外的头部叫 <strong>Origin。</strong> Origin 头部包含发送请求的页面的源(协议、 域名和端口)，以便服务器确定是否为其提供响应。</p>\n<p><code>Origin: http://www.nczonline.net</code></p>\n<p>如果服务器决定响应请求，那么应该发送 Access-Control-Allow-Origin 头部</p>\n<p><code>Access-Control-Allow-Origin: http://www.nczonline.net</code></p>\n<p>如果没有这个头部，或者有但源不匹配，则表明不会响应浏览器请求。否则，服务器就会处理这个 请求。注意，无论请求还是响应都不会包含 cookie 信息。现代浏览器通过 XMLHttpRequest 对象原生支持 CORS。在尝试访问不同源的资源时，这个行为 会被自动触发。</p>\n<p>出于安全考虑，跨域 XHR 对象也施加了一些额外限制。</p>\n<ul>\n<li>不能使用 setRequestHeader()设置自定义头部。</li>\n<li>不能发送和接收 cookie。</li>\n<li>getAllResponseHeaders()方法始终返回空字符串。</li>\n</ul>\n<h3 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h3><p>CORS 通过一种叫预检请求(preflighted request)的服务器验证机制，允许使用自定义头部、除 GET 和 POST 之外的方法，以及不同请求体内容类型。</p>\n<p>客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Origin: http://www.nczonline.net</span><br><span class=\"line\">Access-Control-Request-Method: POST //请求希望使用的方法。</span><br><span class=\"line\">Access-Control-Request-Headers: NCZ //(可选)要使用的逗号分隔的自定义头部列表。</span><br></pre></td></tr></table></figure>\n\n<p>服务端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://www.nczonline.net //与简单请求相同。</span><br><span class=\"line\">Access-Control-Allow-Methods: POST, GET //允许的方法(逗号分隔的列表)。</span><br><span class=\"line\">Access-Control-Allow-Headers: NCZ //服务器允许的头部(逗号分隔的列表)</span><br><span class=\"line\">Access-Control-Max-Age: 1728000 //缓存预检请求的秒数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"凭据请求\"><a href=\"#凭据请求\" class=\"headerlink\" title=\"凭据请求\"></a>凭据请求</h3><p>默认情况下，跨源请求不提供凭据(cookie、HTTP 认证和客户端 SSL 证书)。</p>\n<p>客户端</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withCredentials：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替代性跨源技术\"><a href=\"#替代性跨源技术\" class=\"headerlink\" title=\"替代性跨源技术\"></a>替代性跨源技术</h3><h3 id=\"图片探测\"><a href=\"#图片探测\" class=\"headerlink\" title=\"图片探测\"></a>图片探测</h3><p>这种动态创建图片的技术经常用于图片探测(image pings)。图片探测是与服务器之间简单、跨域、单向的通信。数据通过查询字符串发送，响应可以随意设置，不过一般是位图图片或值为 204 的状态码。 浏览器通过图片探测拿不到任何数据，但可以通过监听 onload 和 onerror 事件知道什么时候能接收 到响应。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">img.<span class=\"property\">onload</span> = img.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&quot;http://www.example.com/test?name=Nicholas&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>图片探测频繁用于跟踪用户在页面上的点击操作或动态显示广告。当然，图片探测的缺点是只能发送 GET 请求和无法获取服务器响应的内容。这也是只能利用图片探测实现浏览器与服务器单向通信的原因。</p>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP 是“JSON with padding”的简写，是在 Web 服务上流行的一种 JSON 变体。</p>\n<p>SONP 调用是通过动态创建 <code>&lt;script&gt;</code> 元素并为 src 属性指定跨域 URL 实现的。</p>\n<p>只能发送 get 请求，缺点是不好确定 JSONP 请求是否失败。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleResponse</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          You&#x27;re at IP address <span class=\"subst\">$&#123;response.ip&#125;</span>, which is in</span></span><br><span class=\"line\"><span class=\"string\">          <span class=\"subst\">$&#123;response.city&#125;</span>, <span class=\"subst\">$&#123;response.region_name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">script.<span class=\"property\">src</span> = <span class=\"string\">&quot;http://freegeoip.net/json/?callback=handleResponse&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">insertBefore</span>(script, <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">firstChild</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h3><p>Fetch API 能够执行 XMLHttpRequest 对象的所有任务，但更容易使用，接口也更现代化，能够在 Web 工作线程等现代 Web 工具中使用。XMLHttpRequest 可以选择异步，而 Fetch API 则必须是异步。Fetch API 是 WHATWG 的一个“活标准”(living standard)，用规范原文说，就是“Fetch 标准定义请求、响应，以及绑定二者的流程:**获取(fetch)**”。</p>\n<p>Fetch API 本身是使用 JavaScript 请求资源的优秀工具，同时这个 API 也能够应用在服务线程 (service worker)中，提供拦截、重定向和修改通过 fetch()生成的请求接口。</p>\n<h3 id=\"中断请求\"><a href=\"#中断请求\" class=\"headerlink\" title=\"中断请求\"></a>中断请求</h3><p>Fetch API 支持通过 AbortController&#x2F;AbortSignal 对中断请求。调用 AbortController. abort()会中断所有网络传输，特别适合希望停止传输大型负载的情况。中断进行中的 fetch() 请求会导致包含错误的拒绝。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> abortController = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>();</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;wikipedia.zip&#x27;</span>, &#123; <span class=\"attr\">signal</span>: abortController.<span class=\"property\">signal</span> &#125;) .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aborted!&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 10 毫秒后中断请求</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> abortController.<span class=\"title function_\">abort</span>(), <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// 已经中断</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h3><p>Web Socket(套接字)的目标是通过一个长时连接实现与服务器全双工、双向的通信。在 JavaScript 中创建 Web Socket 时，一个 HTTP 请求会发送到服务器以初始化连接。服务器响应后，连接使用 HTTP 25 的 Upgrade 头部从 HTTP 协议切换到 Web Socket 协议。这意味着 Web Socket 不能通过标准 HTTP 服务 器实现，而必须使用支持该协议的专有服务器。</p>\n<p>因为 Web Socket 使用了自定义协议，所以 URL 方案(scheme)稍有变化:不能再使用 <code>http://</code> 或 <code>https://</code>， 而要使用 <code>ws://</code> 和 <code>wss://</code>。前者是不安全的连接，后者是安全连接。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>需要验证请求发送者拥有对资源的访问权限。可以通过如下方式实现。</p>\n<ul>\n<li>要求通过 SSL 访问能够被 Ajax 访问的资源。</li>\n<li>要求每个请求都发送一个按约定算法计算好的令牌(token)。</li>\n</ul>\n<p>以下手段对防护 CSRF 攻击是无效的。</p>\n<ul>\n<li>要求 POST 而非 GET 请求(很容易修改请求方法)。</li>\n<li>使用来源 URL 验证来源(来源 URL 很容易伪造)。</li>\n<li>基于 cookie 验证(同样很容易伪造)。</li>\n</ul>\n<h3 id=\"小结-23\"><a href=\"#小结-23\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Ajax 是无须刷新当前页面即可从服务器获取数据的一个方法，具有如下特点。</p>\n<ul>\n<li>让 Ajax 迅速流行的中心对象是 <strong><code>XMLHttpRequest(XHR)</code>。</strong></li>\n<li>这个对象最早由微软发明，并在 IE5 中作为通过 JavaScript 从服务器获取 XML 数据的一种手段。</li>\n<li>之后，Firefox、Safari、Chrome 和 Opera 都复刻了相同的实现。W3C 随后将 XHR 行为写入 Web 标准。</li>\n<li>虽然不同浏览器的实现有些差异，但 XHR 对象的基本使用在所有浏览器中相对是规范的，因此可以放心地在 Web 应用程序中使用。</li>\n</ul>\n<p>XHR 的一个主要限制是同源策略，即通信只能在相同域名、相同端口和相同协议的前提下完成。</p>\n<p>访问超出这些限制之外的资源会导致安全错误，除非使用了正式的跨域方案。这个方案叫作跨源资源共享(CORS，Cross-Origin Resource Sharing)，XHR 对象原生支持 CORS。图片探测和 JSONP 是另外两种 跨域通信技术，但没有 CORS 可靠。 Fetch API 是作为对 XHR 对象的一种端到端的替代方案而提出的。这个 API 提供了优秀的基于期约 的结构、更直观的接口，以及对 Stream API 的最好支持。</p>\n<p><strong>Web Socket</strong> 是与服务器的全双工、双向通信渠道。与其他方案不同，Web Socket 不使用 HTTP，而 使用了自定义协议，目的是更快地发送小数据块。这需要专用的服务器，但速度优势明显。</p>\n<h2 id=\"第二十五章-客户端存储\"><a href=\"#第二十五章-客户端存储\" class=\"headerlink\" title=\"第二十五章 客户端存储\"></a>第二十五章 客户端存储</h2><p>Progress Events 是 W3C 的工作草案，定义了客户端  服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。</p>\n<h3 id=\"小结-24\"><a href=\"#小结-24\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Web Storage 定义了两个对象用于存储数据:sessionStorage 和 localStorage。前者用于严格 保存浏览器一次会话期间的数据，因为数据会在浏览器关闭时被删除。后者用于会话之外持久保存数据。</p>\n<p>IndexedDB 是类似于 SQL 数据库的结构化数据存储机制。不同的是，IndexedDB 存储的是对象，而 不是数据表。对象存储是通过定义键然后添加数据来创建的。游标用于查询对象存储中的特定数据，而 索引可以针对特定属性实现更快的查询。</p>\n<p>有了这些存储手段，就可以在客户端通过使用 JavaScript 存储可观的数据。因为这些数据没有加密， 所以要注意不能使用它们存储敏感信息。</p>\n<h2 id=\"第二十六章-模块\"><a href=\"#第二十六章-模块\" class=\"headerlink\" title=\"第二十六章 模块\"></a>第二十六章 模块</h2><h3 id=\"小结-25\"><a href=\"#小结-25\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>模块模式是管理复杂性的永恒工具。开发者可以通过它创建逻辑彼此独立的代码段，在这些代码段之间声明依赖，并将它们连接在一起。此外，这种模式也是经证明能够优雅扩展到任意复杂度且跨平台 方案。</p>\n<p>多年以来，CommonJS 和 AMD 这两个分别针对服务器端环境和受延迟限制的客户端环境的模块系统长期分裂。两个系统都获得了爆炸性增强，但为它们编写的代码则在很多方面不一致，经常也会带有冗余的样板代码。而且，这两个系统都没有在浏览器中实现。缺乏兼容导致出现了相关工具，从而让在浏览器中实现模块模式成为可能。</p>\n<p>ECMAScript 6 规范重新定义了浏览器模块，集之前两个系统之长于一身，并通过更简单的声明性语法暴露出来。浏览器对原生模块的支持越来越好，但也提供了稳健的工具以实现从不支持到支持 ES6 模块的过渡。</p>\n<h2 id=\"第二十七章-工作者线程\"><a href=\"#第二十七章-工作者线程\" class=\"headerlink\" title=\"第二十七章 工作者线程\"></a>第二十七章 工作者线程</h2><h3 id=\"小结-26\"><a href=\"#小结-26\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>工作者线程可以运行异步 JavaScript 而不阻塞用户界面。这非常适合复杂计算和数据处理，特别是 需要花较长时间因而会影响用户使用网页的处理任务。工作者线程有自己独立的环境，只能通过异步消 息与外界通信。</p>\n<p>工作者线程可以是专用线程、共享线程。专用线程只能由一个页面使用，而共享线程则可以由同源 的任意页面共享。</p>\n<p>服务工作者线程用于让网页模拟原生应用程序。服务工作者线程也是一种工作者线程，但它们更像 是网络代理，而非独立的浏览器线程。可以把它们看成是高度定制化的网络缓存，它们也可以在 PWA 中支持推送通知。</p>\n<h2 id=\"第二十八章-最佳实践\"><a href=\"#第二十八章-最佳实践\" class=\"headerlink\" title=\"第二十八章 最佳实践\"></a>第二十八章 最佳实践</h2><h3 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h3><p>与大多数面向对象语言不同， JavaScript 并不强迫开发者把任何东西都定义为对象。它支持任何编程风格，包括传统的面向对象编程、声明式编程，以及函数式编程。</p>\n<ol>\n<li>可读性</li>\n</ol>\n<p>以下这些地方应该写注释：</p>\n<ul>\n<li>函数和方法</li>\n<li>大型代码块</li>\n<li>复杂的算法</li>\n<li>使用黑科技</li>\n</ul>\n<ol>\n<li>变量和函数命名</li>\n</ol>\n<p>以下是关于命名的通用规则：</p>\n<ul>\n<li>变量名应该是名词，例如 car 或 person。</li>\n<li>函数名应该以动词开始，例如 getName()。</li>\n<li>返回布尔值的函数通常以 is 开头，比如 isEnabled()。</li>\n<li>对变量和函数都使用符合逻辑的名称，不用担心长度。</li>\n<li>变量、函数和方法应该以小写字母开头，使用驼峰大小写(camelCase)形式，如 getName()和 isPerson。类名应该首字母大写，如 Person、RequestFactory。常量值应该全部大写并以 下划线相接，比如 REQUEST_TIMEOUT。</li>\n<li>名称要尽量用描述性和直观的词汇，但不要过于冗长。</li>\n</ul>\n<h3 id=\"编码惯例\"><a href=\"#编码惯例\" class=\"headerlink\" title=\"编码惯例\"></a>编码惯例</h3><ol>\n<li>尊重对象所有权</li>\n<li>不声明全局变量</li>\n<li>不要比较 null</li>\n<li>使用常量</li>\n</ol>\n<h3 id=\"其他性能优化注意事项\"><a href=\"#其他性能优化注意事项\" class=\"headerlink\" title=\"其他性能优化注意事项\"></a>其他性能优化注意事项</h3><ul>\n<li>原生方法很快。如：<strong>Math 对象</strong>。</li>\n<li>switch 语句很快。</li>\n<li>位操作很快。</li>\n</ul>\n<h3 id=\"小结-27\"><a href=\"#小结-27\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>随着 JavaScript 开发日益成熟，最佳实践不断涌现。曾经的业余爱好如今也成为了正式的职业。因此，<strong>前端开发也需要像其他编程语言一样，注重可维护性、性能优化和部署。</strong></p>\n<p>为保证 JavaScript 代码的可维护性，可以参考如下编码惯例。</p>\n<ul>\n<li>其他语言的编码惯例可以作为添加注释和确定缩进的参考，但 JavaScript 作为一门适合松散类型的语言也有自己的一些特殊要求。</li>\n<li>由于 JavaScript 必须与 HTML 和 CSS 共存，因此各司其职尤为重要:JavaScript 负责定义行为， HTML 负责定义内容，而 CSS 负责定义外观。</li>\n<li>如果三者职责混淆，则可能导致难以调试的错误和可维护性问题。</li>\n</ul>\n<p>随着 Web 应用程序中 JavaScript 代码量的激增，性能也越来越重要。因此应该牢记如下这些事项。</p>\n<ul>\n<li>执行 JavaScript 所需的时间直接影响网页性能，其重要性不容忽视。</li>\n<li>很多适合 C 语言的性能优化策略同样也适合 JavaScript，包括循环展开和使用 <strong>switch</strong> 语句而不是 if 语句。</li>\n<li>另一个需要重视的方面是 DOM 交互很费时间，因此应该尽可能限制 DOM 操作的数量。</li>\n</ul>\n<p>开发 Web 应用程序的最后一步是上线部署。以下是本章讨论的相关要点。</p>\n<ul>\n<li>为辅助部署，应该建立构建流程，将 JavaScript 文件合并为较少的(最好是只有一个)文件。</li>\n<li>构建流程可以实现很多源代码处理任务的自动化。例如，可以运行 JavaScript 验证程序，确保没有语法错误和潜在的问题。</li>\n<li>压缩可以让文件在部署之前变得尽量小。</li>\n<li>启用 HTTP 压缩可以让网络传输的 JavaScript 文件尽可能小，从而提升页面的整体性能。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"重学-Javascript\"><a href=\"#重学-Javascript\" class=\"headerlink\" title=\"重学 Javascript\"></a>重学 Javascript</h1><blockquote>\n<p>Javascript 高级程序设计 + Modern JavaScript Tutorial + MDN</p>\n</blockquote>\n<p><a href=\"https://zh.javascript.info/\">现代 JavaScript 教程</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/\">MDN Web Docs</a></p>\n<h2 id=\"第一章-什么是-JavaScript\"><a href=\"#第一章-什么是-JavaScript\" class=\"headerlink\" title=\"第一章 什么是 JavaScript\"></a>第一章 什么是 JavaScript</h2><h3 id=\"javascript-的实现\"><a href=\"#javascript-的实现\" class=\"headerlink\" title=\"javascript 的实现\"></a>javascript 的实现</h3><ul>\n<li>核心 (ECMAScript)</li>\n<li>文档对象模型 (DOM)</li>\n<li>浏览器对象模型 (BOM)</li>\n</ul>\n<h3 id=\"组织分工\"><a href=\"#组织分工\" class=\"headerlink\" title=\"组织分工\"></a>组织分工</h3><p>TC39 → ECMAScript</p>\n<p>W3C → DOM</p>\n<p>浏览器厂商 → BOM</p>\n<h3 id=\"规范和手册\"><a href=\"#规范和手册\" class=\"headerlink\" title=\"规范和手册\"></a>规范和手册</h3><p>规范：ECMA-262</p>\n<p><a href=\"https://tc39.es/ecma262/\">ECMAScript® 2023 Language Specification</a></p>\n<p>手册：MDN（Mozilla）JavaScript</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\">JavaScript reference - JavaScript | MDN</a></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。</p>\n<ul>\n<li>ECMAScript:由 ECMA-262 定义并提供核心功能。</li>\n<li>文档对象模型(DOM):提供与网页内容交互的方法和接口。</li>\n<li>浏览器对象模型(BOM):提供与浏览器交互的方法和接口。</li>\n</ul>\n<p>JavaScript 的这三个部分得到了五大 Web 浏览器(IE、Firefox、Chrome、Safari 和 Opera)不同程度的支持。所有浏览器基本上对 ES5(ECMAScript 5)提供了完善的支持，而对 ES6(ECMAScript 6) 和 ES7(ECMAScript 7) 的支持度也在不断提升。这些浏览器对 DOM 的支持各不相同，但对 Level 3 的支 持日益趋于规范。HTML5 中收录的 BOM 会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性。</p>\n<h2 id=\"第二章-HTML-中的-JavaScript\"><a href=\"#第二章-HTML-中的-JavaScript\" class=\"headerlink\" title=\"第二章 HTML 中的 JavaScript\"></a>第二章 HTML 中的 JavaScript</h2><h3 id=\"lt-script-gt-标签\"><a href=\"#lt-script-gt-标签\" class=\"headerlink\" title=\"&lt;script&gt;标签\"></a><code>&lt;script&gt;</code>标签</h3><p>使用了 src 属性的 <code>&lt;script&gt;</code> 元素不应该再在 <code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签中再包含其他 JavaScript 代码。如果两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。</p>\n<h3 id=\"nomodule\"><a href=\"#nomodule\" class=\"headerlink\" title=\"nomodule\"></a>nomodule</h3><p>这个布尔属性被设置来标明这个脚本在支持  <a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">ES2015 modules</a>的浏览器中不执行。  实际上，这可用于在不支持模块化 JavaScript 的旧浏览器中提供回退脚本。</p>\n<h3 id=\"lt-noscript-gt-启用条件\"><a href=\"#lt-noscript-gt-启用条件\" class=\"headerlink\" title=\"&lt;noscript&gt;启用条件\"></a><code>&lt;noscript&gt;</code>启用条件</h3><ul>\n<li>浏览器不支持脚本</li>\n<li>浏览器对脚本的支持被关闭</li>\n</ul>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 是通过 <strong><code>&lt;script&gt;</code></strong> 元素插入到 HTML 页面中的。这个元素可用于把 JavaScript 代码嵌入到 HTML 页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的 JavaScript。本章的重点可以总结如下。</p>\n<ul>\n<li>要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li>\n<li>所有<code>&lt;script&gt;</code> 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在<code>&lt;script&gt;</code> 元素中的代码必须严格按次序解释。</li>\n<li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code> 元素中的代码，然后才能继续渲染页面 的剩余部分。为此，<strong>通常应该把<code>&lt;script&gt;</code> 元素放到页面末尾，介于主内容之后及<code>&lt;script&gt;</code> 标签之前</strong>。</li>\n<li>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。</li>\n<li>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异 步脚本不能保证按照它们在页面中出现的次序执行。</li>\n<li>通过使用 <code>**&lt;noscript&gt;**</code> 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染。</li>\n</ul>\n<h2 id=\"第三章-语言基础\"><a href=\"#第三章-语言基础\" class=\"headerlink\" title=\"第三章 语言基础\"></a>第三章 语言基础</h2><h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>所谓标识符，就是变量、函数、属性或参数的名称</li>\n<li>按照惯例，ECMAScript 标识符使用驼峰大小写形式，因为这种形式跟 ECMAScript 内置函数和对象的命名方式一致，所以算是最佳实践</li>\n<li>关键字、保留字、true、false、null 不能作为标识符</li>\n</ul>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><ul>\n<li>if 之类的控制语句只在执行多条语句时要求必须有代码块。不过最佳实践是始终在控制语句中使用代码块，即使执行的只有一条语句。在控制语句中使用代码块可以让内容更清晰，在需要修改代码时也可以减少出错的可能性。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有效，但容易导致错误，应该避免</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//推荐</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li>var → 函数作用域</li>\n<li>let → 块作用域</li>\n</ul>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 的核心语言特性在 <strong>ECMA-262</strong> 中以伪语言 <strong>ECMAScript</strong> 的形式来定义。ECMAScript 包含所有基本语法、操作符、数据类型和对象，能完成基本的计算任务，但没有提供获得输入和产生输出的 机制。理解 ECMAScript 及其复杂的细节是完全理解浏览器中 JavaScript 的关键。下面总结一下 ECMAScript 中的基本元素。</p>\n<ul>\n<li>ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number、String 和 Symbol。</li>\n<li>与其他语言不同，ECMAScript 不区分整数和浮点值，只有 Number 一种数值数据类型。</li>\n<li>Object 是一种复杂数据类型，它是这门语言中所有对象的基类。</li>\n<li>严格模式为这门语言中某些容易出错的部分施加了限制。</li>\n<li>ECMAScript 提供了 C 语言和类 C 语言中常见的很多基本操作符，包括数学操作符、布尔操作符、 关系操作符、相等操作符和赋值操作符等。</li>\n<li>这门语言中的流控制语句大多是从其他语言中借鉴而来的，比如 if 语句、for 语句和 switch 语句等。</li>\n</ul>\n<p>ECMAScript 中的函数与其他语言中的函数不一样。</p>\n<ul>\n<li>不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。</li>\n<li><strong>不指定返回值的函数实际上会返回特殊值 undefined。</strong></li>\n</ul>\n<h2 id=\"第四章-变量、作用域与内存\"><a href=\"#第四章-变量、作用域与内存\" class=\"headerlink\" title=\"第四章 变量、作用域与内存\"></a>第四章 变量、作用域与内存</h2><h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 变量可以保存两种类型的值:原始值和引用值。原始值可能是以下 6 种原始数据类型之 一：Undefined、Null、Boolean、Number、String 和 Symbol。原始值和引用值有以下特点。</p>\n<ul>\n<li>原始值大小固定，因此保存在<strong>栈内存</strong>上。</li>\n<li>从一个变量到另一个变量复制原始值会创建该值的第二个副本。</li>\n<li>引用值是对象，存储在<strong>堆内存</strong>上。</li>\n<li>包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。</li>\n<li>从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。</li>\n<li><strong>typeof 操作符可以确定值的原始类型，而 instanceof 操作符用于确保值的引用类型。</strong></li>\n</ul>\n<blockquote>\n<p>堆内存是向高地址扩展的数据结构，是不连续的内存区域。 栈内存在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。</p>\n</blockquote>\n<p>任何变量(不管包含的是原始值还是引用值)都存在于某个执行上下文中(也称为作用域)。这个上下文(作用域)决定了变量的生命周期，以及它们可以访问代码的哪些部分。执行上下文可以总结如下。</p>\n<ul>\n<li>执行上下文分<strong>全局上下文、函数上下文和块级上下文</strong>。</li>\n<li>代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。</li>\n<li>@函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。</li>\n<li>全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。</li>\n<li>变量的执行上下文用于确定什么时候释放内存。</li>\n</ul>\n<p>JavaScript 是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收。JavaScript 的垃圾回收程序可以总结如下。</p>\n<ul>\n<li><strong>离开作用域</strong>的值会被自动标记为可回收，然后在垃圾回收期间被删除。</li>\n<li>主流的垃圾回收算法是<strong>标记清理</strong>，即先给当前不使用的值加上标记，再回来回收它们的内存。</li>\n<li><strong>引用计数</strong>是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎<strong>不再</strong>使用这种算法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对象(如 DOM 元素)。</li>\n<li>引用计数在代码中存在循环引用时会出现问题。</li>\n<li>解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。</li>\n</ul>\n<h2 id=\"第五章-基本引用类型\"><a href=\"#第五章-基本引用类型\" class=\"headerlink\" title=\"第五章 基本引用类型\"></a>第五章 基本引用类型</h2><h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。</p>\n<ul>\n<li>引用值与传统面向对象编程语言中的类相似，但实现不同。</li>\n<li><strong>Date</strong> 类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。</li>\n<li><strong>RegExp</strong> 类型是 ECMAScript 支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。</li>\n</ul>\n<p>JavaScript 比较独特的一点是，<strong>函数实际上是 Function 类型的实例，也就是说函数也是对象</strong>。因为函数也是对象，所以函数也有方法，可以用于增强其能力。</p>\n<p>由于原始值包装类型的存在，JavaScript 中的原始值可以被当成对象来使用。有 3 种原始值包装类型:<strong>Boolean</strong>、<strong>Number</strong> 和 <strong>String</strong>。它们都具备如下特点。</p>\n<ul>\n<li>每种包装类型都映射到同名的原始类型。</li>\n<li>以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。</li>\n<li>涉及原始值的语句执行完毕后，包装对象就会被销毁。</li>\n</ul>\n<p>当代码开始执行时，全局上下文中会存在两个内置对象: <strong>Global</strong> 和 <strong>Math</strong> 。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。<strong>不过，浏览器将其实现为 window 对象。</strong>所有全局变量和函 数都是 Global 对象的属性。Math 对象包含辅助完成复杂计算的属性和方法。</p>\n<h2 id=\"第六章-集合引用类型\"><a href=\"#第六章-集合引用类型\" class=\"headerlink\" title=\"第六章 集合引用类型\"></a>第六章 集合引用类型</h2><h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JavaScript 中的对象是引用值，可以通过几种内置引用类型创建特定类型的对象。</p>\n<ul>\n<li>引用类型与传统面向对象编程语言中的类相似，但实现不同。</li>\n<li><strong>Object 类型是一个基础类型，所有引用类型都从它继承了基本的行为。</strong></li>\n<li>Array 类型表示一组有序的值，并提供了操作和转换值的能力。</li>\n<li>定型数组包含一套不同的引用类型，用于管理数值在内存中的类型。</li>\n<li>Date 类型提供了关于日期和时间的信息，包括当前日期和时间以及计算。</li>\n<li>RegExp 类型是 ECMAScript 支持的正则表达式的接口，提供了大多数基本正则表达式以及一些 高级正则表达式的能力。</li>\n</ul>\n<p><strong>JavaScript 比较独特的一点是，函数其实是 Function 类型的实例，这意味着函数也是对象。由于函数是对象，因此也就具有能够增强自身行为的方法。</strong></p>\n<p>因为原始值包装类型的存在，所以 JavaScript 中的原始值可以拥有类似对象的行为。有 3 种原始值包装类型:Boolean、Number 和 String。它们都具有如下特点。</p>\n<ul>\n<li>每种包装类型都映射到同名的原始类型。</li>\n<li>在以读模式访问原始值时，后台会实例化一个原始值包装对象，通过这个对象可以操作数据。</li>\n<li>涉及原始值的语句只要一执行完毕，包装对象就会立即销毁。 JavaScript 还有两个在一开始执行代码时就存在的内置对象:Global 和 Math。其中，Global 对象在大多数 ECMAScript 实现中无法直接访问。不过浏览器将 Global 实现为 window 对象。所有全局 变量和函数都是 Global 对象的属性。Math 对象包含辅助完成复杂数学计算的属性和方法。 ECMAScript 6 新增了一批引用类型:Map、WeakMap、Set 和 WeakSet。这些类型为组织应用程序 数据和简化内存管理提供了新能力。</li>\n</ul>\n<h2 id=\"第七章-迭代器与生成器\"><a href=\"#第七章-迭代器与生成器\" class=\"headerlink\" title=\"第七章 迭代器与生成器\"></a>第七章 迭代器与生成器</h2><p><strong>可迭代（Iterable）</strong>  对象是数组的泛化。这个概念是说任何对象都可以被定制为可在  <code>for..of</code><br>  循环中使用的对象。</p>\n<p>数组是可迭代的。但不仅仅是数组。很多其他<strong>内建对象</strong>也都是可迭代的。例如字符串也是可迭代的。</p>\n<h3 id=\"Symbol-iterator\"><a href=\"#Symbol-iterator\" class=\"headerlink\" title=\"Symbol.iterator\"></a><strong>Symbol.iterator</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range = &#123;</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">to</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>为了让  <code>range</code>  对象可迭代（也就让  <code>for..of</code>  可以运行）我们需要为对象添加一个名为  <code>Symbol.iterator</code>  的方法（一个专门用于使对象可迭代的内建 symbol）。</p>\n<ol>\n<li>当  <code>for..of</code>  循环启动时，它会调用这个方法（如果没找到，就会报错）。这个方法必须返回一个  <strong>迭代器（iterator）</strong> —— 一个有  <code>next</code>  方法的对象。</li>\n<li>从此开始，<code>for..of</code> <strong>仅适用于这个被返回的对象</strong>。</li>\n<li>当  <code>for..of</code>  循环希望取得下一个数值，它就调用这个对象的  <code>next()</code>  方法。</li>\n<li><code>next()</code>  方法返回的结果的格式必须是  <code>&#123;done: Boolean, value: any&#125;</code>，当  <code>done=true</code>  时，表示循环结束，否则  <code>value</code>  是下一个值。</li>\n</ol>\n<h3 id=\"完整实现\"><a href=\"#完整实现\" class=\"headerlink\" title=\"完整实现\"></a>完整实现</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range = &#123;</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">to</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. for..of 调用首先会调用这个：</span></span><br><span class=\"line\">range[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ……它返回迭代器对象（iterator object）：</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">current</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">from</span>,</span><br><span class=\"line\">    <span class=\"attr\">last</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">to</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. next() 在 for..of 的每一轮循环迭代中被调用</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 4. 它将会返回 &#123;done:.., value :...&#125; 格式的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">current</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">last</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">current</span>++ &#125;;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在它可以运行了！</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> range) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(num); <span class=\"comment\">// 1, 然后是 2, 3, 4, 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意可迭代对象的核心功能：关注点分离。</p>\n<ul>\n<li><code>range</code>  自身没有  <code>next()</code>  方法。</li>\n<li>相反，是通过调用  <code>range[Symbol.iterator]()</code>  创建了另一个对象，即所谓的“迭代器”对象，并且它的  <code>next</code>  会为迭代生成值。</li>\n</ul>\n<p>因此，迭代器对象和与其进行迭代的对象是分开的。</p>\n<p>从技术上说，我们可以将它们合并，并使用  <code>range</code>  自身作为迭代器来简化代码。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range = &#123;</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">to</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">current</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">from</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">current</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">to</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">current</span>++ &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> range) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(num); <span class=\"comment\">// 1, 然后是 2, 3, 4, 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串是可迭代的\"><a href=\"#字符串是可迭代的\" class=\"headerlink\" title=\"字符串是可迭代的\"></a><strong>字符串是可迭代的</strong></h3><p>数组和字符串是使用最广泛的内建可迭代对象。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> <span class=\"string\">&quot;test&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 触发 4 次，每个字符一次</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(char); <span class=\"comment\">// t, then e, then s, then t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显式调用迭代器\"><a href=\"#显式调用迭代器\" class=\"headerlink\" title=\"显式调用迭代器\"></a><strong>显式调用迭代器</strong></h3><p>我们将会采用与  <code>for..of</code>  完全相同的方式遍历字符串，但使用的是直接调用。这段代码创建了一个字符串迭代器，并“手动”从中获取值。这样比  <code>for..of</code>  给了我们更多的控制权。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和 for..of 做相同的事</span></span><br><span class=\"line\"><span class=\"comment\">// for (let char of str) alert(char);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = str[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = iterator.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.<span class=\"property\">done</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(result.<span class=\"property\">value</span>); <span class=\"comment\">// 一个接一个地输出字符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可迭代（iterable）和类数组（array-like）\"><a href=\"#可迭代（iterable）和类数组（array-like）\" class=\"headerlink\" title=\"可迭代（iterable）和类数组（array-like）\"></a>可迭代（iterable）和类数组（array-like）</h3><ul>\n<li><strong>Iterable</strong>  如上所述，是实现了  <code>Symbol.iterator</code>  方法的对象。</li>\n<li><strong>Array-like</strong>  是有索引和  <code>length</code>  属性的对象，所以它们看起来很像数组。</li>\n</ul>\n<p>例如，字符串即是可迭代的（<code>for..of</code>  对它们有效），又是类数组的（它们有数值索引和  <code>length</code>  属性）。</p>\n<p>下面这个对象则是类数组的，但是不可迭代：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有索引和 length 属性 =&gt; 类数组对象</span></span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;Hello&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error (no Symbol.iterator)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> arrayLike) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from\"></a>Array.from</h3><p><code>Array.from</code> 可以接受一个<strong>可迭代</strong>或<strong>类数组</strong>的值，并从中获取一个“真正的”数组。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;Hello&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike); <span class=\"comment\">// (*)</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(arr.<span class=\"title function_\">pop</span>()); <span class=\"comment\">// World（pop 方法有效）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-6\"><a href=\"#小结-6\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>迭代是一种所有编程语言中都可以看到的模式。ECMAScript 6 正式支持<strong>迭代模式</strong>并引入了两个新的 语言特性：<strong>迭代器和生成器。</strong></p>\n<p>可以应用  <code>for..of</code>  的对象被称为  <strong>可迭代的</strong>。</p>\n<ul>\n<li>技术上来说，可迭代对象必须实现  <code>Symbol.iterator</code>  方法。<ul>\n<li><code>obj[Symbol.iterator]()</code>  的结果被称为  <strong>迭代器（iterator）</strong>。由它处理进一步的迭代过程。</li>\n<li>一个迭代器必须有  <code>next()</code>  方法，它返回一个  <code>&#123;done: Boolean, value: any&#125;</code>  对象，这里  <code>done:true</code>  表明迭代结束，否则  <code>value</code>  就是下一个值。</li>\n</ul>\n</li>\n<li><code>Symbol.iterator</code>  方法会被  <code>for..of</code>  自动调用，但我们也可以直接调用它。</li>\n<li>内建的可迭代对象例如字符串和数组，都实现了  <code>Symbol.iterator</code>。</li>\n<li>字符串迭代器能够识别代理对（surrogate pair）。（译注：代理对也就是 UTF-16 扩展字符。）</li>\n</ul>\n<p>有索引属性和  <code>length</code>  属性的对象被称为  <strong>类数组对象</strong>。这种对象可能还具有其他属性和方法，但是没有数组的内建方法。</p>\n<p>如果我们仔细研究一下规范 —— 就会发现大多数内建方法都假设它们需要处理的是可迭代对象或者类数组对象，而不是“真正的”数组，因为这样抽象度更高。</p>\n<p><code>Array.from(obj[, mapFn, thisArg])</code>  将可迭代对象或类数组对象  <code>obj</code>  转化为真正的数组  <code>Array</code>，然后我们就可以对它应用数组的方法。可选参数  <code>mapFn</code>  和  <code>thisArg</code>  允许我们将函数应用到每个元素。</p>\n<p><strong>生成器</strong>是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了 Iterable 接口， 因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持 yield 关键字，这个关键字能够 暂停执行生成器函数。使用 yield 关键字还可以通过 next()方法接收输入和产生输出。在加上星号之 后，yield 关键字可以将跟在它后面的可迭代对象序列化为一连串值。</p>\n<h2 id=\"第八章-对象、类与面向对象编程\"><a href=\"#第八章-对象、类与面向对象编程\" class=\"headerlink\" title=\"第八章 对象、类与面向对象编程\"></a>第八章 对象、类与面向对象编程</h2><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h3 id=\"面相对象编程\"><a href=\"#面相对象编程\" class=\"headerlink\" title=\"面相对象编程\"></a>面相对象编程</h3><p>当我们在代码中用对象表示实体时，就是所谓的  <a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">面向对象编程</a>，简称为 “OOP”。</p>\n<h3 id=\"“in”-操作符和“for…in”-循环\"><a href=\"#“in”-操作符和“for…in”-循环\" class=\"headerlink\" title=\"“in” 操作符和“for…in” 循环\"></a>“in” 操作符和“for…in” 循环</h3><p>相比于其他语言，JavaScript 的对象有一个需要注意的特性：能够被访问任何属性。即使属性不存在也不会报错！读取不存在的属性只会得到  <code>undefined</code>。</p>\n<p>这里还有一个特别的，检查属性是否存在的操作符  <code>in</code>。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;age&quot;</span> <span class=\"keyword\">in</span> user); <span class=\"comment\">// true，user.age 存在</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;blabla&quot;</span> <span class=\"keyword\">in</span> user); <span class=\"comment\">// false，user.blabla 不存在。</span></span><br></pre></td></tr></table></figure>\n\n<p>为何会有  <code>in</code>  运算符呢？与  <code>undefined</code>  进行比较来判断还不够吗？大部分情况下与  <code>undefined</code>  进行比较来判断就可以了。但有一个例外情况那就是属性存在，但存储的值是  <code>undefined</code>  的时候。</p>\n<p>这种情况很少发生，因为通常情况下不应该给对象赋值  <code>undefined</code>。我们通常会用  <code>null</code><br>  来表示未知的或者空的值。因此，<code>in</code>  运算符是代码中的特殊来宾。</p>\n<p><strong>“for…in” 循环</strong></p>\n<p>为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环：<code>for..in</code>。这跟我们在前面学到的  <code>for(;;)</code>  循环是完全不一样的东西。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"attr\">isAdmin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> user) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// keys</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(key); <span class=\"comment\">// name, age, isAdmin</span></span><br><span class=\"line\">  <span class=\"comment\">// 属性键的值</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(user[key]); <span class=\"comment\">// John, 30, true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<aside>\n💡 如果我们遍历一个对象，其顺序是：**整数属性会被进行排序，其他属性则按照创建的顺序显示。**\n\n</aside>\n\n<h3 id=\"对象方法，-“this”\"><a href=\"#对象方法，-“this”\" class=\"headerlink\" title=\"对象方法，**“this”**\"></a>对象方法，*<strong>*“this”**</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &quot;this&quot; 指的是“当前的对象”</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">user.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// John</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JavaScript 中，<code>this</code>  关键字与其他大多数编程语言中的不同。JavaScript 中的  <code>this</code>  可以用于任何函数，即使它不是对象的方法。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面这样的代码没有语法错误：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>this</code>  的值是在代码运行时计算出来的，它取决于代码上下文。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.<span class=\"property\">f</span> = sayHi;</span><br><span class=\"line\">user.<span class=\"title function_\">f</span>(); <span class=\"comment\">// John（this == user）</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在没有对象的情况下调用：<code>this == undefined</code></strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，严格模式下的  <code>this</code>  值为  <code>undefined</code>。如果我们尝试访问  <code>this.name</code>，将会报错。</p>\n<p>在非严格模式的情况下，<code>this</code>  将会是  <strong>全局对象</strong>（浏览器中的  <code>window</code>）。这是一个历史行为，<code>&quot;use strict&quot;</code>  已经将其修复了。</p>\n<p>通常这种调用是程序出错了。如果在一个函数内部有  <code>this</code>，那么通常意味着它是在对象上下文环境中被调用的。</p>\n<p><strong>箭头函数没有自己的 “this”</strong></p>\n<p>箭头函数有些特别：它们没有自己的  <code>this</code>。如果我们在这样的函数中引用  <code>this</code>，<code>this</code><br>  值取决于外部“正常的”函数。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Ilya&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">arrow</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span>);</span><br><span class=\"line\">    <span class=\"title function_\">arrow</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// Ilya</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器和操作符-“new”\"><a href=\"#构造器和操作符-“new”\" class=\"headerlink\" title=\"**构造器和操作符 “new”**\"></a>*<strong>*构造器和操作符 “new”**</strong></h3><p>常规的  <code>&#123;...&#125;</code>  语法允许创建一个对象。但是我们经常需要创建很多类似的对象，例如多个用户或菜单项等。这可以使用构造函数和  <code>&quot;new&quot;</code>  操作符来实现。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>构造函数在技术上是常规函数。不过有两个约定：</p>\n<ol>\n<li>它们的命名以大写字母开头。</li>\n<li>它们只能由  <code>&quot;new&quot;</code>  操作符来执行。</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">isAdmin</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(user.<span class=\"property\">name</span>); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(user.<span class=\"property\">isAdmin</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>new User(...)</code>  做的是类似的事情：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this = &#123;&#125;;（隐式创建）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 添加属性到 this</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">isAdmin</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// return this;（隐式返回）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器模式测试：new-target\"><a href=\"#构造器模式测试：new-target\" class=\"headerlink\" title=\"构造器模式测试：new.target\"></a>构造器模式测试：new.target</h3><p>在一个函数内部，我们可以使用  <code>new.target</code>  属性来检查它是否被使用  <code>new</code>  进行调用了。</p>\n<p>对于常规调用，它为 undefined，对于使用  <code>new</code>  的调用，则等于该函数：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不带 &quot;new&quot;：</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>(); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带 &quot;new&quot;：</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(); <span class=\"comment\">// function User &#123; ... &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器的-return\"><a href=\"#构造器的-return\" class=\"headerlink\" title=\"构造器的 return\"></a>构造器的 return</h3><p>带有对象的  <code>return</code>返回该对象，在所有其他情况下返回  <code>this</code>。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BigUser</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Godzilla&quot;</span> &#125;; <span class=\"comment\">// &lt;-- 返回这个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BigUser</span>().<span class=\"property\">name</span>); <span class=\"comment\">// Godzilla，得到了那个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SmallUser</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;John&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>; <span class=\"comment\">// &lt;-- 返回 this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">SmallUser</span>().<span class=\"property\">name</span>); <span class=\"comment\">// John</span></span><br></pre></td></tr></table></figure>\n\n<aside>\n💡 如果没有参数，我们可以省略 `new` ，后的括号。这里省略括号不被认为是一种“好风格”，但是规范允许使用该语法。\n\n</aside>\n\n<h3 id=\"对象的方法\"><a href=\"#对象的方法\" class=\"headerlink\" title=\"对象的方法\"></a>对象的方法</h3><p><strong>Object.keys(obj)</strong></p>\n<p>返回一个包含该对象所有的键的数组。</p>\n<p><strong>Object.values(obj)</strong></p>\n<p>返回一个包含该对象所有的值的数组。</p>\n<p><strong>Object.entries(obj)</strong></p>\n<p>返回一个包含该对象所有 <code>[key, value]</code> 键值对的二维数组。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&quot;somestring&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(object1));</span><br><span class=\"line\"><span class=\"comment\">//[[&quot;a&quot;,&quot;somestring&quot;],[&quot;b&quot;,42]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(object1)) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// expected output:</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;a: somestring&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;b: 42&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.assign()</strong></p>\n<p>方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象（浅拷贝）。它将返回目标对象。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> returnedTarget = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(target, source);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(returnedTarget);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.create()</strong></p>\n<p>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。</p>\n<p><strong>Object.defineProperty()</strong></p>\n<p>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<aside>\n💡 应当直接在 `[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)` 构造器对象上调用此方法，而不是在任意一个 `Object`\n类型的实例上调用。\n\n</aside>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(object1, <span class=\"string\">&quot;property1&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">object1.<span class=\"property\">property1</span> = <span class=\"number\">77</span>;</span><br><span class=\"line\"><span class=\"comment\">// throws an error in strict mode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(object1.<span class=\"property\">property1</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 42</span></span><br></pre></td></tr></table></figure>\n\n<aside>\n💡 Vue2通过使用此方法实现双向绑定，Vue3改为了Proxy\n\n</aside>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;; <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\"><span class=\"comment\">// 在对象中添加一个设置了存取描述符属性的示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bValue = <span class=\"number\">38</span>;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(o, <span class=\"string\">&quot;b&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用了方法名称缩写（ES2015 特性）</span></span><br><span class=\"line\">  <span class=\"comment\">// 下面两个缩写等价于：</span></span><br><span class=\"line\">  <span class=\"comment\">// get : function() &#123; return bValue; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// set : function(newValue) &#123; bValue = newValue; &#125;,</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">    bValue = newValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.defineProperties()</strong></p>\n<p>方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p>\n<p><strong>Object.freeze()</strong></p>\n<p>方法可以<strong>冻结</strong>一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。<code>freeze()</code>  返回和传入的参数相同的对象。</p>\n<p><strong>Object.fromEntries()</strong></p>\n<p>方法把键值对列表转换为一个对象。</p>\n<p><strong>Object.getOwnPropertyDescriptor()</strong></p>\n<p>方法返回指定对象上一个自有属性对应的属性描述符。</p>\n<p><strong>Object.getOwnPropertyDescriptors()</strong></p>\n<p>方法用来获取一个对象的所有自身属性的描述符。</p>\n<p><strong>Object.getOwnPropertyNames()</strong></p>\n<p>方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 <code>Symbol</code> 值作为名称的属性）组成的数组。</p>\n<p><strong>Object.getOwnPropertySymbols()</strong></p>\n<p>方法返回一个给定对象自身的所有 <code>Symbol</code>  属性的数组。</p>\n<p><strong>Object.getPrototypeOf()</strong></p>\n<p>方法返回指定对象的原型（内部<code>[[Prototype]]</code>属性的值）。</p>\n<p><strong>Object.hasOwn()</strong></p>\n<p>The **<code>Object.hasOwn()</code>**static method returns <code>true</code> if the specified object has the indicated property as its <em>own</em> property. If the property is inherited, or does not exist, the method returns <code>false</code>.</p>\n<aside>\n💡 `Object.hasOwn()`\n is intended as a replacement for `[Object.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)`.\n\n</aside>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">prop</span>: <span class=\"string\">&quot;exists&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">hasOwn</span>(object1, <span class=\"string\">&quot;prop&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Object.prototype.hasOwnProperty()</strong></p>\n<p>方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p>\n<p><strong>Object.is()</strong></p>\n<p>方法判断两个值是否为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\">同一个值</a>。</p>\n<p><strong>Object.isExtensible()</strong></p>\n<p>方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</p>\n<p><strong>Object.isFrozen()</strong></p>\n<p>方法判断一个对象是否被<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">冻结</a>。</p>\n<p><strong>Object.prototype.isPrototypeOf()</strong></p>\n<p>方法用于测试一个对象是否存在于另一个对象的原型链上。</p>\n<p><strong>Object.isSealed()</strong></p>\n<p>方法判断一个对象是否被密封。</p>\n<p><strong>Object.preventExtensions()</strong></p>\n<p>方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。</p>\n<p><strong>Object.prototype.propertyIsEnumerable()</strong></p>\n<p>方法返回一个布尔值，表示指定的属性是否可枚举。</p>\n<p><strong>Object.seal()</strong></p>\n<p>方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</p>\n<p><strong>Object.setPrototypeOf()</strong></p>\n<p>方法设置一个指定的对象的原型 ( 即, 内部<code>[[Prototype]]</code>属性）到另一个对象或  <code>[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)</code>。</p>\n<aside>\n💡 考虑性能，你应该使用 `[Object.create()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)`来创建带有你想要的`[[Prototype]]`的新对象。\n\n</aside>\n\n<p><strong>toLocaleString()</strong></p>\n<p>方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。</p>\n<p><strong>toString()</strong></p>\n<p>方法返回一个表示该对象的字符串。</p>\n<p><strong>valueOf()</strong></p>\n<p>方法返回指定对象的原始值。</p>\n<h3 id=\"小结-7\"><a href=\"#小结-7\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>对象在代码执行过程中的任何时候都可以被创建和增强，具有极大的动态性，并不是严格定义的实 体。下面的模式适用于创建对象。</p>\n<ul>\n<li>工厂模式就是一个简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个 对象。这个模式在构造函数模式出现后就很少用了。</li>\n<li>使用构造函数模式可以自定义引用类型，可以使用 new 关键字像创建内置类型实例一样创建自 定义类型的实例。不过，构造函数模式也有不足，主要是其成员无法重用，包括函数。考虑到 函数本身是松散的、弱类型的，没有理由让函数不能在多个对象实例间共享。</li>\n<li>原型模式解决了成员共享的问题，只要是添加到构造函数 prototype 上的属性和方法就可以共 6 享。而组合构造函数和原型模式通过构造函数定义实例属性，通过原型定义共享的属性和方法。</li>\n</ul>\n<p>JavaScript 的继承主要通过原型链来实现。原型链涉及把构造函数的原型赋值为另一个类型的实例。 这样一来，子类就可以访问父类的所有属性和方法，就像基于类的继承那样。原型链的问题是所有继承 的属性和方法都会在对象实例间共享，无法做到实例私有。盗用构造函数模式通过在子类构造函数中调 用父类构造函数，可以避免这个问题。这样可以让每个实例继承的属性都是私有的，但要求类型只能通 过构造函数模式来定义(因为子类不能访问父类原型上的方法)。目前最流行的继承模式是组合继承， 即通过原型链继承共享的属性和方法，通过盗用构造函数继承实例属性。</p>\n<p>除上述模式之外，还有以下几种继承模式。</p>\n<ul>\n<li>原型式继承可以无须明确定义构造函数而实现继承，本质上是对给定对象执行浅复制。这种操 作的结果之后还可以再进一步增强。</li>\n<li>与原型式继承紧密相关的是寄生式继承，即先基于一个对象创建一个新对象，然后再增强这个 新对象，最后返回新对象。这个模式也被用在组合继承中，用于避免重复调用父类构造函数导 致的浪费。</li>\n<li>寄生组合继承被认为是实现基于类型继承的最有效方式。</li>\n</ul>\n<p>ECMAScript 6 新增的类很大程度上是基于既有原型机制的语法糖。类的语法让开发者可以优雅地定义向后兼容的类，既可以继承内置类型，也可以继承自定义类型。类有效地跨越了对象实例、对象原型 和对象类之间的鸿沟。</p>\n<h2 id=\"第九章-代理与反射\"><a href=\"#第九章-代理与反射\" class=\"headerlink\" title=\"第九章 代理与反射\"></a>第九章 代理与反射</h2><h3 id=\"小结-8\"><a href=\"#小结-8\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>代理是 ECMAScript 6 新增的令人兴奋和动态十足的新特性。尽管不支持向后兼容，但它开辟出了 一片前所未有的 JavaScript 元编程及抽象的新天地。</p>\n<p>从宏观上看，代理是真实 JavaScript 对象的透明抽象层。代理可以定义包含捕获器的处理程序对象， 而这些捕获器可以拦截绝大部分 JavaScript 的基本操作和方法。在这个捕获器处理程序中，可以修改任 何基本操作的行为，当然前提是遵从捕获器不变式。</p>\n<p>与代理如影随形的反射 API，则封装了一整套与捕获器拦截的操作相对应的方法。可以把反射 API 看作一套基本操作，这些操作是绝大部分 JavaScript 对象 API 的基础。</p>\n<p>代理的应用场景是不可限量的。开发者使用它可以创建出各种编码模式，比如(但远远不限于)跟 踪属性访问、隐藏属性、阻止修改或删除属性、函数参数验证、构造函数参数验证、数据绑定，以及可 观察对象。</p>\n<h2 id=\"第十章-函数\"><a href=\"#第十章-函数\" class=\"headerlink\" title=\"第十章 函数\"></a>第十章 函数</h2><h3 id=\"小结-9\"><a href=\"#小结-9\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>函数是 JavaScript 编程中最有用也最通用的工具。ECMAScript 6 新增了更加强大的语法特性，从而 让开发者可以更有效地使用函数。</p>\n<ul>\n<li>函数表达式与函数声明是不一样的。函数声明要求写出函数名称，而函数表达式并不需要。没 有名称的函数表达式也被称为匿名函数。</li>\n<li>ES6 新增了类似于函数表达式的箭头函数语法，但两者也有一些重要区别。</li>\n<li>JavaScript 中函数定义与调用时的参数极其灵活。arguments 对象，以及 ES6 新增的扩展操作符，可以实现函数定义和调用的完全动态化。</li>\n<li>函数内部也暴露了很多对象和引用，涵盖了函数被谁调用、使用什么调用，以及调用时传入了什么参数等信息。</li>\n<li>JavaScript 引擎可以优化符合尾调用条件的函数，以节省栈空间。</li>\n<li>闭包的作用域链中包含自己的一个变量对象，然后是包含函数的变量对象，直到全局上下文的变量对象。</li>\n<li>通常，函数作用域及其中的所有变量在函数执行完毕后都会被销毁。</li>\n<li>闭包在被函数返回之后，其作用域会一直保存在内存中，直到闭包被销毁。</li>\n<li>函数可以在创建之后立即调用，执行其中代码之后却不留下对函数的引用。</li>\n<li>立即调用的函数表达式如果不在包含作用域中将返回值赋给一个变量，则其包含的所有变量都会被销毁。</li>\n<li>虽然 JavaScript 没有私有对象属性的概念，但可以使用闭包实现公共方法，访问位于包含作用域中定义的变量。</li>\n<li>可以访问私有变量的公共方法叫作特权方法。</li>\n<li>特权方法可以使用构造函数或原型模式通过自定义类型中实现，也可以使用模块模式或模块增强模式在单例对象上实现。</li>\n</ul>\n<h2 id=\"第十一章-期约与异步函数\"><a href=\"#第十一章-期约与异步函数\" class=\"headerlink\" title=\"第十一章 期约与异步函数\"></a>第十一章 期约与异步函数</h2><h3 id=\"小结-10\"><a href=\"#小结-10\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>长期以来，掌握单线程 JavaScript 运行时的异步行为一直都是个艰巨的任务。随着 ES6 新增了期约 和 ES8 新增了异步函数，ECMAScript 的异步编程特性有了长足的进步。通过期约和 async&#x2F;await，不仅 可以实现之前难以实现或不可能实现的任务，而且也能写出更清晰、简洁，并且容易理解、调试的代码。</p>\n<p>期约的主要功能是为异步代码提供了清晰的抽象。可以用期约表示异步执行的代码块，也可以用期 约表示异步计算的值。在需要串行异步代码时，期约的价值最为突出。作为可塑性极强的一种结构，期 约可以被序列化、连锁使用、复合、扩展和重组。</p>\n<p>异步函数是将期约应用于 JavaScript 函数的结果。异步函数可以暂停执行，而不阻塞主线程。无论 是编写基于期约的代码，还是组织串行或平行执行的异步代码，使用异步函数都非常得心应手。异步函 数可以说是现代 JavaScript 工具箱中最重要的工具之一。</p>\n<h2 id=\"第十二章-BOM\"><a href=\"#第十二章-BOM\" class=\"headerlink\" title=\"第十二章 BOM\"></a>第十二章 BOM</h2><p>BOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口</p>\n<p>JavaScript 在浏览器中是单线程执行的，但允许使用定时器指定在某个时间之后或每隔一段时间就 执行相应的代码。</p>\n<blockquote>\n<p>所有超时执行的代码(函数)都会在全局作用域中的一个匿名函数中运行，因此函 数中的 this 值在非严格模式下始终指向 window，而在严格模式下是 undefined。如果 给 setTimeout()提供了一个箭头函数，那么 this 会保留为定义它时所在的词汇作用域。</p>\n</blockquote>\n<p><strong>location</strong> 是最有用的 BOM 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象独特的地方在于，它既是 window 的属性，也是 document 的属性。也就是说， <code>window.location</code> 和 <code>document.location</code> 指向同一个对象。</p>\n<h3 id=\"小结-11\"><a href=\"#小结-11\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>浏览器对象模型(BOM，Browser Object Model)是以 window 对象为基础的，这个对象代表了浏览器窗口和页面可见的区域。window 对象也被复用为 ECMAScript 的 Global 对象，因此所有全局变量和函数都是它的属性，而且所有原生类型的构造函数和普通函数也都从一开始就存在于这个对象之上。本章讨论了 BOM 的以下内容。</p>\n<ul>\n<li>要引用其他 window 对象，可以使用几个不同的窗口指针。</li>\n<li>通过 location 对象可以以编程方式操纵浏览器的导航系统。通过设置这个对象上的属性，可以改变浏览器 URL 中的某一部分或全部。</li>\n<li>使用 replace()方法可以替换浏览器历史记录中当前显示的页面，并导航到新 URL。 navigator 对象提供关于浏览器的信息。提供的信息类型取决于浏览器，不过有些属性如 userAgent 是所有浏览器都支持的。</li>\n</ul>\n<p>BOM 中的另外两个对象也提供了一些功能。screen 对象中保存着客户端显示器的信息。这些信息 通常用于评估浏览网站的设备信息。history 对象提供了操纵浏览器历史记录的能力，开发者可以确 定历史记录中包含多少个条目，并以编程方式实现在历史记录中导航，而且也可以修改历史记录。</p>\n<h2 id=\"第十三章-客户端检测\"><a href=\"#第十三章-客户端检测\" class=\"headerlink\" title=\"第十三章 客户端检测\"></a>第十三章 客户端检测</h2><h3 id=\"小结-12\"><a href=\"#小结-12\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>客户端检测是 JavaScript 中争议最多的话题之一。因为不同浏览器之间存在差异，所以经常需要根 据浏览器的能力来编写不同的代码。客户端检测有不少方式，但下面两种用得最多。</p>\n<ul>\n<li><strong>能力检测</strong>，在使用之前先测试浏览器的特定能力。例如，脚本可以在调用某个函数之前先检查 它是否存在。这种客户端检测方式可以让开发者不必考虑特定的浏览器或版本，而只需关注某 些能力是否存在。能力检测不能精确地反映特定的浏览器或版本。</li>\n<li><strong>用户代理检测</strong>，通过用户代理字符串确定浏览器。用户代理字符串包含关于浏览器的很多信息， 通常包括浏览器、平台、操作系统和浏览器版本。用户代理字符串有一个相当长的发展史，很 多浏览器都试图欺骗网站相信自己是别的浏览器。用户代理检测也比较麻烦，特别是涉及 Opera 会在代理字符串中隐藏自己信息的时候。即使如此，用户代理字符串也可以用来确定浏览器使 用的渲染引擎以及平台，包括移动设备和游戏机。</li>\n</ul>\n<p>在选择客户端检测方法时，首选是使用能力检测。特殊能力检测要放在次要位置，作为决定代码逻 辑的参考。用户代理检测是最后一个选择，因为它过于依赖用户代理字符串。</p>\n<p>浏览器也提供了一些软件和硬件相关的信息。这些信息通过 screen 和 navigator 对象暴露出来。 利用这些 API，可以获取关于操作系统、浏览器、硬件、设备位置、电池状态等方面的准确信息。</p>\n<h2 id=\"第十四章-DOM\"><a href=\"#第十四章-DOM\" class=\"headerlink\" title=\"第十四章 DOM\"></a>第十四章 DOM</h2><p>文档对象模型(DOM，Document Object Model)是 HTML 和 XML 文档的编程接口。</p>\n<p>每个节点都有 nodeType 属性，表示该节点的类型：</p>\n<ul>\n<li>Node.ELEMENT_NODE(1)</li>\n<li>Node.ATTRIBUTE_NODE(2)</li>\n<li>Node.TEXT_NODE(3)</li>\n<li>Node.CDATA_SECTION_NODE(4)</li>\n<li>Node.ENTITY_REFERENCE_NODE(5)</li>\n<li>Node.ENTITY_NODE(6)</li>\n<li>Node.PROCESSING_INSTRUCTION_NODE(7)</li>\n<li>Node.COMMENT_NODE(8)</li>\n<li>Node.DOCUMENT_NODE(9) 文档节点</li>\n<li>Node.DOCUMENT_TYPE_NODE(10)</li>\n<li>Node.DOCUMENT_FRAGMENT_NODE(11)</li>\n<li>Node.NOTATION_NODE(12)</li>\n</ul>\n<p><code>nodeName</code> 与 <code>nodeValue</code> 保存着有关节点的信息</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.<span class=\"property\">nodeType</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  value = someNode.<span class=\"property\">nodeName</span>; <span class=\"comment\">// 会显示元素的标签名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点属性和方法\"><a href=\"#节点属性和方法\" class=\"headerlink\" title=\"节点属性和方法\"></a>节点属性和方法</h3><ul>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>hasChildNodes()</li>\n<li>appendChild()</li>\n<li>insertBefore()</li>\n<li>replaceChild()</li>\n<li>removeChild()</li>\n<li>cloneNode()</li>\n</ul>\n<h3 id=\"MutationObserver-接口\"><a href=\"#MutationObserver-接口\" class=\"headerlink\" title=\"MutationObserver 接口\"></a>MutationObserver 接口</h3><p>不久前添加到 DOM 规范中的 MutationObserver 接口，可以在 DOM 被修改时异步执行回调。使 用 MutationObserver 可以观察整个文档、DOM 树的一部分，或某个元素。此外还可以观察元素属性、子节点、文本，或者前三者任意组合的变化。</p>\n<h3 id=\"小结-13\"><a href=\"#小结-13\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>文档对象模型(DOM，Document Object Model)是语言中立的 HTML 和 XML 文档的 API。DOM Level 1 将 HTML 和 XML 文档定义为一个节点的多层级结构，并暴露出 JavaScript 接口以操作文档的底 层结构和外观。</p>\n<p>DOM 由一系列节点类型构成，主要包括以下几种。</p>\n<ul>\n<li>Node 是基准节点类型，是文档一个部分的抽象表示，所有其他类型都继承 Node。</li>\n<li>Document 类型表示整个文档，对应树形结构的根节点。在 JavaScript 中，document 对象是 Document 的实例，拥有查询和获取节点的很多方法。</li>\n<li>Element 节点表示文档中所有 HTML 或 XML 元素，可以用来操作它们的内容和属性。</li>\n<li>其他节点类型分别表示文本内容、注释、文档类型、CDATA 区块和文档片段。</li>\n</ul>\n<p>DOM 编程在多数情况下没什么问题，在涉及 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 元素时会有一点兼容性问题。因为这些元素分别包含脚本和样式信息，所以浏览器会将它们与其他元素区别对待。</p>\n<p>要理解 DOM，最关键的一点是知道影响其性能的问题所在。DOM 操作在 JavaScript 代码中是代价 比较高的，NodeList 对象尤其需要注意。NodeList 对象是“实时更新”的，这意味着每次访问它都会执行一次新的查询。考虑到这些问题，实践中要尽量减少 DOM 操作的数量。</p>\n<p><strong>MutationObserver</strong> 是为代替性能不好的 <strong>MutationEvent</strong> 而问世的。使用它可以有效精准地监控 DOM 变化，而且 API 也相对简单。</p>\n<h2 id=\"第十五章-DOM-扩展\"><a href=\"#第十五章-DOM-扩展\" class=\"headerlink\" title=\"第十五章 DOM 扩展\"></a>第十五章 DOM 扩展</h2><h3 id=\"Selectors-API\"><a href=\"#Selectors-API\" class=\"headerlink\" title=\"Selectors API\"></a>Selectors API</h3><ul>\n<li><code>querySelector()</code> 方法接收 CSS 选择符参数，返回匹配该模式的第一个后代元素，如果没有匹配 项则返回 null。</li>\n<li><code>querySelectorAll()</code> 方法跟 querySelector()一样，也接收一个用于查询的参数，但它会返回 所有匹配的节点，而不止一个。这个方法返回的是一个 NodeList 的静态实例。</li>\n<li><code>matches()</code> 方法(在规范草案中称为 matchesSelector())接收一个 CSS 选择符参数，如果元素 匹配则该选择符返回 true，否则返回 false。</li>\n</ul>\n<h3 id=\"Element-Traversal\"><a href=\"#Element-Traversal\" class=\"headerlink\" title=\"Element Traversal\"></a>Element Traversal</h3><p>Element Traversal API 为 DOM 元素添加了 5 个属性:</p>\n<ul>\n<li><code>childElementCount</code>，返回子元素数量(不包含文本节点和注释)</li>\n<li><code>firstElementChild</code>，指向第一个 Element 类型的子元素(Element 版 firstChild)</li>\n<li><code>lastElementChild</code>，指向最后一个 Element 类型的子元素(Element 版 lastChild)</li>\n<li><code>previousElementSibling</code>， 指 向 前 一 个 Element 类 型 的 同 胞 元 素 (Element 版 previousSibling)</li>\n<li><code>nextElementSibling</code>，指向后一个 Element 类型的同胞元素(Element 版 nextSibling)</li>\n</ul>\n<h3 id=\"CSS-类扩展\"><a href=\"#CSS-类扩展\" class=\"headerlink\" title=\"CSS 类扩展\"></a>CSS 类扩展</h3><ul>\n<li><code>getElementsByClassName()</code></li>\n<li>classList 属性</li>\n</ul>\n<h3 id=\"HTMLDocument-扩展\"><a href=\"#HTMLDocument-扩展\" class=\"headerlink\" title=\"HTMLDocument 扩展\"></a>HTMLDocument 扩展</h3><p><code>readyState</code> 属性，document.readyState 属性有两个可能的值:</p>\n<ul>\n<li>loading，表示文档正在加载。</li>\n<li>complete，表示文档加载完成。</li>\n</ul>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><ul>\n<li><code>innerHTML</code> 在读取 innerHTML 属性时，会返回元素所有后代的 HTML 字符串，包括元素、注释和文本节点。 而在写入 innerHTML 时，则会根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点。</li>\n<li><code>outerHTML</code> 读取 outerHTML 属性时，会返回调用它的元素(及所有后代元素)的 HTML 字符串。在写入 outerHTML 属性时，调用它的元素会被传入的 HTML 字符串经解释之后生成的 DOM 子树取代。</li>\n<li><code>insertAdjacentHTML()</code> 与 <code>insertAdjacentText()</code></li>\n<li><strong>scrollIntoView()</strong> 方法存在于所有 HTML 元素上，可以滚动浏览器窗口或容器元素以便包含元素进入视口。</li>\n</ul>\n<h3 id=\"小结-14\"><a href=\"#小结-14\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>虽然 DOM 规定了与 XML 和 HTML 文档交互的核心 API，但其他几个规范也定义了对 DOM 的扩展。很多扩展都基于之前的已成为事实标准的专有特性标准化而来。本章主要介绍了以下 3 个规范。</p>\n<ul>\n<li><strong>Selectors API</strong> 为基于 CSS 选择符获取 DOM 元素定义了几个方法:<code>querySelector()</code>、 <code>querySelectorAll()</code>和 <code>matches()</code>。</li>\n<li><strong>Element Traversal</strong> 在 DOM 元素上定义了额外的属性，以方便对 DOM 元素进行遍历。这个需求 是因浏览器处理元素间空格的差异而产生的。</li>\n<li><strong>HTML5</strong> 为标准 DOM 提供了大量扩展。其中包括对 innerHTML 属性等事实标准进行了标准化， 还有焦点管理、字符集、滚动等特性。</li>\n</ul>\n<p>DOM 扩展的数量总体还不大，但随着 Web 技术的发展一定会越来越多。浏览器仍然没有停止对专 有扩展的探索，如果出现成功的扩展，那么就可能成为事实标准，或者最终被整合到未来的标准中。</p>\n<h2 id=\"第十六章-DOM2-和-DOM3\"><a href=\"#第十六章-DOM2-和-DOM3\" class=\"headerlink\" title=\"第十六章 DOM2 和 DOM3\"></a>第十六章 DOM2 和 DOM3</h2><h3 id=\"小结-15\"><a href=\"#小结-15\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>DOM2 规范定义了一些模块，用来丰富 DOM1 的功能。DOM2 Core 在一些类型上增加了与 XML 命名空间有关的新方法。这些变化只有在使用 XML 或 XHTML 文档时才会用到，在 HTML 文档中则没 有用处。DOM2 增加的与 XML 命名空间无关的方法涉及以编程方式创建 Document 和 DocumentType 类型的新实例。</p>\n<p>DOM2 Style 模块定义了如何操作元素的样式信息。</p>\n<ul>\n<li>每个元素都有一个关联的 style 对象，可用于确定和修改元素特定的样式。</li>\n<li>要确定元素的计算样式，包括应用到元素身上的所有 CSS 规则，可以使用 <code>getComputedStyle()</code> 方法。</li>\n<li>通过 <code>document.styleSheets</code> 集合可以访问文档上所有的样式表。</li>\n</ul>\n<p>DOM2 Traversal and Range 模块定义了与 DOM 结构交互的不同方式。</p>\n<ul>\n<li>NodeIterator 和 TreeWalker 可以对 DOM 树执行深度优先的遍历。</li>\n<li>NodeIterator 接口很简单，每次只能向前和向后移动一步。TreeWalker 除了支持同样的行为，还支持在 DOM 结构的所有方向移动，包括父节点、同胞节点和子节点。</li>\n<li>范围是选择 DOM 结构中特定部分并且进行操作的一种方式。</li>\n<li>通过范围的选区可以在保持文档结构完好的同时从文档中移除内容，也可复制文档中相应的部分。</li>\n</ul>\n<h2 id=\"第十七章-事件\"><a href=\"#第十七章-事件\" class=\"headerlink\" title=\"第十七章 事件\"></a>第十七章 事件</h2><h3 id=\"小结-16\"><a href=\"#小结-16\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>事件是 JavaScript 与网页结合的主要方式。最常见的事件是在 DOM3 Events 规范或 HTML5 中定义 的。虽然基本的事件都有规范定义，但很多浏览器在规范之外实现了自己专有的事件，以方便开发者更 好地满足用户交互需求，其中一些专有事件直接与特殊的设备相关。</p>\n<p>围绕着使用事件，需要考虑内存与性能问题。例如:</p>\n<ul>\n<li>最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢;</li>\n<li>利用事件冒泡，事件委托可以解决限制事件处理程序数量的问题;</li>\n<li>最好在页面卸载之前删除所有事件处理程序。</li>\n</ul>\n<p>使用 JavaScript 也可以在浏览器中模拟事件。DOM2 Events 和 DOM3 Events 规范提供了模拟方法，可以模拟所有原生 DOM 事件。键盘事件一定程度上也是可以模拟的，有时候需要组合其他技术。IE8 及更早版本也支持事件模拟，只是接口与 DOM 方式不同。</p>\n<p>事件是 JavaScript 中最重要的主题之一，理解事件的原理及其对性能的影响非常重要。</p>\n<h2 id=\"第十八章-动画与-Canvas-图形\"><a href=\"#第十八章-动画与-Canvas-图形\" class=\"headerlink\" title=\"第十八章 动画与 Canvas 图形\"></a>第十八章 动画与 Canvas 图形</h2><h3 id=\"使用-requsetAnimationFrame-节流\"><a href=\"#使用-requsetAnimationFrame-节流\" class=\"headerlink\" title=\"使用 requsetAnimationFrame() 节流\"></a>使用 requsetAnimationFrame() 节流</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">expensiveOperation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;do&quot;</span>, <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;scroll&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (enabled) &#123;</span><br><span class=\"line\">    enabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestanimationframe</span>(expensiveOperation);</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-17\"><a href=\"#小结-17\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>requestAnimationFrame</code> 是简单但实用的工具，可以让 JavaScript 跟进浏览器渲染周期，从而更 加有效地实现网页视觉动效。</p>\n<p>HTML5 的 <code>&lt;canvas&gt;</code> 元素为 JavaScript 提供了动态创建图形的 API。这些图形需要使用特定上下文 绘制，主要有两种。第一种是支持基本绘图操作的 2D 上下文:</p>\n<ul>\n<li>填充和描绘颜色及图案</li>\n<li>绘制矩形</li>\n<li>绘制路径</li>\n<li>绘制文本</li>\n<li>创建渐变和图案</li>\n</ul>\n<p>第二种是 3D 上下文，也就是 WebGL。WebGL 是浏览器对 OpenGL ES 2.0 的实现。OpenGL ES 2.0 是游戏图形开发常用的一个标准。WebGL 支持比 2D 上下文更强大的绘图能力，包括:</p>\n<ul>\n<li>用 OpenGL 着色器语言(GLSL)编写顶点和片段着色器;</li>\n<li>支持定型数组，限定数组中包含数值的类型;</li>\n<li>创建和操作纹理。 目前所有主流浏览器的较新版本都已经支持<code>&lt;canvas&gt;</code>标签。</li>\n</ul>\n<h2 id=\"第十九章-表单脚本\"><a href=\"#第十九章-表单脚本\" class=\"headerlink\" title=\"第十九章 表单脚本\"></a>第十九章 表单脚本</h2><h3 id=\"小结-18\"><a href=\"#小结-18\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>尽管 HTML 和 Web 应用自诞生以来已经发生了天翻地覆的变化，但 Web 表单几乎从来没有变过。 JavaScript 可以增加现有的表单字段以提供新功能或增强易用性。为此，表单字段也暴露了属性、方法 和事件供 JavaScript 使用。以下是本章介绍的一些概念。</p>\n<ul>\n<li>可以使用标准或非标准的方法全部或部分选择文本框中的文本。</li>\n<li>所有浏览器都采用了 Firefox 操作文本选区的方式，使其成为真正的标准。</li>\n<li>可以通过监听键盘事件并检测要插入的字符来控制文本框接受或不接受某些字符。</li>\n</ul>\n<p>所有浏览器都支持剪贴板相关的事件，包括 copy、cut 和 paste。剪贴板事件在不同浏览器中的实现有很大差异。</p>\n<p>在文本框只限某些字符时，可以利用剪贴板事件屏幕粘贴事件。</p>\n<p>选择框也是经常使用 JavaScript 来控制的一种表单控件。借助 DOM，操作选择框比以前方便了很多。</p>\n<p>使用标准的 DOM 技术，可以为选择框添加或移除选项，也可以将选项从一个选择框移动到另一个选择 框，或者重排选项。</p>\n<p>富文本编辑通常以使用包含空白 HTML 文档的内嵌窗格来处理。通过将文档的 designMode 属性设 置为“on”，可以让整个页面变成编辑区，就像文字处理软件一样。另外，给元素添加 contenteditable 属性也可以将元素转换为可编辑区。默认情况下，可以切换文本的粗体、斜体样式，也可以使用剪贴板功 能。JavaScript 通过 execCommand()方法可以执行一些富文本编辑功能，通过 queryCommandEnabled()、 queryCommandState()和 queryCommandValue()方法则可以获取有关文本选区的信息。由于富文本编 辑区不涉及表单字段，因此要将富文本内容提交到服务器，必须把 HTML 从 iframe 或 contenteditable 元素中复制到一个表单字段。</p>\n<h2 id=\"第二十章-Javascript-API\"><a href=\"#第二十章-Javascript-API\" class=\"headerlink\" title=\"第二十章 Javascript API\"></a>第二十章 Javascript API</h2><h3 id=\"小结-19\"><a href=\"#小结-19\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>除了定义新标签，HTML5 还定义了一些 JavaScript API。这些 API 可以为开发者提供更便捷的 Web 接口，暴露堪比桌面应用的能力。本章主要介绍了以下 API。</p>\n<ul>\n<li>Atomics API 用于保护代码在多线程内存访问模式下不发生资源争用。</li>\n<li>postMessage() API 支持从不同源跨文档发送消息，同时保证安全和遵循同源策略。</li>\n<li>Encoding API 用于实现字符串与缓冲区之间的无缝转换(越来越常见的操作)。</li>\n<li>File API 提供了发送、接收和读取大型二进制对象的可靠工具。</li>\n<li>媒体元素<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>拥有自己的 API，用于操作音频和视频。并不是每个浏览器都会支持所有媒体格式，使用 canPlayType()方法可以检测浏览器支持情况。</li>\n<li>拖放 API 支持方便地将元素标识为可拖动，并在操作系统完成放置时给出回应。可以利用它创建自定义可拖动元素和放置目标。</li>\n<li>Notifications API 提供了一种浏览器中立的方式，以此向用户展示消通知弹层。</li>\n<li>Streams API 支持以全新的方式读取、写入和处理数据。</li>\n<li>Timing API 提供了一组度量数据进出浏览器时间的可靠工具。</li>\n<li>Web Components API 为元素重用和封装技术向前迈进提供了有力支撑。</li>\n<li>Web Cryptography API 让生成随机数、加密和签名消息成为一类特性。</li>\n</ul>\n<h2 id=\"第二十一章-错误处理与调试\"><a href=\"#第二十一章-错误处理与调试\" class=\"headerlink\" title=\"第二十一章 错误处理与调试\"></a>第二十一章 错误处理与调试</h2><h3 id=\"小结-20\"><a href=\"#小结-20\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>对于今天复杂的 Web 应用程序而言，JavaScript 中的错误处理十分重要。未能预测什么时候会发生 错误以及如何从错误中恢复，会导致糟糕的用户体验，甚至造成用户流失。大多数浏览器默认不向用户 报告 JavaScript 错误，因此在开发和调试时需要自己实现错误报告。不过在生产环境中，不应该以这种 方式报告错误。</p>\n<p>下列方法可用于阻止浏览器对 JavaScript 错误作出反应。</p>\n<ul>\n<li>使用 try&#x2F;catch 语句，可以通过更合适的方式对错误做出处理，避免浏览器处理。</li>\n<li>定义 window.onerror 事件处理程序，所有没有通过 try&#x2F;catch 处理的错误都会被该事件处理程序接收到(仅限 IE、Firefox 和 Chrome)。</li>\n</ul>\n<p>开发 Web 应用程序时，应该认真考虑可能发生的错误，以及如何处理这些错误。</p>\n<ul>\n<li>首先，应该分清哪些算重大错误，哪些不算重大错误。</li>\n<li>然后，要通过分析代码预测很可能发生哪些错误。由于以下因素，JavaScript 中经常出现错误:<ul>\n<li>类型转换;</li>\n<li>数据类型检测不足;</li>\n<li>向服务器发送错误数据或从服务器接收到错误数据。</li>\n</ul>\n</li>\n</ul>\n<p>IE、Firefox、Chrome、Opera 和 Safari 都有 JavaScript 调试器，有的内置在浏览器中，有的是作为扩 展，需另行下载。所有调试器都能够设置断点、控制代码执行和在运行时检查变量值。</p>\n<h2 id=\"第二十二章-处理-XML\"><a href=\"#第二十二章-处理-XML\" class=\"headerlink\" title=\"第二十二章 处理 XML\"></a>第二十二章 处理 XML</h2><h3 id=\"小结-21\"><a href=\"#小结-21\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>浏览器对使用 JavaScript 处理 XML 实现及相关技术相当支持。然而，由于早期缺少规范，常用的功能出现了不同实现。DOM Level 2 提供了创建空 XML 文档的 API，但不能解析和序列化。浏览器为解析和序列化 XML 实现了两个新类型。</p>\n<ul>\n<li>DOMParser 类型是简单的对象，可以将 XML 字符串解析为 DOM 文档。</li>\n<li>XMLSerializer 类型执行相反操作，将 DOM 文档序列化为 XML 字符串。 基于所有主流浏览器的实现，DOM Level 3 新增了针对 XPath API 的规范。该 API 可以让 JavaScript 针对 DOM 文档执行任何 XPath 查询并得到不同数据类型的结果。</li>\n</ul>\n<p>最后一个与 XML 相关的技术是 XSLT，目前并没有规范定义其 API。Firefox 最早增加了 XSLTProcessor 类型用于通过 JavaScript 处理转换。</p>\n<h2 id=\"第二十三章-JSON\"><a href=\"#第二十三章-JSON\" class=\"headerlink\" title=\"第二十三章 JSON\"></a>第二十三章 JSON</h2><h3 id=\"小结-22\"><a href=\"#小结-22\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JSON 是一种轻量级数据格式，可以方便地表示复杂数据结构。这个格式使用 JavaScript 语法的一个 子集表示对象、数组、字符串、数值、布尔值和 null。虽然 XML 也能胜任同样的角色，但 JSON 更简 洁，JavaScript 支持也更好。更重要的是，所有浏览器都已经原生支持全局 JSON 对象。</p>\n<p>ECMAScript 5 定义了原生 JSON 对象，用于将 JavaScript 对象序列化为 JSON 字符串，以及将 JSON 数组解析为 JavaScript 对象。JSON.stringify()和 JSON.parse()方法分别用于实现这两种操作。这 两个方法都有一些选项可以用来改变默认的行为，以实现过滤或修改流程。</p>\n<h2 id=\"第二十四章-网络请求与远程资源\"><a href=\"#第二十四章-网络请求与远程资源\" class=\"headerlink\" title=\"第二十四章 网络请求与远程资源\"></a>第二十四章 网络请求与远程资源</h2><p>XMLHttpRequest 对象的 API 被普遍认为比较难用，而 Fetch API 自从诞生以后就迅速成为了 XHR 更现代的替代 标准。Fetch API 支持期约(promise)和服务线程(service worker)，已经成为极其强大的 Web 开发工具。</p>\n<h3 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h3><p>IE5 是第一个引入 XHR 对象的浏览器。这个对象是通过 ActiveX 对象实现并包含在 MSXML 库中 的。为此，XHR 对象的 3 个版本在浏览器中分别被暴露为 MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MXSML2.XMLHttp.6.0。</p>\n<p>所有现代浏览器都通过 XMLHttpRequest 构造函数原生支持 XHR 对象:</p>\n<p>let xhr &#x3D; new XMLHttpRequest();</p>\n<h3 id=\"HTTP-头部\"><a href=\"#HTTP-头部\" class=\"headerlink\" title=\"HTTP 头部\"></a>HTTP 头部</h3><ul>\n<li>Accept:浏览器可以处理的内容类型。</li>\n<li>Accept-Charset:浏览器可以显示的字符集。</li>\n<li>Accept-Encoding:浏览器可以处理的压缩编码类型。</li>\n<li>Accept-Language:浏览器可以使用的语言。</li>\n<li>Authorization:HTTP 认证信息。</li>\n<li>Connection:浏览器与服务器的连接类型。</li>\n<li>Cookie:页面中设置的 Cookie。</li>\n<li>Host:发送请求的页面所在的域。</li>\n<li>Referer:发送请求的页面的 URI。<strong>注意，这个字段在 HTTP 规范中就拼错了</strong>，所以考虑到兼容性也必须将错就错。(正确的拼写应该是 Referrer。)</li>\n<li>User-Agent:浏览器的用户代理字符串。</li>\n</ul>\n<p>如果需要发送额外的请求头部，可以使用 setRequestHeader()方法。服务器通过读取自定义头部可以确定适当的操作。自定义头部一定要区别于浏览器正常发送的头部， 否则可能影响服务器正常响应。有些浏览器允许重写默认头部，有些浏览器则不允许。</p>\n<h3 id=\"GET-和-POST-请求\"><a href=\"#GET-和-POST-请求\" class=\"headerlink\" title=\"GET 和 POST 请求\"></a>GET 和 POST 请求</h3><p>最常用的请求方法是 GET 请求，用于向服务器查询某些信息。查询字符串中的每个名和值都必须使用 encodeURIComponent()编码，所有名&#x2F;值对必须以和号(&amp;)分隔。</p>\n<p>第二个最常用的请求是 POST 请求，用于向服务器发送应该保存的数据。每个 POST 请求都应该在 请求体中携带提交的数据，而 GET 请求则不然。POST 请求的请求体可以包含非常多的数据，而且数据 可以是任意格式。</p>\n<p>默认情况下，对服务器而言，POST 请求与提交表单是不一样的。服务器逻辑需要读取原始 POST 数据才能取得浏览器发送的数据。不过，可以使用 XHR 模拟表单提交。为此，第一步需要把 <code>Content- Type</code> 头部设置为<code>&quot;application/x-www-formurlencoded&quot;</code>，这是提交表单时使用的内容类型。第二步是创建对应格式的字符串。POST 数据此时使用与查询字符串相同的格式。</p>\n<p>POST 请求相比 GET 请求要占用更多资源。从性能方面说，<strong>发送相同数量的数据， GET 请求比 POST 请求要快两倍。</strong></p>\n<h3 id=\"XMLHttpRequest-Level-2\"><a href=\"#XMLHttpRequest-Level-2\" class=\"headerlink\" title=\"XMLHttpRequest Level 2\"></a>XMLHttpRequest Level 2</h3><p>XMLHttpRequest Level 2 又进一步发展了 XHR 对象。并非所有浏览器都实现了 XMLHttpRequest Level 2 的所有部分，但所有浏览器都实现了其中部分功能。</p>\n<p><strong>1. FormData 类型</strong></p>\n<p>现代 Web 应用程序中经常需要对表单数据进行序列化，因此 XMLHttpRequest Level 2 新增了 FormData 类型。FormData 类型便于表单序列化，也便于创建与表单类似格式的数据然后通过 XHR 发送。下面的代码创建了一个 FormData 对象，并填充了一些数据:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span>) || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;postexample.php&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;user-info&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>(form));</span><br></pre></td></tr></table></figure>\n\n<p>使用 FormData 的另一个方便之处是不再需要给 XHR 对象显式设置任何请求头部了。XHR 对象能 够识别作为 FormData 实例传入的数据类型并自动配置相应的头部。</p>\n<p><strong>2. 超时</strong></p>\n<p>IE8 给 XHR 对象增加了一个 timeout 属性，用于表示发送请求后等待多少毫秒，如果响应不成功 就中断请求。之后所有浏览器都在自己的 XHR 实现中增加了这个属性。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">timeout</span> = <span class=\"number\">1000</span>; <span class=\"comment\">// 设置 1 秒超时</span></span><br><span class=\"line\">xhr.<span class=\"property\">ontimeout</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Request did not return in a second.&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. overrideMimeType()方法</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;text.php&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">overrideMimeType</span>(<span class=\"string\">&quot;text/xml&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子强制让 XHR 把响应当成 XML 而不是纯文本来处理。为了正确覆盖响应的 MIME 类型， 必须在调用 send()之前调用 overrideMimeType()。</p>\n<h3 id=\"进度事件\"><a href=\"#进度事件\" class=\"headerlink\" title=\"进度事件\"></a>进度事件</h3><p>Progress Events 是 W3C 的工作草案，定义了客户端-服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。</p>\n<ul>\n<li>loadstart:在接收到响应的第一个字节时触发。</li>\n<li>progress:在接收响应期间反复触发。</li>\n<li>error:在请求出错时触发。</li>\n<li>abort:在调用 abort()终止连接时触发。</li>\n<li>load:在成功接收完响应时触发。</li>\n<li>loadend:在通信完成时，且在 error、abort 或 load 之后触发。</li>\n</ul>\n<p>每次请求都会首先触发 loadstart 事件，之后是一个或多个 progress 事件，接着是 error、abort 或 load 中的一个，最后以 loadend 事件结束。</p>\n<h3 id=\"跨源资源共享\"><a href=\"#跨源资源共享\" class=\"headerlink\" title=\"跨源资源共享\"></a>跨源资源共享</h3><p>CORS 背后的基本思路就是使用自定义的 HTTP 头部允许浏览器和服务器相互了解，以确实请求或响应 应该成功还是失败。</p>\n<p>对于简单的请求，比如 GET 或 POST 请求，没有自定义头部，而且请求体是 text&#x2F;plain 类型， 这样的请求在发送时会有一个额外的头部叫 <strong>Origin。</strong> Origin 头部包含发送请求的页面的源(协议、 域名和端口)，以便服务器确定是否为其提供响应。</p>\n<p><code>Origin: http://www.nczonline.net</code></p>\n<p>如果服务器决定响应请求，那么应该发送 Access-Control-Allow-Origin 头部</p>\n<p><code>Access-Control-Allow-Origin: http://www.nczonline.net</code></p>\n<p>如果没有这个头部，或者有但源不匹配，则表明不会响应浏览器请求。否则，服务器就会处理这个 请求。注意，无论请求还是响应都不会包含 cookie 信息。现代浏览器通过 XMLHttpRequest 对象原生支持 CORS。在尝试访问不同源的资源时，这个行为 会被自动触发。</p>\n<p>出于安全考虑，跨域 XHR 对象也施加了一些额外限制。</p>\n<ul>\n<li>不能使用 setRequestHeader()设置自定义头部。</li>\n<li>不能发送和接收 cookie。</li>\n<li>getAllResponseHeaders()方法始终返回空字符串。</li>\n</ul>\n<h3 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h3><p>CORS 通过一种叫预检请求(preflighted request)的服务器验证机制，允许使用自定义头部、除 GET 和 POST 之外的方法，以及不同请求体内容类型。</p>\n<p>客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Origin: http://www.nczonline.net</span><br><span class=\"line\">Access-Control-Request-Method: POST //请求希望使用的方法。</span><br><span class=\"line\">Access-Control-Request-Headers: NCZ //(可选)要使用的逗号分隔的自定义头部列表。</span><br></pre></td></tr></table></figure>\n\n<p>服务端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://www.nczonline.net //与简单请求相同。</span><br><span class=\"line\">Access-Control-Allow-Methods: POST, GET //允许的方法(逗号分隔的列表)。</span><br><span class=\"line\">Access-Control-Allow-Headers: NCZ //服务器允许的头部(逗号分隔的列表)</span><br><span class=\"line\">Access-Control-Max-Age: 1728000 //缓存预检请求的秒数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"凭据请求\"><a href=\"#凭据请求\" class=\"headerlink\" title=\"凭据请求\"></a>凭据请求</h3><p>默认情况下，跨源请求不提供凭据(cookie、HTTP 认证和客户端 SSL 证书)。</p>\n<p>客户端</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withCredentials：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替代性跨源技术\"><a href=\"#替代性跨源技术\" class=\"headerlink\" title=\"替代性跨源技术\"></a>替代性跨源技术</h3><h3 id=\"图片探测\"><a href=\"#图片探测\" class=\"headerlink\" title=\"图片探测\"></a>图片探测</h3><p>这种动态创建图片的技术经常用于图片探测(image pings)。图片探测是与服务器之间简单、跨域、单向的通信。数据通过查询字符串发送，响应可以随意设置，不过一般是位图图片或值为 204 的状态码。 浏览器通过图片探测拿不到任何数据，但可以通过监听 onload 和 onerror 事件知道什么时候能接收 到响应。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">img.<span class=\"property\">onload</span> = img.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&quot;http://www.example.com/test?name=Nicholas&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>图片探测频繁用于跟踪用户在页面上的点击操作或动态显示广告。当然，图片探测的缺点是只能发送 GET 请求和无法获取服务器响应的内容。这也是只能利用图片探测实现浏览器与服务器单向通信的原因。</p>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP 是“JSON with padding”的简写，是在 Web 服务上流行的一种 JSON 变体。</p>\n<p>SONP 调用是通过动态创建 <code>&lt;script&gt;</code> 元素并为 src 属性指定跨域 URL 实现的。</p>\n<p>只能发送 get 请求，缺点是不好确定 JSONP 请求是否失败。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleResponse</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          You&#x27;re at IP address <span class=\"subst\">$&#123;response.ip&#125;</span>, which is in</span></span><br><span class=\"line\"><span class=\"string\">          <span class=\"subst\">$&#123;response.city&#125;</span>, <span class=\"subst\">$&#123;response.region_name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">script.<span class=\"property\">src</span> = <span class=\"string\">&quot;http://freegeoip.net/json/?callback=handleResponse&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">insertBefore</span>(script, <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">firstChild</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h3><p>Fetch API 能够执行 XMLHttpRequest 对象的所有任务，但更容易使用，接口也更现代化，能够在 Web 工作线程等现代 Web 工具中使用。XMLHttpRequest 可以选择异步，而 Fetch API 则必须是异步。Fetch API 是 WHATWG 的一个“活标准”(living standard)，用规范原文说，就是“Fetch 标准定义请求、响应，以及绑定二者的流程:**获取(fetch)**”。</p>\n<p>Fetch API 本身是使用 JavaScript 请求资源的优秀工具，同时这个 API 也能够应用在服务线程 (service worker)中，提供拦截、重定向和修改通过 fetch()生成的请求接口。</p>\n<h3 id=\"中断请求\"><a href=\"#中断请求\" class=\"headerlink\" title=\"中断请求\"></a>中断请求</h3><p>Fetch API 支持通过 AbortController&#x2F;AbortSignal 对中断请求。调用 AbortController. abort()会中断所有网络传输，特别适合希望停止传输大型负载的情况。中断进行中的 fetch() 请求会导致包含错误的拒绝。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> abortController = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>();</span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;wikipedia.zip&#x27;</span>, &#123; <span class=\"attr\">signal</span>: abortController.<span class=\"property\">signal</span> &#125;) .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aborted!&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 10 毫秒后中断请求</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> abortController.<span class=\"title function_\">abort</span>(), <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// 已经中断</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h3><p>Web Socket(套接字)的目标是通过一个长时连接实现与服务器全双工、双向的通信。在 JavaScript 中创建 Web Socket 时，一个 HTTP 请求会发送到服务器以初始化连接。服务器响应后，连接使用 HTTP 25 的 Upgrade 头部从 HTTP 协议切换到 Web Socket 协议。这意味着 Web Socket 不能通过标准 HTTP 服务 器实现，而必须使用支持该协议的专有服务器。</p>\n<p>因为 Web Socket 使用了自定义协议，所以 URL 方案(scheme)稍有变化:不能再使用 <code>http://</code> 或 <code>https://</code>， 而要使用 <code>ws://</code> 和 <code>wss://</code>。前者是不安全的连接，后者是安全连接。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>需要验证请求发送者拥有对资源的访问权限。可以通过如下方式实现。</p>\n<ul>\n<li>要求通过 SSL 访问能够被 Ajax 访问的资源。</li>\n<li>要求每个请求都发送一个按约定算法计算好的令牌(token)。</li>\n</ul>\n<p>以下手段对防护 CSRF 攻击是无效的。</p>\n<ul>\n<li>要求 POST 而非 GET 请求(很容易修改请求方法)。</li>\n<li>使用来源 URL 验证来源(来源 URL 很容易伪造)。</li>\n<li>基于 cookie 验证(同样很容易伪造)。</li>\n</ul>\n<h3 id=\"小结-23\"><a href=\"#小结-23\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Ajax 是无须刷新当前页面即可从服务器获取数据的一个方法，具有如下特点。</p>\n<ul>\n<li>让 Ajax 迅速流行的中心对象是 <strong><code>XMLHttpRequest(XHR)</code>。</strong></li>\n<li>这个对象最早由微软发明，并在 IE5 中作为通过 JavaScript 从服务器获取 XML 数据的一种手段。</li>\n<li>之后，Firefox、Safari、Chrome 和 Opera 都复刻了相同的实现。W3C 随后将 XHR 行为写入 Web 标准。</li>\n<li>虽然不同浏览器的实现有些差异，但 XHR 对象的基本使用在所有浏览器中相对是规范的，因此可以放心地在 Web 应用程序中使用。</li>\n</ul>\n<p>XHR 的一个主要限制是同源策略，即通信只能在相同域名、相同端口和相同协议的前提下完成。</p>\n<p>访问超出这些限制之外的资源会导致安全错误，除非使用了正式的跨域方案。这个方案叫作跨源资源共享(CORS，Cross-Origin Resource Sharing)，XHR 对象原生支持 CORS。图片探测和 JSONP 是另外两种 跨域通信技术，但没有 CORS 可靠。 Fetch API 是作为对 XHR 对象的一种端到端的替代方案而提出的。这个 API 提供了优秀的基于期约 的结构、更直观的接口，以及对 Stream API 的最好支持。</p>\n<p><strong>Web Socket</strong> 是与服务器的全双工、双向通信渠道。与其他方案不同，Web Socket 不使用 HTTP，而 使用了自定义协议，目的是更快地发送小数据块。这需要专用的服务器，但速度优势明显。</p>\n<h2 id=\"第二十五章-客户端存储\"><a href=\"#第二十五章-客户端存储\" class=\"headerlink\" title=\"第二十五章 客户端存储\"></a>第二十五章 客户端存储</h2><p>Progress Events 是 W3C 的工作草案，定义了客户端  服务器端通信。这些事件最初只针对 XHR，现 在也推广到了其他类似的 API。有以下 6 个进度相关的事件。</p>\n<h3 id=\"小结-24\"><a href=\"#小结-24\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Web Storage 定义了两个对象用于存储数据:sessionStorage 和 localStorage。前者用于严格 保存浏览器一次会话期间的数据，因为数据会在浏览器关闭时被删除。后者用于会话之外持久保存数据。</p>\n<p>IndexedDB 是类似于 SQL 数据库的结构化数据存储机制。不同的是，IndexedDB 存储的是对象，而 不是数据表。对象存储是通过定义键然后添加数据来创建的。游标用于查询对象存储中的特定数据，而 索引可以针对特定属性实现更快的查询。</p>\n<p>有了这些存储手段，就可以在客户端通过使用 JavaScript 存储可观的数据。因为这些数据没有加密， 所以要注意不能使用它们存储敏感信息。</p>\n<h2 id=\"第二十六章-模块\"><a href=\"#第二十六章-模块\" class=\"headerlink\" title=\"第二十六章 模块\"></a>第二十六章 模块</h2><h3 id=\"小结-25\"><a href=\"#小结-25\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>模块模式是管理复杂性的永恒工具。开发者可以通过它创建逻辑彼此独立的代码段，在这些代码段之间声明依赖，并将它们连接在一起。此外，这种模式也是经证明能够优雅扩展到任意复杂度且跨平台 方案。</p>\n<p>多年以来，CommonJS 和 AMD 这两个分别针对服务器端环境和受延迟限制的客户端环境的模块系统长期分裂。两个系统都获得了爆炸性增强，但为它们编写的代码则在很多方面不一致，经常也会带有冗余的样板代码。而且，这两个系统都没有在浏览器中实现。缺乏兼容导致出现了相关工具，从而让在浏览器中实现模块模式成为可能。</p>\n<p>ECMAScript 6 规范重新定义了浏览器模块，集之前两个系统之长于一身，并通过更简单的声明性语法暴露出来。浏览器对原生模块的支持越来越好，但也提供了稳健的工具以实现从不支持到支持 ES6 模块的过渡。</p>\n<h2 id=\"第二十七章-工作者线程\"><a href=\"#第二十七章-工作者线程\" class=\"headerlink\" title=\"第二十七章 工作者线程\"></a>第二十七章 工作者线程</h2><h3 id=\"小结-26\"><a href=\"#小结-26\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>工作者线程可以运行异步 JavaScript 而不阻塞用户界面。这非常适合复杂计算和数据处理，特别是 需要花较长时间因而会影响用户使用网页的处理任务。工作者线程有自己独立的环境，只能通过异步消 息与外界通信。</p>\n<p>工作者线程可以是专用线程、共享线程。专用线程只能由一个页面使用，而共享线程则可以由同源 的任意页面共享。</p>\n<p>服务工作者线程用于让网页模拟原生应用程序。服务工作者线程也是一种工作者线程，但它们更像 是网络代理，而非独立的浏览器线程。可以把它们看成是高度定制化的网络缓存，它们也可以在 PWA 中支持推送通知。</p>\n<h2 id=\"第二十八章-最佳实践\"><a href=\"#第二十八章-最佳实践\" class=\"headerlink\" title=\"第二十八章 最佳实践\"></a>第二十八章 最佳实践</h2><h3 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h3><p>与大多数面向对象语言不同， JavaScript 并不强迫开发者把任何东西都定义为对象。它支持任何编程风格，包括传统的面向对象编程、声明式编程，以及函数式编程。</p>\n<ol>\n<li>可读性</li>\n</ol>\n<p>以下这些地方应该写注释：</p>\n<ul>\n<li>函数和方法</li>\n<li>大型代码块</li>\n<li>复杂的算法</li>\n<li>使用黑科技</li>\n</ul>\n<ol>\n<li>变量和函数命名</li>\n</ol>\n<p>以下是关于命名的通用规则：</p>\n<ul>\n<li>变量名应该是名词，例如 car 或 person。</li>\n<li>函数名应该以动词开始，例如 getName()。</li>\n<li>返回布尔值的函数通常以 is 开头，比如 isEnabled()。</li>\n<li>对变量和函数都使用符合逻辑的名称，不用担心长度。</li>\n<li>变量、函数和方法应该以小写字母开头，使用驼峰大小写(camelCase)形式，如 getName()和 isPerson。类名应该首字母大写，如 Person、RequestFactory。常量值应该全部大写并以 下划线相接，比如 REQUEST_TIMEOUT。</li>\n<li>名称要尽量用描述性和直观的词汇，但不要过于冗长。</li>\n</ul>\n<h3 id=\"编码惯例\"><a href=\"#编码惯例\" class=\"headerlink\" title=\"编码惯例\"></a>编码惯例</h3><ol>\n<li>尊重对象所有权</li>\n<li>不声明全局变量</li>\n<li>不要比较 null</li>\n<li>使用常量</li>\n</ol>\n<h3 id=\"其他性能优化注意事项\"><a href=\"#其他性能优化注意事项\" class=\"headerlink\" title=\"其他性能优化注意事项\"></a>其他性能优化注意事项</h3><ul>\n<li>原生方法很快。如：<strong>Math 对象</strong>。</li>\n<li>switch 语句很快。</li>\n<li>位操作很快。</li>\n</ul>\n<h3 id=\"小结-27\"><a href=\"#小结-27\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>随着 JavaScript 开发日益成熟，最佳实践不断涌现。曾经的业余爱好如今也成为了正式的职业。因此，<strong>前端开发也需要像其他编程语言一样，注重可维护性、性能优化和部署。</strong></p>\n<p>为保证 JavaScript 代码的可维护性，可以参考如下编码惯例。</p>\n<ul>\n<li>其他语言的编码惯例可以作为添加注释和确定缩进的参考，但 JavaScript 作为一门适合松散类型的语言也有自己的一些特殊要求。</li>\n<li>由于 JavaScript 必须与 HTML 和 CSS 共存，因此各司其职尤为重要:JavaScript 负责定义行为， HTML 负责定义内容，而 CSS 负责定义外观。</li>\n<li>如果三者职责混淆，则可能导致难以调试的错误和可维护性问题。</li>\n</ul>\n<p>随着 Web 应用程序中 JavaScript 代码量的激增，性能也越来越重要。因此应该牢记如下这些事项。</p>\n<ul>\n<li>执行 JavaScript 所需的时间直接影响网页性能，其重要性不容忽视。</li>\n<li>很多适合 C 语言的性能优化策略同样也适合 JavaScript，包括循环展开和使用 <strong>switch</strong> 语句而不是 if 语句。</li>\n<li>另一个需要重视的方面是 DOM 交互很费时间，因此应该尽可能限制 DOM 操作的数量。</li>\n</ul>\n<p>开发 Web 应用程序的最后一步是上线部署。以下是本章讨论的相关要点。</p>\n<ul>\n<li>为辅助部署，应该建立构建流程，将 JavaScript 文件合并为较少的(最好是只有一个)文件。</li>\n<li>构建流程可以实现很多源代码处理任务的自动化。例如，可以运行 JavaScript 验证程序，确保没有语法错误和潜在的问题。</li>\n<li>压缩可以让文件在部署之前变得尽量小。</li>\n<li>启用 HTTP 压缩可以让网络传输的 JavaScript 文件尽可能小，从而提升页面的整体性能。</li>\n</ul>\n"},{"title":"重庆之旅 World","_content":"\n# 重庆之旅\n\n![](/images/IMG_3406.jpeg)\n\n![](/images/IMG_3409.jpeg)\n\n![](/images/IMG_3458.jpeg)\n\n![](/images/IMG_3480.jpeg)\n\n![](/images/IMG_3519.jpeg)\n\n![](/images/IMG_3575.jpeg)\n\n![](/images/IMG_3677.jpeg)\n\n![](/images/IMG_3918.jpeg)\n\n![](/images/IMG_3967.jpeg)\n\n![](/images/IMG_3975.jpeg)\n\n![](/images/IMG_4042.jpeg)\n\n![](/images/IMG_4316.jpeg)\n","source":"_posts/chongqing.md","raw":"---\ntitle: 重庆之旅 World\n---\n\n# 重庆之旅\n\n![](/images/IMG_3406.jpeg)\n\n![](/images/IMG_3409.jpeg)\n\n![](/images/IMG_3458.jpeg)\n\n![](/images/IMG_3480.jpeg)\n\n![](/images/IMG_3519.jpeg)\n\n![](/images/IMG_3575.jpeg)\n\n![](/images/IMG_3677.jpeg)\n\n![](/images/IMG_3918.jpeg)\n\n![](/images/IMG_3967.jpeg)\n\n![](/images/IMG_3975.jpeg)\n\n![](/images/IMG_4042.jpeg)\n\n![](/images/IMG_4316.jpeg)\n","slug":"chongqing","published":1,"date":"2022-09-15T11:56:09.723Z","updated":"2022-09-15T12:03:50.825Z","_id":"cl82zx83g0002bc9o9uqo8wa4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"重庆之旅\"><a href=\"#重庆之旅\" class=\"headerlink\" title=\"重庆之旅\"></a>重庆之旅</h1><p><img src=\"/images/IMG_3406.jpeg\"></p>\n<p><img src=\"/images/IMG_3409.jpeg\"></p>\n<p><img src=\"/images/IMG_3458.jpeg\"></p>\n<p><img src=\"/images/IMG_3480.jpeg\"></p>\n<p><img src=\"/images/IMG_3519.jpeg\"></p>\n<p><img src=\"/images/IMG_3575.jpeg\"></p>\n<p><img src=\"/images/IMG_3677.jpeg\"></p>\n<p><img src=\"/images/IMG_3918.jpeg\"></p>\n<p><img src=\"/images/IMG_3967.jpeg\"></p>\n<p><img src=\"/images/IMG_3975.jpeg\"></p>\n<p><img src=\"/images/IMG_4042.jpeg\"></p>\n<p><img src=\"/images/IMG_4316.jpeg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"重庆之旅\"><a href=\"#重庆之旅\" class=\"headerlink\" title=\"重庆之旅\"></a>重庆之旅</h1><p><img src=\"/images/IMG_3406.jpeg\"></p>\n<p><img src=\"/images/IMG_3409.jpeg\"></p>\n<p><img src=\"/images/IMG_3458.jpeg\"></p>\n<p><img src=\"/images/IMG_3480.jpeg\"></p>\n<p><img src=\"/images/IMG_3519.jpeg\"></p>\n<p><img src=\"/images/IMG_3575.jpeg\"></p>\n<p><img src=\"/images/IMG_3677.jpeg\"></p>\n<p><img src=\"/images/IMG_3918.jpeg\"></p>\n<p><img src=\"/images/IMG_3967.jpeg\"></p>\n<p><img src=\"/images/IMG_3975.jpeg\"></p>\n<p><img src=\"/images/IMG_4042.jpeg\"></p>\n<p><img src=\"/images/IMG_4316.jpeg\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}